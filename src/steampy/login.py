from __future__ import annotations

from base64 import b64encode
from http import HTTPStatus
from typing import TYPE_CHECKING, List, Dict, Any
import secrets
from urllib.parse import urlparse
import time
from datetime import datetime
import requests

from rsa import PublicKey, encrypt

from . import guard
from .exceptions import ApiException, CaptchaRequired, InvalidCredentials
from .models import SteamUrl, TransferResult

from src.utils.logger_setup import logger

if TYPE_CHECKING:
    from requests import Response, Session

class LoginExecutor:
    def __init__(self, steam_id: str, username: str, password: str, shared_secret: str, session: Session) -> None:
        self.steam_id = steam_id
        self.username = username
        self.password = password
        self.one_time_code = ''
        self.shared_secret = shared_secret
        self.session = session
        self.refresh_token = ''

    def _api_call(self, method: str, service: str, endpoint: str, version: str = 'v1', params: dict | None = None) -> Response:
        url = f'{SteamUrl.API_URL}/{service}/{endpoint}/{version}'
        # All requests from the login page use the same 'Referer' and 'Origin' values
        headers = {'Referer': f'{SteamUrl.COMMUNITY_URL}/', 'Origin': SteamUrl.COMMUNITY_URL}
        if method.upper() == 'GET':
            return self.session.get(url, params=params, headers=headers)
        elif method.upper() == 'POST':
            return self.session.post(url, data=params, headers=headers)
        else:
            raise ValueError('Method must be either GET or POST')

    def login(self) -> tuple[Session, str]:
        try:
            login_response = self._send_login_request()
            if not login_response.json()['response']:
                raise ApiException('No response received from Steam API. Please try again later.')
            
            self._check_for_captcha(login_response)
            
            self._update_steam_guard(login_response)

            self.get_web_cookies(self.refresh_token, self.steam_id)

            return self.session, self.refresh_token
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ login: {e}")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ cookies: {list(self.session.cookies.get_dict().keys())}")
            raise

    def _send_login_request(self) -> Response:
        rsa_params = self._fetch_rsa_params()
        encrypted_password = self._encrypt_password(rsa_params)
        rsa_timestamp = rsa_params['rsa_timestamp']
        request_data = self._prepare_login_request_data(encrypted_password, rsa_timestamp)
        return self._api_call('POST', 'IAuthenticationService', 'BeginAuthSessionViaCredentials', params=request_data)


    def _fetch_rsa_params(self, current_number_of_repetitions: int = 0) -> dict:
        self.session.post(SteamUrl.COMMUNITY_URL)
        request_data = {'account_name': self.username}
        response = self._api_call('GET', 'IAuthenticationService', 'GetPasswordRSAPublicKey', params=request_data)

        if response.status_code == HTTPStatus.OK and 'response' in response.json():
            key_data = response.json()['response']
            # Steam may return an empty 'response' value even if the status is 200
            if 'publickey_mod' in key_data and 'publickey_exp' in key_data and 'timestamp' in key_data:
                rsa_mod = int(key_data['publickey_mod'], 16)
                rsa_exp = int(key_data['publickey_exp'], 16)
                return {'rsa_key': PublicKey(rsa_mod, rsa_exp), 'rsa_timestamp': key_data['timestamp']}

        maximal_number_of_repetitions = 5
        if current_number_of_repetitions < maximal_number_of_repetitions:
            return self._fetch_rsa_params(current_number_of_repetitions + 1)

        raise ApiException(f'Could not obtain rsa-key. Status code: {response.status_code}')

    def _encrypt_password(self, rsa_params: dict) -> bytes:
        return b64encode(encrypt(self.password.encode('utf-8'), rsa_params['rsa_key']))

    def _prepare_login_request_data(self, encrypted_password: bytes, rsa_timestamp: str) -> dict:
        return {
            'persistence': '1',
            'encrypted_password': encrypted_password,
            'account_name': self.username,
            'encryption_timestamp': rsa_timestamp,
        }

    @staticmethod
    def _check_for_captcha(login_response: Response) -> None:
        if login_response.json().get('captcha_needed', False):
            raise CaptchaRequired('Captcha required')

    def _enter_steam_guard_if_necessary(self, login_response: Response) -> Response:
        if login_response.json()['requires_twofactor']:
            self.one_time_code = guard.generate_one_time_code(self.shared_secret)
            return self._send_login_request()
        return login_response

    @staticmethod
    def _assert_valid_credentials(login_response: Response) -> None:
        if not login_response.json()['success']:
            raise InvalidCredentials(login_response.json()['message'])

    def _update_steam_guard(self, login_response: Response) -> None:
        try:
            client_id = login_response.json()['response']['client_id']
            steamid = login_response.json()['response']['steamid']
            request_id = login_response.json()['response']['request_id']
            code_type = 3
            code = guard.generate_one_time_code(self.shared_secret)

            update_data = {'client_id': client_id, 'steamid': steamid, 'code_type': code_type, 'code': code}
            response = self._api_call(
                'POST', 'IAuthenticationService', 'UpdateAuthSessionWithSteamGuardCode', params=update_data,
            )
            if response.status_code == HTTPStatus.OK:
                self._pool_sessions_steam(client_id, request_id)
            else:
                raise Exception('Cannot update Steam guard')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _update_steam_guard: {e}")
            raise

    def _pool_sessions_steam(self, client_id: str, request_id: str) -> None:
        try:
            pool_data = {'client_id': client_id, 'request_id': request_id}
            response = self._api_call('POST', 'IAuthenticationService', 'PollAuthSessionStatus', params=pool_data)
            self.refresh_token = response.json()['response']['refresh_token']
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _pool_sessions_steam: {e}")
            raise

    def get_web_cookies(self, refresh_token: str, steam_id: str) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ web cookies –¥–ª—è Steam —Å–∞–π—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.
        
        –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–æ–≥ getWebCookies() –∏–∑ node-steam-session.
        –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: https://github.com/DoctorMcKay/node-steam-session/blob/master/src/LoginSession.ts#L1050-L1150
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebBrowser –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
        1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id (12 –±–∞–π—Ç hex) –∫–∞–∫ randomBytes(12).toString('hex')
        2. POST –∫ /jwt/finalizelogin —Å refresh_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è transfer_info –º–∞—Å—Å–∏–≤–∞
        3. –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ cookies –∏–∑ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞ finalizelogin
        4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ transfer_info URLs (community, store, help, checkout) —Å retry –ª–æ–≥–∏–∫–æ–π
        5. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rtExpiry –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è refresh —Ç–æ–∫–µ–Ω–∞
        6. –û–±–Ω–æ–≤–ª—è–µ—Ç self.session.cookies —Å –µ–¥–∏–Ω—ã–º–∏ sessionid –¥–ª—è –≤—Å–µ—Ö Steam –¥–æ–º–µ–Ω–æ–≤
        
        Args:
            refresh_token (str): JWT refresh token –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Steam WebAPI.
                            –§–æ—Ä–º–∞—Ç: "eyJ..." —Å –ø–æ–ª—è–º–∏ iss, sub, aud, exp, iat
            steam_id (str): Steam ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "76561198XXXXXXXXX".
                        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ transfer requests –∫–∞–∫ steamID –ø–∞—Ä–∞–º–µ—Ç—Ä
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ cookie-—Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "name=value; Domain=domain; –∞—Ç—Ä–∏–±—É—Ç—ã".
                    –í–∫–ª—é—á–∞–µ—Ç steamLoginSecure, steamRefresh_steam, steamCountry –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞.
                    –ù–ï –≤–∫–ª—é—á–∞–µ—Ç sessionid cookies (–æ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø—Ä—è–º–æ –≤ self.session)
                    
        Raises:
            Exception: HTTP –æ—à–∏–±–∫–∏ (—Å—Ç–∞—Ç—É—Å != 200) –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –∫ Steam API
            Exception: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç /jwt/finalizelogin
            Exception: Steam API –æ—à–∏–±–∫–∏ –≤ –ø–æ–ª–µ 'error' –æ—Ç–≤–µ—Ç–∞ finalizelogin
            Exception: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ transfer_info –º–∞—Å—Å–∏–≤–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            Exception: –ò—Å—Ç–µ–∫—à–∏–π refresh —Ç–æ–∫–µ–Ω (rtExpiry <= current_timestamp)
            Exception: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ transfer –æ—Ç–≤–µ—Ç–∞—Ö
            Exception: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ steamLoginSecure cookie –≤ transfer –æ—Ç–≤–µ—Ç–∞—Ö
            
        Side Effects:
            - –û–±–Ω–æ–≤–ª—è–µ—Ç self.session.cookies —Å –Ω–æ–≤—ã–º–∏ Steam cookies
            - –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ sessionid cookies –µ–¥–∏–Ω—ã–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            - –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ—à–∏–±–∫–∏ –≤ stdout
            
        Note:
            –ú–µ—Ç–æ–¥ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ self.session - –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞
            –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ –≤—Å–µ–º Steam –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞–º.
            –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è WebBrowser –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–Ω–µ MobileApp/SteamClient).
        """
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sessionId –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ (randomBytes(12).toString('hex'))
        session_id = secrets.token_hex(12)

        # –î–ª—è WebBrowser –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã - –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        finalize_response, json_body = self._make_finalize_request(session_id, refresh_token)
        cookies = self._extract_initial_cookies(finalize_response)
        cookies = self._process_transfer_info(steam_id, json_body, cookies)

        # –ó–∞–º–µ–Ω—è–µ–º sessionid –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.
        self._filter_and_add_session_cookies(session_id)
        
        print(f"‚úÖ Returning {len(cookies)} cookies")
        return cookies

    def _make_finalize_request(self, session_id: str, refresh_token: str) -> tuple:
        """
        –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è web cookies —á–µ—Ä–µ–∑ Steam JWT finalizelogin endpoint.
        
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å –∫ /jwt/finalizelogin —Å refresh_token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 
        transfer_info - –º–∞—Å—Å–∏–≤–∞ URL'–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è domain-specific cookies.
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ Origin/Referer –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
        
        Args:
            session_id (str): –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π session ID (12 –±–∞–π—Ç hex). 
                            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Steam –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö requests
            refresh_token (str): JWT refresh token –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
                            –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ 'nonce' –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ request body
            
        Returns:
            tuple[requests.Response, dict]: –ö–æ—Ä—Ç–µ–∂ –∏–∑:
                - finalize_response: HTTP response –æ–±—ä–µ–∫—Ç —Å Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                - json_body: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º 'transfer_info'
                
        Raises:
            Exception: HTTP —Å—Ç–∞—Ç—É—Å != 200 –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ finalizelogin
            Exception: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ (–Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è)
            Exception: –ü–æ–ª–µ 'error' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ JSON –æ—Ç–≤–µ—Ç–µ 
            Exception: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è 'transfer_info' –≤ –æ—Ç–≤–µ—Ç–µ
            
        Request Details:
            URL: https://login.steampowered.com/jwt/finalizelogin
            Method: POST
            Headers: Origin/Referer: steamcommunity.com (–¥–ª—è –æ–±—Ö–æ–¥–∞ CORS)
            Body: nonce={refresh_token}, sessionid={session_id}, redir=login_home_url
            
        Note:
            –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω - –±–µ–∑ transfer_info –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
            cookies –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Steam –¥–æ–º–µ–Ω–æ–≤. Steam –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            –≤–∏–¥–∞ {url: "https://domain.com/login/settoken", params: {...}}.
        """
        body = {
            'nonce': refresh_token,
            'sessionid': session_id,
            'redir': 'https://steamcommunity.com/login/home/?goto='
        }

        headers = {
            'Origin': 'https://steamcommunity.com',
            'Referer': 'https://steamcommunity.com/',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        finalize_response = self.session.post(
            'https://login.steampowered.com/jwt/finalizelogin',
            data=body,
            headers=headers
        )

        if finalize_response.status_code != 200:
            raise Exception(f'HTTP error {finalize_response.status_code}')

        try:
            json_body = finalize_response.json()
        except:
            raise Exception('Invalid JSON response from finalizelogin')

        if json_body.get('error'):
            raise Exception(f'Steam error: {json_body["error"]}')

        if not json_body.get('transfer_info'):
            raise Exception('Malformed login response - no transfer_info')

        return finalize_response, json_body

    def _extract_initial_cookies(self, finalize_response) -> List[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ cookies –∏–∑ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞ finalizelogin.
        
        –ü–∞—Ä—Å–∏—Ç Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç cookies –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º Domain –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        —Ç–∞–º –≥–¥–µ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –≠—Ç–∏ cookies —Å–æ–¥–µ—Ä–∂–∞—Ç –±–∞–∑–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é 
        –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ transfer_info URLs.
        
        Args:
            finalize_response (requests.Response): HTTP –æ—Ç–≤–µ—Ç –æ—Ç /jwt/finalizelogin
                                                —Å Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö cookie-—Å—Ç—Ä–æ–∫ —Å Domain –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏.
                    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "name=value; Domain=domain; –∞—Ç—Ä–∏–±—É—Ç—ã"
            
        Algorithm:
            1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ finalize_response.url
            2. –ü–∞—Ä—Å–∏—Ç set-cookie –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª—è—è –ø–æ –∑–∞–ø—è—Ç—ã–º  
            3. –î–ª—è –∫–∞–∂–¥–æ–π cookie –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Domain= –∞—Ç—Ä–∏–±—É—Ç–∞
            4. –î–æ–±–∞–≤–ª—è–µ—Ç "; Domain={domain}" –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            5. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö cookie —Å—Ç—Ä–æ–∫
            
        Note:
            –≠—Ç–æ—Ç —ç—Ç–∞–ø –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω - cookies –∏–∑ finalizelogin –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç
            –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è transfer requests. –ë–µ–∑ –Ω–∏—Ö Steam
            –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å HTTP 401/403 –æ—à–∏–±–∫–∞–º–∏.
            
            –ú–µ—Ç–æ–¥ —Ç–æ—á–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ª–æ–≥–∏–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ TypeScript –∫–æ–¥–∞
            –≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É cookie.lower().find('domain=') >= 0.
        """
        domain = urlparse(finalize_response.url).netloc
        cookies: List[str] = []
        
        set_cookie_headers = finalize_response.headers.get('set-cookie', '')
        if set_cookie_headers:
            for cookie in set_cookie_headers.split(','):
                cookie = cookie.strip()
                if not cookie.lower().find('domain=') >= 0:
                    cookie += f'; Domain={domain}'
                cookies.append(cookie)
        
        return cookies

    def _process_transfer_info(self, steam_id: str, json_body: Dict[str, Any], cookies: List[str]) -> List[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ transfer_info URLs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è domain-specific cookies.
        
        –ò—Ç–µ—Ä–∏—Ä—É–µ—Ç –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º transfer_info –∏–∑ –æ—Ç–≤–µ—Ç–∞ finalizelogin –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç
        –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∂–¥–æ–≥–æ URL –º–µ—Ç–æ–¥—É _process_single_transfer. –°–æ–±–∏—Ä–∞–µ—Ç cookies
        —Å–æ –≤—Å–µ—Ö Steam –¥–æ–º–µ–Ω–æ–≤: community, store, help, checkout, steam.tv –∏ –¥—Ä—É–≥–∏—Ö.
        
        Args:
            steam_id (str): Steam ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ transfer requests.
                        –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ 'steamID' –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ POST body –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            json_body (dict): JSON –æ—Ç–≤–µ—Ç –æ—Ç finalizelogin —Å–æ–¥–µ—Ä–∂–∞—â–∏–π transfer_info –º–∞—Å—Å–∏–≤.
                            –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: {url: str, params: dict}
            cookies (List[str]): –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ cookies –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–≤—ã–º–∏ cookies
            
        Returns:
            List[str]: –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ cookies —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ domain-specific cookies
                    –æ—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö transfer URLs
                    
        Transfer Info Structure:
            [
                {
                    "url": "https://steamcommunity.com/login/settoken",
                    "params": {"nonce": "...", "auth": "..."}
                },
                {
                    "url": "https://store.steampowered.com/login/settoken", 
                    "params": {"nonce": "...", "auth": "..."}
                }
                // ... –¥—Ä—É–≥–∏–µ –¥–æ–º–µ–Ω—ã
            ]
            
        Note:
            –ö–∞–∂–¥—ã–π transfer URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–º—É Steam –¥–æ–º–µ–Ω—É/—Å–µ—Ä–≤–∏—Å—É.
            –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• URLs –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
            web cookies –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Å–µ–º–∏ Steam –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏.
            
            –ú–µ—Ç–æ–¥ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–¥–Ω–æ–≥–æ URL - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É
            –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (–æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ _process_single_transfer).
        """
        for transfer in json_body['transfer_info']:
            cookies = self._process_single_transfer(transfer, steam_id, cookies)
        
        return cookies

    def _process_single_transfer(self, transfer: Dict[str, Any], steam_id: str, cookies: List[str]) -> List[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω transfer URL —Å retry –ª–æ–≥–∏–∫–æ–π, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º cookies.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É Steam domain endpoint (settoken) —Å
        –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–æ 5 —Ä–∞–∑. –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç JSON –æ—Ç–≤–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
        —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è refresh —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ rtExpiry, –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç steamLoginSecure 
        cookies –∏–∑ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
        
        Args:
            transfer (dict): –û–±—ä–µ–∫—Ç transfer –æ—Ç Steam API —Å –∫–ª—é—á–∞–º–∏:
                            - 'url': endpoint URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookies
                            - 'params': –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è request body
            steam_id (str): Steam ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ 'steamID' –≤ request body
            cookies (List[str]): –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ cookies –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            List[str]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ cookies —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ domain cookies
                    –æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ transfer URL
                    
        Raises:
            Exception: –í—Å–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –±–µ–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            Exception: HTTP —Å—Ç–∞—Ç—É—Å >= 400 –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç transfer URL
            Exception: Steam API –æ—à–∏–±–∫–∞ –≤ JSON –ø–æ–ª–µ 'result' != TransferResult.OK
            Exception: Refresh —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (rtExpiry <= current_timestamp) 
            Exception: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            Exception: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π steamLoginSecure cookie
            
        Retry Logic:
            - –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL (ATTEMPT_COUNT = 5)
            - –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
            - –ü—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–µ—É–¥–∞—á–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
            - –ü—Ä–∏ —É—Å–ø–µ—Ö–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ retry —Ü–∏–∫–ª–∞
            
        Validation Steps:
            1. HTTP —Å—Ç–∞—Ç—É—Å < 400
            2. JSON –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ result –ø–æ–ª—è
            3. –ü—Ä–æ–≤–µ—Ä–∫–∞ rtExpiry –ø—Ä–æ—Ç–∏–≤ current timestamp
            4. –ù–∞–ª–∏—á–∏–µ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–∞
            5. –ù–∞–ª–∏—á–∏–µ steamLoginSecure –≤ cookies
            
        Cookie Processing:
            - –ü–∞—Ä—Å–∏—Ç Set-Cookie –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª—è—è –ø–æ –∑–∞–ø—è—Ç—ã–º
            - –î–æ–±–∞–≤–ª—è–µ—Ç Domain –∞—Ç—Ä–∏–±—É—Ç –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            - –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ cookies –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
            
        Note:
            –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—É—é retry –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º
            node-steam-session. Steam API –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏,
            –ø–æ—ç—Ç–æ–º—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–≤—ã—à–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å.
        """
        url = transfer['url']
        params = transfer.get('params', {})
        
        # –î–æ–±–∞–≤–ª—è–µ–º steamID –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        transfer_body = {'steamID': steam_id, **params}
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ 5 —Ä–∞–∑ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        ATTEMPT_COUNT = 5
        for attempt in range(ATTEMPT_COUNT):
            try:
                result = self.session.post(url, data=transfer_body)
                
                if result.status_code >= 400:
                    raise Exception(f'HTTP error {result.status_code}')

                json_result = result.json()
                logger.info(f"üîç JSON result: {json_result}")
                if json_result.get('result') and json_result['result'] != TransferResult.OK:
                    raise Exception(f'Steam error result: {json_result["result"]}')
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è refresh —Ç–æ–∫–µ–Ω–∞
                if 'rtExpiry' in json_result:
                    expiry_timestamp = json_result['rtExpiry']
                    current_timestamp = int(time.time())
                    
                    if expiry_timestamp <= current_timestamp:
                        logger.warning(f"‚ö†Ô∏è Refresh —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {expiry_timestamp}")
                        #TODO –æ–±–Ω–æ–≤–∏—Ç—å refresh —Ç–æ–∫–µ–Ω
                        raise Exception('Refresh token expired')
                    else:
                        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –∏—Å—Ç–µ—á–µ—Ç —Ç–æ–∫–µ–Ω
                        expiry_date = datetime.fromtimestamp(expiry_timestamp)
                        logger.info(f"üïí Refresh —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expiry_date}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                set_cookie = result.headers.get('set-cookie', '')
                if not set_cookie:
                    raise Exception('No Set-Cookie header in result')

                if not any('steamLoginSecure=' in c for c in set_cookie.split(',')):
                    raise Exception('No steamLoginSecure cookie in result')

                # –î–æ–±–∞–≤–ª—è–µ–º cookies —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ–º–µ–Ω–æ–º
                result_domain = urlparse(result.url).netloc
                for cookie in set_cookie.split(','):
                    cookie = cookie.strip()
                    if not 'domain=' in cookie.lower():
                        cookie += f'; Domain={result_domain}'
                    cookies.append(cookie)

                print(f"‚úÖ Successfully got cookies from {url}")
                break  # –£—Å–ø–µ—Ö - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤
                
            except Exception as ex:
                if attempt == ATTEMPT_COUNT - 1:
                    print(f"[ERROR] All {ATTEMPT_COUNT} attempts failed for {url}: {ex}")
                    raise ex
                
                print(f"[DEBUG] Attempt {attempt + 1}/{ATTEMPT_COUNT} failed for {url}: {ex}")

        return cookies

    def _filter_and_add_session_cookies(self, session_id: str) -> None:
        """
        –ó–∞–º–µ–Ω—è–µ—Ç sessionid cookies –≤ self.session.cookies –µ–¥–∏–Ω—ã–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
        
        –†–µ–∞–ª–∏–∑—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ node-steam-session: —É–¥–∞–ª—è–µ—Ç –≤—Å–µ
        —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ sessionid cookies –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ
        —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π session_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Steam –¥–æ–º–µ–Ω–∞. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç
        –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é web —Å–µ—Å—Å–∏—é –Ω–∞ –≤—Å–µ—Ö Steam —Å–∞–π—Ç–∞—Ö.
        
        Args:
            session_id (str): –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π session ID (12 –±–∞–π—Ç hex) –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                            –≤–æ –≤—Å–µ Steam –¥–æ–º–µ–Ω—ã. –¢–æ—Ç –∂–µ ID —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /jwt/finalizelogin
            
        Side Effects:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç self.session.cookies:
            - –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ sessionid cookies –¥–ª—è Steam –¥–æ–º–µ–Ω–æ–≤
            - –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ sessionid cookies —Å –µ–¥–∏–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã: Path=/; Secure=True –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
            
        Algorithm (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç JS –∫–æ–¥—É):
            1. –°–∫–∞–Ω–∏—Ä—É–µ—Ç self.session.cookies –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤  
            2. –ò—Å–∫–ª—é—á–∞–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–π –¥–æ–º–µ–Ω 'login.steampowered.com'
            3. –£–¥–∞–ª—è–µ—Ç –≤—Å–µ sessionid cookies —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ domain/path –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π sessionid –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ session.cookies.set()
            
        Processed Domains (–æ–±—ã—á–Ω–æ):
            - steamcommunity.com (—Ñ–æ—Ä—É–º—ã, –ø—Ä–æ—Ñ–∏–ª–∏, –≥—Ä—É–ø–ø—ã)
            - store.steampowered.com (–º–∞–≥–∞–∑–∏–Ω –∏–≥—Ä)  
            - help.steampowered.com (–ø–æ–¥–¥–µ—Ä–∂–∫–∞)
            - checkout.steampowered.com (–ø–æ–∫—É–ø–∫–∏)
            - steam.tv (—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏)
            
        Error Handling:
            - –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ cookies (–º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
            - –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É
            - –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤—ã—Ö sessionid –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —É–¥–∞–ª–µ–Ω–∏—è
            
        Note:
            –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã Steam web —Å–µ—Å—Å–∏–∏.
            –ï–¥–∏–Ω—ã–π sessionid –Ω–∞ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–∞—Ö –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –º–µ–∂–¥—É Steam —Å–∞–π—Ç–∞–º–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
            
            –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç JS –∫–æ–¥—É: cookies.filter() + forEach(domain => cookies.push())
        """
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ sessionid cookies
        domains = set()
        sessionid_cookies_to_remove = []
        
        for cookie in self.session.cookies:
            if cookie.domain and cookie.domain != 'login.steampowered.com':
                domains.add(cookie.domain)
                
                # –ï—Å–ª–∏ —ç—Ç–æ sessionid cookie - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                if cookie.name == 'sessionid':
                    sessionid_cookies_to_remove.append((cookie.domain, cookie.path))
        
        print(f"üîç –î–æ–º–µ–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è sessionid: {domains}")
        
        # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ sessionid cookies
        for domain, path in sessionid_cookies_to_remove:
            try:
                self.session.cookies.clear(domain=domain, path=path, name='sessionid')
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π sessionid –¥–ª—è {domain} (path={path})")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å sessionid –¥–ª—è {domain}: {e}")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π sessionid –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
        for domain in domains:
            self.session.cookies.set(
                'sessionid', 
                session_id,
                domain=domain,
                path='/',
                secure=True
            )
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π sessionid –¥–ª—è {domain}")
        
        print(f"üéØ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(domains)} –¥–æ–º–µ–Ω–æ–≤ —Å sessionid={session_id[:8]}...")



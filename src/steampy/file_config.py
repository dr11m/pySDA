#!/usr/bin/env python3
"""
File Configuration Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
"""

import argparse
import getpass
import json
import os
import shutil
from src.utils.logger_setup import logger
import time
from pathlib import Path
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
import yaml

from .config import ConfigManager, AccountConfig
from .models import SteamUrl

DEFAULT_CONFIG = {}


@dataclass
class GlobalSettings:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    log_level: str = "INFO"
    log_dir: str = "~/.steampy/logs"
    config_dir: str = "~/.steampy/config"
    max_concurrent_sessions: int = 5
    default_session_timeout: int = 300
    enable_encryption: bool = True
    backup_configs: bool = True
    backup_interval_hours: int = 24


@dataclass
class MonitoringSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    enable_global_monitoring: bool = True
    status_check_interval: int = 60
    health_check_interval: int = 300
    auto_restart_failed_sessions: bool = True


@dataclass
class TradeSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    global_trade_enabled: bool = True
    max_trades_per_hour: int = 10
    trade_timeout_seconds: int = 30
    confirmation_retry_count: int = 3
    confirmation_retry_delay: int = 5
    blacklisted_partners: List[str] = None
    whitelisted_partners: List[str] = None
    auto_decline_items: List[str] = None
    
    def __post_init__(self):
        if self.blacklisted_partners is None:
            self.blacklisted_partners = []
        if self.whitelisted_partners is None:
            self.whitelisted_partners = []
        if self.auto_decline_items is None:
            self.auto_decline_items = ["Graffiti", "Sticker"]


class FileConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é config.yaml)
        """
        if config_file:
            self.config_file = Path(config_file)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: yaml, yml, json
            for ext in ['yaml', 'yml', 'json']:
                candidate = Path(f"config.{ext}")
                if candidate.exists():
                    self.config_file = candidate
                    break
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º yaml –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.config_file = Path("config.yaml")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        self.is_yaml = self.config_file.suffix.lower() in ['.yaml', '.yml']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª-–ø—Ä–∏–º–µ—Ä
        if self.is_yaml:
            self.example_file = Path("config.example.yaml")
        else:
            self.example_file = Path("config.example.json")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()  # –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ loguru
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config_data: Dict[str, Any] = {}
        self._load_config()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.global_settings = self._load_global_settings()
        self.monitoring_settings = self._load_monitoring_settings()
        self.trade_settings = self._load_trade_settings()
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AccountConfig –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        self.account_config_manager = self._create_account_manager()
    
    def _setup_logging(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —á–µ—Ä–µ–∑ loguru –≤ logger_setup.py"""
        pass
    
    def _load_config(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
        if not self.config_file.exists():
            self._create_config_from_example()
        
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                if self.is_yaml and yaml:
                    self.config_data = yaml.safe_load(f) or {}
                else:
                    self.config_data = json.load(f)
            
            self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_file}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.config_data = {}
    
    def _create_config_from_example(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"""
        if not self.example_file.exists():
            self.logger.warning(f"–§–∞–π–ª –ø—Ä–∏–º–µ—Ä–∞ {self.example_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            shutil.copy2(self.example_file, self.config_file)
            self.logger.info(f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {self.config_file} –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
            self._show_first_time_setup_instructions()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞: {e}")
    
    def _show_first_time_setup_instructions(self) -> None:
        """–ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("\n" + "="*60)
        print("üéâ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í STEAM ACCOUNT MANAGER!")
        print("="*60)
        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_file}")
        print("\nüìù –ß–¢–û –ù–£–ñ–ù–û –°–î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:")
        print(f"1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ {self.config_file} –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –∏ API –∫–ª—é—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:")
        print("   python -m steampy.file_config --setup-credentials")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print("   python examples/account_manager_test.py")
        print("\nüîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:")
        print(f"- –§–∞–π–ª {self.config_file} –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ git (—É–∂–µ –≤ .gitignore)")
        print("- –ü–∞—Ä–æ–ª–∏ –∏ API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ .maFile —Ñ–∞–π–ª—ã")
        print("\n" + "="*60)
    
    def _load_global_settings(self) -> GlobalSettings:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_data = self.config_data.get('global_settings', {})
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –ø—É—Ç—å ~ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        if 'log_dir' in settings_data:
            settings_data['log_dir'] = str(Path(settings_data['log_dir']).expanduser())
        if 'config_dir' in settings_data:
            settings_data['config_dir'] = str(Path(settings_data['config_dir']).expanduser())
        
        return GlobalSettings(**settings_data)
    
    def _load_monitoring_settings(self) -> MonitoringSettings:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        monitoring_data = self.config_data.get('monitoring', {})
        return MonitoringSettings(**monitoring_data)
    
    def _load_trade_settings(self) -> TradeSettings:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        trade_data = self.config_data.get('trade_settings', {})
        return TradeSettings(**trade_data)
    
    def _create_account_manager(self) -> ConfigManager:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º config_dir –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        account_manager = ConfigManager(config_dir=self.global_settings.config_dir)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        accounts_data = self.config_data.get('accounts', {})
        
        for account_name, account_config in accounts_data.items():
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ AccountConfig
                account = self._convert_file_account_to_config(account_config)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if account_name not in account_manager.list_accounts():
                    account_manager.add_account(account)
                    self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞: {account_name}")
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
                    self._update_account_from_file(account_manager, account_name, account_config)
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")
        
        return account_manager
    
    def _convert_file_account_to_config(self, file_config: Dict[str, Any]) -> AccountConfig:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ AccountConfig"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        basic_params = {
            'name': file_config['name'],
            'mafile_path': file_config.get('mafile_path', ''),
            'seconds_to_check_session': file_config.get('seconds_to_check_session', 300),
            'allowed_to_check_and_accept_new_trades': file_config.get('allowed_to_check_and_accept_new_trades', True),
            'seconds_to_check_trades': file_config.get('seconds_to_check_trades', 60),
            'accept_every_accepted_on_web_trade': file_config.get('accept_every_accepted_on_web_trade', False),
            'accept_every_free_trade': file_config.get('accept_every_free_trade', False)
        }
        
        return AccountConfig(**basic_params)
    
    def _update_account_from_file(self, account_manager: ConfigManager, 
                                  account_name: str, file_config: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        update_params = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        updatable_fields = [
            'mafile_path', 'seconds_to_check_session', 'allowed_to_check_and_accept_new_trades',
            'seconds_to_check_trades', 'accept_every_accepted_on_web_trade', 'accept_every_free_trade'
        ]
        
        for field in updatable_fields:
            if field in file_config:
                update_params[field] = file_config[field]
        
        if update_params:
            account_manager.update_account(account_name, **update_params)
            self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {account_name}")
    
    def get_account_custom_settings(self, account_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        accounts_data = self.config_data.get('accounts', {})
        account_data = accounts_data.get(account_name, {})
        return account_data.get('custom_settings', {})
    
    def update_account_custom_settings(self, account_name: str, settings: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–∞–π–ª–µ"""
        if 'accounts' not in self.config_data:
            self.config_data['accounts'] = {}
        
        if account_name not in self.config_data['accounts']:
            self.config_data['accounts'][account_name] = {'name': account_name}
        
        self.config_data['accounts'][account_name]['custom_settings'] = settings
        self.save_config()
    
    def get_enabled_accounts(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–≤ –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω—ã)"""
        accounts_data = self.config_data.get('accounts', {})
        return list(accounts_data.keys())
    
    def save_config(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            if self.config_file.exists():
                backup_file = self.config_file.with_suffix(f'{self.config_file.suffix}.backup')
                shutil.copy2(self.config_file, backup_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(self.config_file, 'w', encoding='utf-8') as f:
                if self.is_yaml and yaml:
                    yaml.safe_dump(self.config_data, f, default_flow_style=False, 
                                 allow_unicode=True, sort_keys=False)
                else:
                    json.dump(self.config_data, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_file}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    def validate_config(self) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        errors = {}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if 'accounts' not in self.config_data:
            errors.setdefault('config_structure', []).append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è: accounts")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ AccountConfig –º–µ–Ω–µ–¥–∂–µ—Ä
        account_errors = self.account_config_manager.validate_config()
        if account_errors:
            errors.update(account_errors)
        
        return errors
    
    def reset_to_example(self) -> None:
        """–°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –ø—Ä–∏–º–µ—Ä—É"""
        if not self.example_file.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –ø—Ä–∏–º–µ—Ä–∞ {self.example_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        if self.config_file.exists():
            backup_file = self.config_file.with_suffix(f'{self.config_file.suffix}.backup.{int(time.time())}')
            shutil.copy2(self.config_file, backup_file)
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
        shutil.copy2(self.example_file, self.config_file)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._load_config()
        
        self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –ø—Ä–∏–º–µ—Ä—É")
    
    def get_config_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        accounts_data = self.config_data.get('accounts', {})
        
        return {
            'config_file': str(self.config_file),
            'config_format': 'YAML' if self.is_yaml else 'JSON',
            'version': self.config_data.get('version', 'unknown'),
            'total_accounts': len(accounts_data),
            'enabled_accounts': len(accounts_data),  # –í –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω—ã
            'disabled_accounts': 0,
            'accounts_list': {
                'enabled': list(accounts_data.keys()),
                'disabled': []
            }
        }


def setup_credentials_interactive(file_config: FileConfigManager) -> None:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ credentials –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("\nüîë –ù–ê–°–¢–†–û–ô–ö–ê –£–ß–ï–¢–ù–´–• –î–ê–ù–ù–´–•")
    print("="*50)
    
    enabled_accounts = file_config.get_enabled_accounts()
    
    if not enabled_accounts:
        print("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(enabled_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
    for i, account_name in enumerate(enabled_accounts, 1):
        print(f"  {i}. {account_name}")
    
    account_manager = file_config.account_config_manager
    
    for account_name in enabled_accounts:
        print(f"\n--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {account_name} ---")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        password, api_key = account_manager.get_sensitive_data(account_name)
        
        if password and api_key:
            print("‚úì –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            update = input("–û–±–Ω–æ–≤–∏—Ç—å? (y/N): ").lower() == 'y'
            if not update:
                continue
        
        # –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
        print(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {account_name}:")
        new_password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
        new_api_key = input("API –∫–ª—é—á: ").strip()
        
        if new_password and new_api_key:
            try:
                account_manager.store_sensitive_data(account_name, new_password, new_api_key)
                print("‚úì –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã)")
    
    print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def main():
    """CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Steam Account Manager")
    parser.add_argument("--config", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--create", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
    parser.add_argument("--validate", action="store_true", help="–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    parser.add_argument("--summary", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--setup-credentials", action="store_true", help="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    parser.add_argument("--reset", action="store_true", help="–°–±—Ä–æ—Å–∏—Ç—å –∫ –ø—Ä–∏–º–µ—Ä—É")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    file_config = FileConfigManager(args.config)
    
    try:
        if args.create:
            file_config._create_config_from_example()
            
        elif args.validate:
            print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            errors = file_config.validate_config()
            
            if errors:
                print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:")
                for section, section_errors in errors.items():
                    print(f"  {section}:")
                    for error in section_errors:
                        print(f"    - {error}")
            else:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                
        elif args.summary:
            summary = file_config.get_config_summary()
            print("üìä –°–í–û–î–ö–ê –ü–û –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
            print("="*40)
            print(f"–§–∞–π–ª: {summary['config_file']}")
            print(f"–§–æ—Ä–º–∞—Ç: {summary['config_format']}")
            print(f"–í–µ—Ä—Å–∏—è: {summary['version']}")
            print(f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {summary['total_accounts']}")
            
            if summary['accounts_list']['enabled']:
                print("\n–ê–∫–∫–∞—É–Ω—Ç—ã:")
                for account in summary['accounts_list']['enabled']:
                    print(f"  ‚Ä¢ {account}")
                
        elif args.setup_credentials:
            setup_credentials_interactive(file_config)
            
        elif args.reset:
            confirm = input("‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –ø—Ä–∏–º–µ—Ä—É? (y/N): ")
            if confirm.lower() == 'y':
                file_config.reset_to_example()
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            summary = file_config.get_config_summary()
            print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {summary['config_file']} ({summary['config_format']})")
            print(f"üìä –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {summary['total_accounts']}")
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  --summary          - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É")
            print("  --validate         - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print("  --setup-credentials - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –∏ API –∫–ª—é—á–∏")
            print("  --reset            - –°–±—Ä–æ—Å–∏—Ç—å –∫ –ø—Ä–∏–º–µ—Ä—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main()) 

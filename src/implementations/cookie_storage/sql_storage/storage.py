#!/usr/bin/env python3
"""
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è cookies —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PostgreSQL –∏ SQLAlchemy.
"""

import os
import json
from pathlib import Path
from datetime import datetime, timezone
from typing import Dict, Optional

from dotenv import load_dotenv

from sqlalchemy import create_engine, Column, String, Text, DateTime, Integer, text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.pool import QueuePool

from src.interfaces.storage_interface import CookieStorageInterface
from src.utils.logger_setup import logger

env_path = Path(__file__).parent / '.env'
if not env_path.exists():
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, .env —Ñ–∞–π–ª –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù.
    raise FileNotFoundError(
        f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {env_path}. "
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SqlAlchemyCookieStorage –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å .env –≤ –ø–∞–ø–∫–µ implementations —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π DB_CONNECTION_STRING. "
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –∏–∑ —ç—Ç–æ–π –∂–µ –ø–∞–ø–∫–∏ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –≤ .env."
    )
load_dotenv(dotenv_path=env_path)


DB_CONNECTION_STRING = os.getenv("DB_CONNECTION_STRING")

Base = declarative_base()

class SteamAccount(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã, —Ö—Ä–∞–Ω—è—â–µ–π cookies –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam."""
    __tablename__ = 'cookies'
    __table_args__ = {'schema': 'steam_accounts'}
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    username = Column(String(100), unique=True, nullable=False, index=True)
    cookies = Column(Text, nullable=True)  # JSON —Å—Ç—Ä–æ–∫–∞ —Å cookies
    update_time = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc))
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    
    def __repr__(self):
        return f"<SteamAccount(username='{self.username}')>"


class SqlAlchemyCookieStorage(CookieStorageInterface):
    """
    –•—Ä–∞–Ω–∏—Ç cookies –≤ PostgreSQL.
    –¢—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DB_CONNECTION_STRING.
    """

    def __init__(self, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î.
        –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ DB_CONNECTION_STRING –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
        """
        if not DB_CONNECTION_STRING:
            raise ValueError(
                "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'DB_CONNECTION_STRING' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. "
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SqlAlchemyCookieStorage. "
                "–î–æ–±–∞–≤—å—Ç–µ –µ–µ –≤ –≤–∞—à .env —Ñ–∞–π–ª."
            )
            
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SqlAlchemyCookieStorage...")
        self._setup_engine()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –∏ —Ç–∞–±–ª–∏—Ü—ã
        self._create_schema_and_tables()
        
        self.Session = sessionmaker(bind=self.engine)
        logger.info("‚úÖ SqlAlchemyCookieStorage —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def _create_schema_and_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É steam_accounts –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            with self.engine.connect() as connection:
                connection.execute(text("CREATE SCHEMA IF NOT EXISTS steam_accounts"))
                connection.commit()
                logger.info("‚úÖ –°—Ö–µ–º–∞ 'steam_accounts' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            Base.metadata.create_all(self.engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ 'steam_accounts' —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã/—Ç–∞–±–ª–∏—Ü: {e}")
            raise

    def _setup_engine(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy engine —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        self.engine = create_engine(
            DB_CONNECTION_STRING,
            poolclass=QueuePool,
            pool_size=2,          # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
            max_overflow=5,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö" —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            pool_pre_ping=True,   # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            pool_recycle=3600,    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3600 —Å–µ–∫ (1 —á–∞—Å)
            echo=False,           # –ù–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å—ã –≤ –∫–æ–Ω—Å–æ–ª—å
        )

    def save_cookies(self, username: str, cookies: Dict[str, str]) -> bool:
        session = self.Session()
        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            existing_record = session.query(SteamAccount).filter_by(username=username).first()
            
            if existing_record:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                existing_record.cookies = json.dumps(cookies)
                existing_record.update_time = datetime.now(timezone.utc)
                logger.info(f"‚úÖ Cookies –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                new_record = SteamAccount(
                    username=username,
                    cookies=json.dumps(cookies),
                    update_time=datetime.now(timezone.utc)
                )
                session.add(new_record)
                logger.info(f"‚úÖ Cookies –¥–ª—è {username} —Å–æ–∑–¥–∞–Ω—ã –≤ –ë–î")
            
            session.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies –≤ –ë–î –¥–ª—è {username}: {e}")
            session.rollback()
            return False
        finally:
            session.close()

    def load_cookies(self, username: str) -> Optional[Dict[str, str]]:
        session = self.Session()
        try:
            record = session.query(SteamAccount).filter_by(username=username).first()
            if record and record.cookies:
                return json.loads(record.cookies)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies –∏–∑ –ë–î –¥–ª—è {username}: {e}")
            return None
        finally:
            session.close()

    def delete_cookies(self, username: str) -> bool:
        session = self.Session()
        try:
            record = session.query(SteamAccount).filter_by(username=username).first()
            if record:
                session.delete(record)
                session.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è cookies –∏–∑ –ë–î –¥–ª—è {username}: {e}")
            session.rollback()
            return False
        finally:
            session.close()

    def get_last_update(self, username: str) -> Optional[datetime]:
        session = self.Session()
        try:
            record = session.query(SteamAccount).filter_by(username=username).first()
            if record and record.update_time:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è —Å timezone –∫–∞–∫ –µ—Å—Ç—å
                return record.update_time
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î –¥–ª—è {username}: {e}")
            return None
        finally:
            session.close() 


if __name__ == '__main__':
    """–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –∏ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    import os
    from pathlib import Path
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    env_path = Path(__file__).parent / '.env'
    if env_path.exists():
        load_dotenv(dotenv_path=env_path)
        db_connection = os.getenv("DB_CONNECTION_STRING")
        
        if db_connection:
            print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –∏ —Ç–∞–±–ª–∏—Ü –¥–ª—è cookie storage...")
            try:
                # –°–æ–∑–¥–∞–µ–º engine
                engine = create_engine(db_connection)
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É
                with engine.connect() as connection:
                    connection.execute(text("CREATE SCHEMA IF NOT EXISTS steam_accounts"))
                    connection.commit()
                    print("‚úÖ –°—Ö–µ–º–∞ 'steam_accounts' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                Base.metadata.create_all(engine)
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ 'steam_accounts' —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cookie storage –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            print("‚ùå DB_CONNECTION_STRING –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    else:
        print(f"‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {env_path}")
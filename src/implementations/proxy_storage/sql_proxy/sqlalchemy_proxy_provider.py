#!/usr/bin/env python3
"""
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ProxyProvider —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PostgreSQL –∏ SQLAlchemy.
"""

import os
from pathlib import Path
from datetime import datetime, timezone
from typing import Dict, Optional

from dotenv import load_dotenv

from sqlalchemy import create_engine, Column, String, DateTime, Integer, Text, text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.pool import QueuePool

from src.interfaces.proxy_provider import ProxyProviderInterface
from src.utils.logger_setup import logger


env_path = Path(__file__).parent / '.env'
if not env_path.exists():
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, .env —Ñ–∞–π–ª –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù.
    raise FileNotFoundError(
        f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {env_path}. "
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SqlAlchemyProxyProvider –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å .env –≤ –ø–∞–ø–∫–µ implementations —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π DB_CONNECTION_STRING. "
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –∏–∑ —ç—Ç–æ–π –∂–µ –ø–∞–ø–∫–∏ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –≤ .env."
    )
load_dotenv(dotenv_path=env_path)

DB_CONNECTION_STRING = os.getenv("DB_CONNECTION_STRING")


Base = declarative_base()

class AccountProxy(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã, —Ö—Ä–∞–Ω—è—â–µ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam."""
    __tablename__ = 'account_proxies'
    __table_args__ = {'schema': 'steam_accounts'}

    id = Column(Integer, primary_key=True, autoincrement=True)
    username = Column(String(100), unique=True, nullable=False, index=True)
    proxy = Column(Text, nullable=True)  # –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–∫—Å–∏, JSON –∏–ª–∏ —Å–ø–µ—Ü. –∑–Ω–∞—á–µ–Ω–∏–µ "no_proxy"
    update_time = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc))
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))

    def __repr__(self):
        return f"<AccountProxy(username='{self.username}', proxy='{self.proxy}')>"



class SqlAlchemyProxyProvider(ProxyProviderInterface):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ PostgreSQL.
    –¢—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DB_CONNECTION_STRING.
    """

    def __init__(self, **kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î.
        –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ DB_CONNECTION_STRING –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
        """
        if not DB_CONNECTION_STRING:
            raise ValueError(
                "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'DB_CONNECTION_STRING' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. "
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SqlAlchemyProxyProvider. "
                "–î–æ–±–∞–≤—å—Ç–µ –µ–µ –≤ –≤–∞—à .env —Ñ–∞–π–ª."
            )
            
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SqlAlchemyProxyProvider...")
        self._setup_engine()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –∏ —Ç–∞–±–ª–∏—Ü—ã
        self._create_schema_and_tables()
        
        self.Session = sessionmaker(bind=self.engine)
        logger.info("‚úÖ SqlAlchemyProxyProvider —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def _create_schema_and_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É steam_accounts –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            with self.engine.connect() as connection:
                connection.execute(text("CREATE SCHEMA IF NOT EXISTS steam_accounts"))
                connection.commit()
                logger.info("‚úÖ –°—Ö–µ–º–∞ 'steam_accounts' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            Base.metadata.create_all(self.engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ 'steam_accounts' —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã/—Ç–∞–±–ª–∏—Ü: {e}")
            raise

    def _setup_engine(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy engine —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        self.engine = create_engine(
            DB_CONNECTION_STRING,
            poolclass=QueuePool,
            pool_size=2,
            max_overflow=5,
            pool_pre_ping=True,
            pool_recycle=3600,
            echo=False,
        )

    def get_proxy(self, account_name: str) -> Optional[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'no_proxy'.
        """
        session = self.Session()
        try:
            record = session.query(AccountProxy).filter_by(username=account_name).first()
            
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            if not record or not record.proxy:
                logger.debug(f"–ü—Ä–æ–∫—Å–∏ –¥–ª—è '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
                return None

            proxy_data = record.proxy.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "no_proxy"
            if proxy_data.lower() == 'no_proxy':
                logger.info(f"–î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ '{account_name}' —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ 'no_proxy'. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä—è–º—ã–º.")
                return None

            # --- –ê–≤—Ç–æ-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ host:port:username:password –≤ username:password@host:port ---
            if ':' in proxy_data and proxy_data.count(':') >= 3:
                # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç "http://host:port:username:password"
                if proxy_data.startswith('http://'):
                    proxy_data_ = proxy_data[7:]
                    prefix = 'http://'
                elif proxy_data.startswith('https://'):
                    proxy_data_ = proxy_data[8:]
                    prefix = 'https://'
                else:
                    proxy_data_ = proxy_data
                    prefix = 'http://'
                parts = proxy_data_.split(':')
                if len(parts) >= 4:
                    host = parts[0]
                    port = parts[1]
                    username = parts[2]
                    password = parts[3]
                    formatted_proxy = f"{prefix}{username}:{password}@{host}:{port}"
                    return {
                        'http': formatted_proxy,
                        'https': formatted_proxy
                    }

            # –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return {
                'http': proxy_data,
                'https': proxy_data 
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ –ë–î –¥–ª—è {account_name}: {e}")
            return None
        finally:
            session.close() 


if __name__ == '__main__':
    """–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –∏ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    import os
    from pathlib import Path
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    env_path = Path(__file__).parent / '.env'
    if env_path.exists():
        load_dotenv(dotenv_path=env_path)
        db_connection = os.getenv("DB_CONNECTION_STRING")
        
        if db_connection:
            print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –∏ —Ç–∞–±–ª–∏—Ü –¥–ª—è proxy provider...")
            try:
                # –°–æ–∑–¥–∞–µ–º engine
                engine = create_engine(db_connection)
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É
                with engine.connect() as connection:
                    connection.execute(text("CREATE SCHEMA IF NOT EXISTS steam_accounts"))
                    connection.commit()
                    print("‚úÖ –°—Ö–µ–º–∞ 'steam_accounts' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                Base.metadata.create_all(engine)
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ 'steam_accounts' —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è proxy provider –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            print("‚ùå DB_CONNECTION_STRING –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    else:
        print(f"‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {env_path}")
#!/usr/bin/env python3
"""
Cookie Manager - –ú–æ–¥—É–ª—å-—Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Steam cookies
"""

import os
import time
import traceback
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Optional, Any
from threading import Lock

from src.utils.logger_setup import logger
from src.steampy.client import SteamClient
from src.interfaces.storage_interface import CookieStorageInterface, FileCookieStorage


class CookieManager:
    """–°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Steam cookies"""
    
    _instance: Optional['CookieManager'] = None
    _lock = Lock()
    
    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self, 
                 username: str = None,
                 password: str = None,
                 mafile_path: str = None,
                 steam_id: str = None,
                 storage: CookieStorageInterface = None,
                 accounts_dir: str = "accounts_info",
                 proxy_manager=None):
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if hasattr(self, '_initialized'):
            return
        
        self.username = username
        self.password = password
        self.mafile_path = mafile_path
        self.steam_id = steam_id
        self.proxy_manager = proxy_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self.storage = storage or FileCookieStorage(accounts_dir)
        
        # –ü–∞–ø–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–π steampy
        self.accounts_dir = Path(accounts_dir)
        self.accounts_dir.mkdir(exist_ok=True)
        self.session_file = self.accounts_dir / f"{username}.pkl"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.steam_client: Optional[SteamClient] = None
        self.last_update: Optional[datetime] = None
        self.cookies_cache: Optional[Dict[str, str]] = None
        
        self._initialized = True
        
        logger.info(f"üç™ Cookie Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username}")
        logger.info(f"üìÅ –°–µ—Å—Å–∏–∏: {self.session_file}")
        logger.info(f"üìÑ MaFile: {mafile_path}")
    
    def session_to_dict(self, session) -> Dict[str, str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä—å cookies"""
        try:
            if hasattr(session, 'cookies'):
                if hasattr(session.cookies, 'get_dict'):
                    # requests.cookies.RequestsCookieJar
                    return session.cookies.get_dict()
                else:
                    # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã cookie jar
                    cookies = {}
                    for cookie in session.cookies:
                        cookies[cookie.name] = cookie.value
                    return cookies
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä—å: {e}")
            return {}
    
    def dict_to_session_cookies(self, cookies_dict: Dict[str, str], session) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ cookies –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ —Å–µ—Å—Å–∏—é"""
        try:
            session.cookies.clear()
            session.cookies.update(cookies_dict)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cookies_dict)} cookies –≤ —Å–µ—Å—Å–∏—é")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies –≤ —Å–µ—Å—Å–∏—é: {e}")
            return False
    
    def _get_proxy_for_client(self) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è Steam –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.proxy_manager:
            return None
        
        try:
            current_proxy = self.proxy_manager.get_current_proxy()
            if not current_proxy:
                logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
                return None
            
            proxy_dict = self.proxy_manager.proxy_to_dict(current_proxy)
            logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {self.proxy_manager.proxy_to_key(current_proxy)}")
            return proxy_dict
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            return None
    
    def _handle_proxy_ban(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø—Ä–æ–∫—Å–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π"""
        if not self.proxy_manager:
            return False
        
        try:
            current_proxy = self.proxy_manager.get_current_proxy()
            if current_proxy:
                logger.warning(f"üö´ –ë–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏: {self.proxy_manager.proxy_to_key(current_proxy)}")
                self.proxy_manager.ban_proxy(current_proxy, ban_duration_minutes=30)
            
            next_proxy = self.proxy_manager.rotate_to_next_proxy()
            if next_proxy:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–∫—Å–∏: {self.proxy_manager.proxy_to_key(next_proxy)}")
                return True
            else:
                logger.error("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return False
    
    def _create_steam_client(self) -> Optional[SteamClient]:
        """–°–æ–∑–¥–∞–Ω–∏–µ Steam –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏"""
        try:
            proxies = self._get_proxy_for_client() if self.proxy_manager else None
            
            steam_client = SteamClient(
                session_path=str(self.session_file),
                username=self.username,
                password=self.password,
                steam_id=self.steam_id,
                steam_guard=self.mafile_path,
                proxies=proxies
            )
            
            logger.info("‚úÖ Steam –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
            return steam_client
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Steam –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return None
    
    def _is_session_alive(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        if not self.steam_client:
            return False
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
            is_alive = self.steam_client.check_session_static(
                self.username, 
                self.steam_client._session
            )
            
            if is_alive:
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
            else:
                logger.info("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            
            return is_alive
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    def _login_and_save_session(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                logger.info(f"üîë –°–æ–∑–¥–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})...")
                self.steam_client = self._create_steam_client()
                
                if not self.steam_client:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Steam –∫–ª–∏–µ–Ω—Ç–∞")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
                if self._is_session_alive():
                    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é")
                    self.steam_client.was_login_executed = True
                    return True
                
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –≤—Ö–æ–¥
                logger.info("üîÑ –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –≤—Ö–æ–¥...")
                self.steam_client._session.cookies.clear()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
                self.steam_client.login_if_need_to()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
                logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é...")
                self.steam_client.save_session(str(self.accounts_dir), username=self.username)
                
                self.steam_client.was_login_executed = True
                
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –ø—Ä–æ–∫—Å–∏
                error_str = str(e).lower()
                if any(keyword in error_str for keyword in ['429', 'too many requests', 'proxy', 'connection']):
                    if self.proxy_manager and attempt < max_retries - 1:
                        logger.info("üîÑ –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–∫—Å–∏, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è...")
                        if self._handle_proxy_ban():
                            continue
                
                if attempt == max_retries - 1:
                    logger.debug(traceback.format_exc())
        
        logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã ({max_retries})")
        return False
    
    def is_cookies_valid(self, max_age_minutes: int = 120) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ cookies"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        last_update = self.storage.get_last_update(self.username)
        if not last_update:
            logger.info("üîÑ Cookies –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å")
            return False
        
        time_passed = datetime.now() - last_update
        max_age = timedelta(minutes=max_age_minutes)
        
        if time_passed > max_age:
            logger.info(f"‚è∞ Cookies —É—Å—Ç–∞—Ä–µ–ª–∏ (–ø—Ä–æ—à–ª–æ {int(time_passed.total_seconds() // 60)} –º–∏–Ω—É—Ç)")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies –≤ –∫—ç—à–µ –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if not self.cookies_cache:
            self.cookies_cache = self.storage.load_cookies(self.username)
        
        if not self.cookies_cache:
            logger.info("üîÑ Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ cookies
        required_cookies = ['sessionid', 'steamLoginSecure']
        for cookie_name in required_cookies:
            if cookie_name not in self.cookies_cache:
                logger.info(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π cookie: {cookie_name}")
                return False
        
        logger.info(f"‚úÖ Cookies –∞–∫—Ç—É–∞–ª—å–Ω—ã (–≤–æ–∑—Ä–∞—Å—Ç: {int(time_passed.total_seconds() // 60)} –º–∏–Ω—É—Ç)")
        return True
    
    def update_cookies(self, force: bool = False) -> Optional[Dict[str, str]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies
        
        Args:
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
            
        Returns:
            Dict[str, str] –∏–ª–∏ None: –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ cookies
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å cookies
            if not force and self.is_cookies_valid():
                logger.info("‚úÖ Cookies –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return self.cookies_cache or self.storage.load_cookies(self.username)
            
            logger.info(f"üîÑ [{datetime.now().strftime('%H:%M:%S')}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –¥–ª—è {self.username}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            if not self._login_and_save_session():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Steam")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º cookies –∏–∑ —Å–µ—Å—Å–∏–∏
            cookies = self.session_to_dict(self.steam_client._session)
            if not cookies:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cookies –∏–∑ —Å–µ—Å—Å–∏–∏")
                return None
            
            logger.info(f"üç™ –ü–æ–ª—É—á–µ–Ω–æ {len(cookies)} cookies")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ cookies
            important = ['sessionid', 'steamLoginSecure']
            for cookie_name in important:
                if cookie_name in cookies:
                    value = cookies[cookie_name][:20] + "..." if len(cookies[cookie_name]) > 20 else cookies[cookie_name]
                    logger.info(f"   {cookie_name}: {value}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if self.storage.save_cookies(self.username, cookies):
                logger.info("‚úÖ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                self.cookies_cache = cookies
                self.last_update = datetime.now()
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å cookies –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            
            return cookies
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies: {e}")
            logger.debug(traceback.format_exc())
            return None
    
    def get_cookies(self, auto_update: bool = True) -> Optional[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö cookies
        
        Args:
            auto_update: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å cookies –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
        Returns:
            Dict[str, str] –∏–ª–∏ None: –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ cookies
        """
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à –∏ –æ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if self.cookies_cache and self.is_cookies_valid():
            return self.cookies_cache
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if not self.cookies_cache:
            self.cookies_cache = self.storage.load_cookies(self.username)
        
        # –ï—Å–ª–∏ cookies –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if self.cookies_cache and self.is_cookies_valid():
            return self.cookies_cache
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º
        if auto_update:
            return self.update_cookies()
        
        logger.warning("‚ö†Ô∏è Cookies –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã, –Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        return self.cookies_cache
    
    def get_steam_client(self) -> Optional[SteamClient]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Steam –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π –∏–∑ pkl"""
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if self.steam_client and hasattr(self.steam_client, 'was_login_executed') and self.steam_client.was_login_executed:
            return self.steam_client
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å cookies
        cookies = self.get_cookies()
        if not cookies:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ cookies –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
            return None
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç steam_client –∏–ª–∏ –æ–Ω –Ω–µ –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
        if not self.steam_client:
            logger.info("üîÑ –°–æ–∑–¥–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ cookies...")
            self.steam_client = self._create_steam_client()
            if not self.steam_client:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Steam –∫–ª–∏–µ–Ω—Ç–∞")
                return None
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if not hasattr(self.steam_client, 'was_login_executed') or not self.steam_client.was_login_executed:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                if self._is_session_alive():
                    logger.info("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
                    self.steam_client.was_login_executed = True
                else:
                    logger.info("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...")
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
                    if not self._login_and_save_session():
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥")
                        return None
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
                # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                try:
                    if not self._login_and_save_session():
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                        return None
                except Exception as login_error:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {login_error}")
                    return None
        
        return self.steam_client
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ cookies"""
        self.cookies_cache = None
        self.last_update = None
        logger.info("üßπ –ö—ç—à cookies –æ—á–∏—â–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ)
_cookie_manager_instance: Optional[CookieManager] = None


def get_cookie_manager(**kwargs) -> CookieManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Cookie Manager"""
    global _cookie_manager_instance
    
    if _cookie_manager_instance is None:
        _cookie_manager_instance = CookieManager(**kwargs)
    
    return _cookie_manager_instance


def initialize_cookie_manager(username: str, password: str, mafile_path: str, 
                            steam_id: str = None, storage: CookieStorageInterface = None,
                            accounts_dir: str = "accounts_info", proxy_manager=None) -> CookieManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Cookie Manager"""
    global _cookie_manager_instance
    
    _cookie_manager_instance = CookieManager(
        username=username,
        password=password, 
        mafile_path=mafile_path,
        steam_id=steam_id,
        storage=storage,
        accounts_dir=accounts_dir,
        proxy_manager=proxy_manager
    )
    
    return _cookie_manager_instance 
#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import os
import json
import re
import shutil
import platform
import subprocess
import time
from pathlib import Path
from typing import Optional, Dict, Any

from .constants import Messages
from .display_formatter import DisplayFormatter
from src.utils.logger_setup import print_and_log


class SettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self, accounts_dir: str = "accounts_info"):
        self.accounts_dir = Path(accounts_dir)
        self.formatter = DisplayFormatter()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.accounts_dir.mkdir(exist_ok=True)
    
    def add_mafile(self) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ mafile —á–µ—Ä–µ–∑ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            print_and_log(self.formatter.format_section_header("üìÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ mafile"))
            print_and_log("‚ÑπÔ∏è  –í—ã–±–µ—Ä–∏—Ç–µ mafile –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É")
            print_and_log("‚ÑπÔ∏è  –§–∞–π–ª –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞–ø–∫—É accounts_info")
            print_and_log("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò–º—è maFile –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–º—É –Ω–∏–∫–Ω–µ–π–º—É Steam –∞–∫–∫–∞—É–Ω—Ç–∞!")
            print_and_log("")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            current_os = platform.system().lower()
            
            if current_os == "windows":
                # –î–ª—è Windows –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                file_path = self._open_file_dialog_windows()
                if not file_path:
                    print_and_log("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", "ERROR")
                    return False
            else:
                # –î–ª—è Linux/Mac - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—É—Ç–∏
                hint_message = Messages.MAFILE_PATH_HINT_LINUX if current_os in ["linux", "darwin"] else Messages.MAFILE_PATH_HINT
                print_and_log(hint_message)
                file_path = input(Messages.ENTER_MAFILE_PATH).strip()
                
                if not file_path:
                    print_and_log(self.formatter.format_error("–ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω"), "ERROR")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            source_path = Path(file_path)
            if not source_path.exists():
                print_and_log(self.formatter.format_error(Messages.MAFILE_NOT_FOUND), "ERROR")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ mafile
            if not self._validate_mafile(source_path):
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ mafile –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
            mafile_data = self._read_mafile(source_path)
            if not mafile_data:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ maFile —Ä–µ–∞–ª—å–Ω–æ–º—É –Ω–∏–∫–Ω–µ–π–º—É Steam
            if not self._verify_mafile_account_name(mafile_data):
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            account_name = mafile_data.get('account_name', 'unknown')
            destination_name = f"{account_name}.maFile"
            destination_path = self.accounts_dir / destination_name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
            if destination_path.exists():
                print_and_log(f"‚ö†Ô∏è  –§–∞–π–ª {destination_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {self.accounts_dir}", "WARNING")
                overwrite = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª? (y/n): ").strip().lower()
                if overwrite not in ['y', 'yes', '–¥', '–¥–∞']:
                    print_and_log("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", "ERROR")
                    return False
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(source_path, destination_path)
            
            print_and_log(self.formatter.format_success(
                Messages.MAFILE_COPIED.format(destination=destination_path)
            ))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            self._show_mafile_info(mafile_data)
            
            return True
            
        except Exception as e:
            print_and_log(self.formatter.format_error(Messages.MAFILE_COPY_ERROR.format(error=e)), "ERROR")
            return False
    
    def _validate_mafile(self, file_path: Path) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è mafile"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            if not file_path.name.lower().endswith('.mafile'):
                print_and_log(self.formatter.format_error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .maFile"), "ERROR")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ JSON —Ñ–∞–π–ª —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            required_fields = ['shared_secret', 'identity_secret', 'account_name']
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                print_and_log(self.formatter.format_error(
                    Messages.MAFILE_INVALID.format(
                        error=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
                    )
                ), "ERROR")
                return False
            
            return True
            
        except json.JSONDecodeError as e:
            print_and_log(self.formatter.format_error(
                Messages.MAFILE_INVALID.format(error=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}")
            ), "ERROR")
            return False
        except Exception as e:
            print_and_log(self.formatter.format_error(
                Messages.MAFILE_INVALID.format(error=str(e))
            ), "ERROR")
            return False
    
    def _read_mafile(self, file_path: Path) -> Optional[Dict[str, Any]]:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ mafile"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print_and_log(self.formatter.format_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è mafile: {e}"), "ERROR")
            return None
    
    def _show_mafile_info(self, mafile_data: Dict[str, Any]):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ mafile"""
        print_and_log("")
        print_and_log("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º mafile:")
        print_and_log(f"  üë§ –ê–∫–∫–∞—É–Ω—Ç: {mafile_data.get('account_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print_and_log(f"  üÜî Steam ID: {mafile_data.get('Session', {}).get('SteamID', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print_and_log(f"  üîë Shared Secret: {'‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if mafile_data.get('shared_secret') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        print_and_log(f"  üîê Identity Secret: {'‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if mafile_data.get('identity_secret') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        print_and_log("")
        print_and_log("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    def _open_file_dialog_windows(self) -> Optional[str]:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ Windows"""
        try:
            print_and_log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥...")
            print_and_log("‚ÑπÔ∏è  –í—ã–±–µ—Ä–∏—Ç–µ .maFile –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            powershell_script = '''
Add-Type -AssemblyName System.Windows.Forms
$openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
$openFileDialog.Filter = "Steam Mobile Authenticator Files (*.maFile)|*.maFile|All files (*.*)|*.*"
$openFileDialog.Title = "–í—ã–±–µ—Ä–∏—Ç–µ maFile –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
$openFileDialog.InitialDirectory = [Environment]::GetFolderPath("Desktop")
$result = $openFileDialog.ShowDialog()
if ($result -eq "OK") {
    Write-Output $openFileDialog.FileName
}
'''
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run(
                ["powershell", "-Command", powershell_script],
                capture_output=True,
                text=True,
                timeout=60  # –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
            )
            
            if result.returncode == 0 and result.stdout.strip():
                selected_file = result.stdout.strip()
                print_and_log(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file}")
                return selected_file
            else:
                print_and_log("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", "ERROR")
                return None
                
        except subprocess.TimeoutExpired:
            print_and_log("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (60 —Å–µ–∫)", "ERROR")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {e}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä—É—á–Ω—É—é")
            
            # Fallback - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
            print(Messages.MAFILE_PATH_HINT)
            file_path = input(Messages.ENTER_MAFILE_PATH).strip()
            return file_path if file_path else None
    
    def list_mafiles(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö mafile –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            mafiles = list(self.accounts_dir.glob("*.maFile"))
            return [f.name for f in mafiles]
        except Exception:
            return []

    def get_api_key(self, cli_context) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞"""
        try:
            print(self.formatter.format_section_header("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞"))
            print("‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ...")
            print("‚ÑπÔ∏è  –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Guard")
            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ API –∫–ª—é—á
            existing_key = self._check_existing_api_key(cli_context)
            if existing_key:
                print(self.formatter.format_success(
                    Messages.API_KEY_FOUND.format(key=f"{existing_key[:10]}..." if len(existing_key) > 10 else existing_key)
                ))
                print()
                print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API –∫–ª—é—á–µ:")
                print(f"  üîë –ö–ª—é—á: {existing_key}")
                print(f"  üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Steam Web API")
                print(f"  üì± –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω")
                print()
                input(Messages.PRESS_ENTER)
                return True

            # API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            print(Messages.API_KEY_NOT_FOUND)
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞...")
            print()

            # –°–æ–∑–¥–∞–µ–º API –∫–ª—é—á
            new_key = self._create_new_api_key(cli_context)
            if new_key:
                print(self.formatter.format_success(
                    Messages.API_KEY_CREATED.format(key=f"{new_key[:10]}..." if len(new_key) > 10 else new_key)
                ))
                print()
                print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º API –∫–ª—é—á–µ:")
                print(f"  üîë –ö–ª—é—á: {new_key}")
                print(f"  üåê –î–æ–º–µ–Ω: test")
                print(f"  üì± –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω")
                print(f"  ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Guard: –î–∞")
                print()
                input(Messages.PRESS_ENTER)
                return True
            else:
                print(self.formatter.format_error(Messages.API_KEY_CREATION_FAILED))
                input(Messages.PRESS_ENTER)
                return False

        except Exception as e:
            print(self.formatter.format_error(Messages.API_KEY_ERROR.format(error=e)))
            input(Messages.PRESS_ENTER)
            return False

    def _check_existing_api_key(self, cli_context) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ API –∫–ª—é—á–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
            if not cli_context.cookie_checker.ensure_valid_cookies():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ cookies")
                return None

            # –ü–æ–ª—É—á–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ trade_manager
            steam_client = cli_context.trade_manager._get_steam_client()
            if not steam_client:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Steam –∫–ª–∏–µ–Ω—Ç–∞")
                return None

            return self._get_api_key_from_web(steam_client)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ API –∫–ª—é—á–∞: {e}")
            return None

    def _get_api_key_from_web(self, steam_client) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            req = steam_client._session.get('https://steamcommunity.com/dev/apikey')
            
            if req.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ API –∫–ª—é—á–∞: {req.status_code}")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            if 'Sign In' in req.text and 'login' in req.url.lower():
                print("‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cookies.")
                return None

            # –ò—â–µ–º API –∫–ª—é—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            print("üîç –ò—â–µ–º API –∫–ª—é—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
            
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ API –∫–ª—é—á–∞
            patterns = [
                r'<p>Key:\s*([A-F0-9]{32})</p>',  # –ö–ª—é—á –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ "Key: ..." - –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô
            ]
            
            for i, pattern in enumerate(patterns, 1):
                matches = re.findall(pattern, req.text, re.IGNORECASE)
                
                if matches:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ API –∫–ª—é—á–∏ (32 —Å–∏–º–≤–æ–ª–∞, hex)
                    valid_keys = [key for key in matches if len(key) == 32 and re.match(r'^[A-F0-9]+$', key, re.IGNORECASE)]
                    
                    if valid_keys:
                        apikey = valid_keys[0]
                        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {apikey[:10]}...")
                        return apikey
                    else:
                        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –Ω–æ –æ–Ω–∏ –Ω–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ API –∫–ª—é—á–∏")
                else:
                    print("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
            if 'You must have a validated email address' in req.text:
                print(Messages.API_KEY_REQUIRES_EMAIL)
                return None
            elif 'Register for a Steam Web API Key' in req.text:
                # –ö–ª—é—á –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
                print("‚ÑπÔ∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ")
                return None
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞")
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª debug_apikey_page.html –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –≤–µ–±: {e}")
            return None

    def _create_new_api_key(self, cli_context) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Guard"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç–∞
            steam_client = cli_context.trade_manager._get_steam_client()
            if not steam_client:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Steam –∫–ª–∏–µ–Ω—Ç–∞")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ register_new_api_key
            if hasattr(steam_client, 'register_new_api_key'):
                try:
                    print(Messages.API_KEY_CREATION_PENDING)
                    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞...")
                    
                    # –°–æ–∑–¥–∞–µ–º API –∫–ª—é—á —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Guard
                    api_key = steam_client.register_new_api_key(domain='test')
                    
                    if api_key:
                        print(Messages.API_KEY_CONFIRMED)
                        return api_key
                    else:
                        print(Messages.API_KEY_CREATION_FAILED)
                        return None

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª—é—á–∞: {e}")
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                    return self._create_api_key_manual(steam_client)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                return self._create_api_key_manual(steam_client)

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞: {e}")
            return None

    def _create_api_key_manual(self, steam_client) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π POST –∑–∞–ø—Ä–æ—Å"""
        try:
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è sessionid
            response = steam_client._session.get('https://steamcommunity.com/dev/apikey')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º sessionid –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã
            sessionid_pattern = r'g_sessionID = "([^"]+)"'
            sessionid_match = re.search(sessionid_pattern, response.text)
            
            if not sessionid_match:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ sessionid –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞")
                return None

            sessionid = sessionid_match.group(1)
            print(f"üîë –ù–∞–π–¥–µ–Ω sessionid: {sessionid[:10]}...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            create_data = {
                'domain': 'test',
                'agreeToTerms': 'agreed',
                'sessionid': sessionid,
                'Submit': 'Register'
            }

            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞...")
            create_response = steam_client._session.post(
                'https://steamcommunity.com/dev/registerkey',
                data=create_data
            )

            print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {create_response.status_code}")
            
            if create_response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É HTML
                response_text = create_response.text.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
                success_indicators = [
                    'successful',
                    'success', 
                    'api key has been registered',
                    'your steam web api key',
                    'key has been created'
                ]
                
                error_indicators = [
                    'error',
                    'failed',
                    'invalid',
                    'already registered',
                    'email validation required'
                ]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å–ø–µ—Ö
                if any(indicator in response_text for indicator in success_indicators):
                    print("‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ Guard –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                    print(Messages.API_KEY_CONFIRMATION_NEEDED)
                    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Guard...")
                    
                    time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
                    # –°–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á
                    return self._get_api_key_from_web(steam_client)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                elif any(indicator in response_text for indicator in error_indicators):
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞")
                    if 'email validation required' in response_text:
                        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞")
                    elif 'already registered' in response_text:
                        print("‚ÑπÔ∏è API –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        return self._get_api_key_from_web(steam_client)
                    else:
                        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª—é—á–∞")
                    return None
                else:
                    # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á
                    print("‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞...")
                    return self._get_api_key_from_web(steam_client)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞: HTTP {create_response.status_code}")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞: {e}")
            return None

    def _verify_mafile_account_name(self, mafile_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω–∏ maFile —Ä–µ–∞–ª—å–Ω–æ–º—É –Ω–∏–∫–Ω–µ–π–º—É Steam –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account_name = mafile_data.get('account_name', 'unknown')
            
            print()
            print("‚ö†Ô∏è  –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –°–û–û–¢–í–ï–¢–°–¢–í–ò–ò –ò–ú–ï–ù–ò MAFILE")
            print("=" * 60)
            print(f"üìã –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ maFile: {account_name}")
            print()
            print("üîç –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —ç—Ç–æ –∏–º—è —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–∞–ª—å–Ω–æ–º—É")
            print()
            print("üí° –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–∞–º –≤—Ö–æ–¥–∞")
            print("   - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            print("   - –ú–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏")
            print()
            print("üîß –ï—Å–ª–∏ –∏–º—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ:")
            print("   - –û—Ç–º–µ–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ (–≤–≤–µ–¥–∏—Ç–µ 'n')")
            print("   - –ò—Å–ø—Ä–∞–≤—å—Ç–µ account_name –≤ maFile –≤—Ä—É—á–Ω—É—é")
            print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–Ω–æ–≤–∞")
            print()
            
            while True:
                confirm = input(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —á—Ç–æ '{account_name}' - —ç—Ç–æ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Steam –ª–æ–≥–∏–Ω? (y/n): ").strip().lower()
                
                if confirm in ['y', 'yes', '–¥', '–¥–∞']:
                    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –î–æ–±–∞–≤–ª—è–µ–º maFile –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ '{account_name}'")
                    return True
                elif confirm in ['n', 'no', '–Ω', '–Ω–µ—Ç']:
                    print("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ maFile –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–µ 'account_name' –≤ maFile –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                    return False
                else:
                    print("‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
                    
        except Exception as e:
            print(self.formatter.format_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–º–µ–Ω–∏ maFile: {e}"))
            return False 
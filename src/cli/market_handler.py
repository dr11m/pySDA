#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ market –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import re
from typing import List, Optional

from bs4 import BeautifulSoup

from src.utils.logger_setup import logger, print_and_log
from .constants import Messages
from .display_formatter import DisplayFormatter
from src.trade_confirmation_manager import TradeConfirmationManager

class MarketHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è market –æ—Ä–¥–µ—Ä–æ–≤"""
    
    def __init__(self, trade_manager: TradeConfirmationManager, formatter: DisplayFormatter, cookie_checker):
        self.trade_manager = trade_manager
        self.formatter = formatter
        self.cookie_checker = cookie_checker
    
    def confirm_all_market_orders(self) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ market –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ Guard"""
        try:
            logger.info("üè™ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–æ–≤")
            logger.info("‚ÑπÔ∏è  –ü–æ–∏—Å–∫ market –æ—Ä–¥–µ—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Guard")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
            if not self.cookie_checker.ensure_valid_cookies():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ cookies")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç–∞
            steam_client = self.trade_manager._get_steam_client()
            if not steam_client:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Steam –∫–ª–∏–µ–Ω—Ç–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmations = self._get_market_confirmations(steam_client)
            
            if not confirmations:
                print_and_log(Messages.NO_MARKET_CONFIRMATIONS)
                return True
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(confirmations)} market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä
            confirmed_count = 0
            for i, confirmation in enumerate(confirmations, 1):
                try:
                    print_and_log(f"üîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {i}/{len(confirmations)}...")
                    
                    if self._confirm_market_order(steam_client, confirmation):
                        confirmed_count += 1
                        print_and_log("‚úÖ –û—Ä–¥–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                    else:
                        print_and_log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞", "ERROR")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    continue
            
            if confirmed_count > 0:
                print_and_log(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {confirmed_count} market –æ—Ä–¥–µ—Ä–æ–≤", "SUCCESS")
                if confirmed_count < len(confirmations):
                    failed_count = len(confirmations) - confirmed_count
                    print_and_log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {failed_count} –æ—Ä–¥–µ—Ä–æ–≤", "WARNING")
            else:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ market –æ—Ä–¥–µ—Ä–∞", "ERROR")
            
            return confirmed_count > 0
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è market –æ—Ä–¥–µ—Ä–æ–≤: {e}", "ERROR")
            return False
    
    def _get_market_confirmations(self, steam_client) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            return self._get_confirmations_via_guard(steam_client)      
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {e}")
            return []
    
    def _get_confirmations_via_guard(self, steam_client) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Guard"""
        try:
            from src.steampy.confirmation import ConfirmationExecutor
            from src.utils.confirmation_utils import determine_confirmation_type_from_json, extract_confirmation_info
            
            # –°–æ–∑–¥–∞–µ–º executor –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–ª—É—á–∞–µ–º JSON —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            confirmations_page = confirmation_executor._fetch_confirmations_page()
            confirmations_json = confirmations_page.json()
            
            if not confirmations_json.get('success'):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return []
            
            all_confirmations = confirmations_json.get('conf', [])
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(all_confirmations)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, —Ñ–∏–ª—å—Ç—Ä—É–µ–º market...")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ JSON –¥–∞–Ω–Ω—ã–º
            market_confirmations = []
            for conf_data in all_confirmations:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    confirmation_type = determine_confirmation_type_from_json(conf_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                    if confirmation_type in ['market_listing', 'market_purchase']:
                        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                        confirmation_info = extract_confirmation_info(conf_data, confirmation_type)
                        description = confirmation_info.get('description', f'Market {confirmation_type}')
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        print_and_log(f"üè™ {description}")
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Confirmation –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        from src.steampy.confirmation import Confirmation
                        conf = Confirmation(
                            data_confid=conf_data['id'],
                            nonce=conf_data['nonce'],
                            creator_id=int(conf_data['creator_id'])
                        )
                        
                        market_confirmations.append({
                            'id': conf_data['id'],
                            'key': conf_data['nonce'],
                            'creator_id': int(conf_data['creator_id']),
                            'type': confirmation_type,
                            'description': description,
                            'confirmation': conf
                        })
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {conf_data.get('id', 'unknown')}: {e}")
                    continue
            
            if market_confirmations:
                print_and_log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(market_confirmations)} market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            else:
                print_and_log("‚ÑπÔ∏è –ù–µ—Ç market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
            return market_confirmations
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ Guard: {e}")
            return []

    
    def _display_confirmations(self, confirmations: List[dict]):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        logger.info("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ market –æ—Ä–¥–µ—Ä–∞:")
        for i, conf in enumerate(confirmations, 1):
            conf_id = conf.get('id', 'N/A')
            description = conf.get('description', 'Market Order')
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            logger.info(f"  {i:2d}. {description} (ID: {conf_id})")
        logger.info("")
    
    def _confirm_market_order(self, steam_client, confirmation_data: dict) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π market –æ—Ä–¥–µ—Ä"""
        try:
            from src.steampy.confirmation import ConfirmationExecutor
            
            # –°–æ–∑–¥–∞–µ–º executor –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation = confirmation_data['confirmation']
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ executor
            response = confirmation_executor._send_confirmation(confirmation)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if response and response.get('success'):
                return True
            else:
                error_message = response.get('error', 'Unknown error') if response else 'No response'
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {error_message}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
            return False 
#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ market –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import re
from typing import List, Optional

from bs4 import BeautifulSoup

from src.utils.logger_setup import logger, print_and_log
from .constants import Messages
from .display_formatter import DisplayFormatter


class MarketHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è market –æ—Ä–¥–µ—Ä–æ–≤"""
    
    def __init__(self, trade_manager, formatter: DisplayFormatter, cookie_checker):
        self.trade_manager = trade_manager
        self.formatter = formatter
        self.cookie_checker = cookie_checker
    
    def confirm_all_market_orders(self) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ market –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ Guard"""
        try:
            logger.info("üè™ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–æ–≤")
            logger.info("‚ÑπÔ∏è  –ü–æ–∏—Å–∫ market –æ—Ä–¥–µ—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Guard")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
            if not self.cookie_checker.ensure_valid_cookies():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ cookies")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç–∞
            steam_client = self.trade_manager._get_steam_client()
            if not steam_client:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Steam –∫–ª–∏–µ–Ω—Ç–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmations = self._get_market_confirmations(steam_client)
            
            if not confirmations:
                print_and_log(Messages.NO_MARKET_CONFIRMATIONS)
                return True
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(confirmations)} market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä
            confirmed_count = 0
            for i, confirmation in enumerate(confirmations, 1):
                try:
                    print_and_log(f"üîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {i}/{len(confirmations)}...")
                    
                    if self._confirm_market_order(steam_client, confirmation):
                        confirmed_count += 1
                        print_and_log("‚úÖ –û—Ä–¥–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                    else:
                        print_and_log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞", "ERROR")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    continue
            
            if confirmed_count > 0:
                print_and_log(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {confirmed_count} market –æ—Ä–¥–µ—Ä–æ–≤", "SUCCESS")
                if confirmed_count < len(confirmations):
                    failed_count = len(confirmations) - confirmed_count
                    print_and_log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {failed_count} –æ—Ä–¥–µ—Ä–æ–≤", "WARNING")
            else:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ market –æ—Ä–¥–µ—Ä–∞", "ERROR")
            
            return confirmed_count > 0
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è market –æ—Ä–¥–µ—Ä–æ–≤: {e}", "ERROR")
            return False
    
    def _get_market_confirmations(self, steam_client) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            if hasattr(steam_client, 'get_confirmations'):
                confirmations = steam_client.get_confirmations()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                market_confirmations = []
                for conf in confirmations:
                    if self._is_market_confirmation(conf):
                        market_confirmations.append(conf)
                
                return market_confirmations
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ Guard
            elif hasattr(steam_client, 'steam_guard'):
                return self._get_confirmations_via_guard(steam_client)
            
            else:
                logger.error("‚ùå –ú–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {e}")
            return []
    
    def _get_confirmations_via_guard(self, steam_client) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Guard"""
        try:
            from src.steampy.confirmation import ConfirmationExecutor
            
            # –°–æ–∑–¥–∞–µ–º executor –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmations = confirmation_executor._get_confirmations()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            market_confirmations = []
            for conf in confirmations:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
                try:
                    details_html = confirmation_executor._fetch_confirmation_details_page(conf)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ market –ª–∏—Å—Ç–∏–Ω–≥–æ–º
                    if self._is_market_confirmation_by_details(details_html):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∏–Ω–≥–µ
                        listing_info = self._extract_listing_info(details_html)
                        
                        market_confirmations.append({
                            'id': conf.data_confid,
                            'key': conf.nonce,
                            'creator_id': conf.creator_id,
                            'description': listing_info.get('description', f'Market Listing #{conf.creator_id}'),
                            'item_name': listing_info.get('item_name', 'Unknown Item'),
                            'price': listing_info.get('price', 'Unknown Price'),
                            'confirmation': conf
                        })
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {conf.data_confid}: {e}")
                    continue
            
            return market_confirmations
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ Guard: {e}")
            return []
    
    def _is_market_confirmation_by_details(self, details_html: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –ª–∏—Å—Ç–∏–Ω–≥–æ–º –ø–æ HTML –¥–µ—Ç–∞–ª—è–º"""
        try:
            soup = BeautifulSoup(details_html, 'html.parser')
            
            # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ market –ª–∏—Å—Ç–∏–Ω–≥–∞ –≤ HTML
            # Market –ª–∏—Å—Ç–∏–Ω–≥–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            market_indicators = [
                'market_listing_price',
                'market_listing_item_name',
                'market_listing_action',
                'confiteminfo',
                'market_listing_table_header'
            ]
            
            for indicator in market_indicators:
                if indicator in details_html.lower():
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º CSS
            market_classes = soup.find_all(class_=lambda x: x and 'market' in x.lower())
            if market_classes:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
            text_content = soup.get_text().lower()
            market_keywords = ['sell on the community market', 'market listing', 'steam community market']
            
            for keyword in market_keywords:
                if keyword in text_content:
                    return True
            
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False
    
    def _extract_listing_info(self, details_html: str) -> dict:
        """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∏–Ω–≥–µ –∏–∑ HTML –¥–µ—Ç–∞–ª–µ–π"""
        try:
            soup = BeautifulSoup(details_html, 'html.parser')
            info = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ - –∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            item_name = None
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            selectors = [
                '.market_listing_item_name',
                '.market_listing_item_name_link',
                '.item_market_name',
                '.economy_item_hoverable'
            ]
            
            for selector in selectors:
                elem = soup.select_one(selector)
                if elem:
                    item_name = elem.get_text().strip()
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
            if not item_name:
                text = soup.get_text()
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –º–µ–∂–¥—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                match = re.search(r'You want to sell.*?(\w+.*?)(?:You receive|for)', text, re.DOTALL)
                if match:
                    item_name = match.group(1).strip()
            
            if item_name:
                info['item_name'] = item_name
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É - –∏—â–µ–º "You receive"
            price_match = re.search(r'You receive\s*([0-9,.\s]+[–∞-—è—ë]+)', details_html, re.IGNORECASE)
            if price_match:
                info['price'] = price_match.group(1).strip()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            item_name = info.get('item_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
            price = info.get('price', '')
            
            if price:
                info['description'] = f"{item_name} ‚Üí {price}"
            else:
                info['description'] = f"Market Listing: {item_name}"
            
            return info
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∏–Ω–≥–µ: {e}")
            return {'description': 'Market Listing', 'item_name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}
    
    def _is_market_confirmation(self, confirmation) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–æ–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback, –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ _is_market_confirmation_by_details
        return True
    
    def _display_confirmations(self, confirmations: List[dict]):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        logger.info("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ market –æ—Ä–¥–µ—Ä–∞:")
        for i, conf in enumerate(confirmations, 1):
            conf_id = conf.get('id', 'N/A')
            description = conf.get('description', 'Market Order')
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            logger.info(f"  {i:2d}. {description} (ID: {conf_id})")
        logger.info("")
    
    def _confirm_market_order(self, steam_client, confirmation_data: dict) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π market –æ—Ä–¥–µ—Ä"""
        try:
            from src.steampy.confirmation import ConfirmationExecutor
            
            # –°–æ–∑–¥–∞–µ–º executor –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation = confirmation_data['confirmation']
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ executor
            response = confirmation_executor._send_confirmation(confirmation)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if response and response.get('success'):
                return True
            else:
                error_message = response.get('error', 'Unknown error') if response else 'No response'
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {error_message}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
            return False 
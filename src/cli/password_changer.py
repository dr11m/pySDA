#  –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ https://github.com/sometastycake/steam-password-change/blob/master/steampassword/chpassword.py
#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª–µ–π Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤
—á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Steam Help. –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
steam-password-change.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π
- –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Steam Help –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Steam Guard
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""
import base64
import time
import urllib.parse
import re
from typing import Optional, Dict, Any, Union, List
from .constants import Messages
from .display_formatter import DisplayFormatter
from src.utils.logger_setup import print_and_log
from src.utils.cookies_and_session import session_to_dict, extract_cookies_for_domain
from src.cli.account_context import AccountContext
from src.steampy.client import SteamClient
from src.steampy.confirmation import ConfirmationExecutor, Confirmation

from src.utils.logger_setup import logger


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
class PasswordConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è."""
    MIN_PASSWORD_LENGTH = 8
    STRONG_PASSWORD_LENGTH = 12
    SPECIAL_CHARS = "!@#$%^&*()_+-=[]{}|;:,.<>?"
    MAX_POLL_ATTEMPTS = 10
    POLL_DELAY = 3
    MOBILE_CONFIRMATION_TYPE = 6
    MOBILE_CONFIRMATION_TYPE_NAME = 'Account details'
    RSA_ENCODING = 'ascii'
    RSA_ENCODING_UTF8 = 'utf8'

class HttpConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Steam —Å–µ—Ä–≤–µ—Ä–∞–º."""
    BROWSER_USER_AGENT = (
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/'
        '537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'
    )
    
    COMMON_HEADERS = {
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Connection': 'keep-alive',
        'User-Agent': BROWSER_USER_AGENT,
        'sec-ch-ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"'
    }
    
    AJAX_HEADERS = {
        **COMMON_HEADERS,
        'Accept': '*/*',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'X-Requested-With': 'XMLHttpRequest'
    }
    
    FORM_HEADERS = {
        **COMMON_HEADERS,
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Origin': 'https://help.steampowered.com'
    }

class SteamUrls:
    """URL –∞–¥—Ä–µ—Å–∞ Steam Help –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è."""
    HELP_CHANGE_PASSWORD = "https://help.steampowered.com/wizard/HelpChangePassword?redir=store/account/"
    ENTER_CODE = "https://help.steampowered.com/en/wizard/HelpWithLoginInfoEnterCode"
    SEND_RECOVERY_CODE = "https://help.steampowered.com/en/wizard/AjaxSendAccountRecoveryCode"
    POLL_CONFIRMATION = "https://help.steampowered.com/en/wizard/AjaxPollAccountRecoveryConfirmation"
    VERIFY_RECOVERY_CODE = "https://help.steampowered.com/en/wizard/AjaxVerifyAccountRecoveryCode"
    GET_NEXT_STEP = "https://help.steampowered.com/en/wizard/AjaxAccountRecoveryGetNextStep"
    VERIFY_PASSWORD = "https://help.steampowered.com/en/wizard/AjaxAccountRecoveryVerifyPassword/"
    CHANGE_PASSWORD = "https://help.steampowered.com/en/wizard/AjaxAccountRecoveryChangePassword/"
    GET_RSA_KEY = "https://help.steampowered.com/en/login/getrsakey/"
    CHECK_PASSWORD_AVAILABLE = "https://help.steampowered.com/en/wizard/AjaxCheckPasswordAvailable/"
    ACCOUNT_TEST = "https://store.steampowered.com/en/account/"

class HttpRequestHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ Steam."""
    
    @staticmethod
    def get_common_headers() -> Dict[str, str]:
        return HttpConstants.COMMON_HEADERS.copy()
    
    @staticmethod
    def get_ajax_headers() -> Dict[str, str]:
        return HttpConstants.AJAX_HEADERS.copy()
    
    @staticmethod
    def get_form_headers() -> Dict[str, str]:
        return HttpConstants.FORM_HEADERS.copy()
    
    @staticmethod
    def build_referer_url(base_url: str, params: Dict[str, str]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è Referer –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        param_strings = [f"{k}={v}" for k, v in params.items()]
        return f"{base_url}?{'&'.join(param_strings)}"


class PasswordChanger:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è Steam –∞–∫–∫–∞—É–Ω—Ç–∞.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Steam Help –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å,
    –≤–∫–ª—é—á–∞—è –º–æ–±–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Steam Guard. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    PasswordManager –∏ PasswordValidator –≤ –µ–¥–∏–Ω—ã–π –∫–ª–∞—Å—Å.
    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ https://github.com/sometastycake/steam-password-change
    """
    
    def __init__(self, account_context: AccountContext) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏ –∏ —Å–µ—Å—Å–∏–µ–π
        """
        self.account_context: AccountContext = account_context
        self.formatter: DisplayFormatter = DisplayFormatter()
        self.http_helper: HttpRequestHelper = HttpRequestHelper()
        self.username: str = account_context.account_name
        self.steam_client: Optional[SteamClient] = None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç PasswordChangeParams)
        self.recovery_params: Dict[str, str] = {}
    
    def change_password(self, account_context: AccountContext) -> bool:
        """
        –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è Steam –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            account_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            print_and_log(self.formatter.format_section_header("üîí –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"))
            print_and_log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –º–æ–∂–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞!")
            print_and_log("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Steam Guard")
            print_and_log("")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
            return self.execute()
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return False
        
    def execute(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            print_and_log(f"üîí –ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {self.username}")
            print_and_log("")
            
            # –ü–æ–ª—É—á–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç
            self.steam_client = self.account_context.cookie_manager.get_steam_client()
            if not self.steam_client:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Steam –∫–ª–∏–µ–Ω—Ç", "ERROR")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
            if not self._verify_current_session():
                print_and_log("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", "ERROR")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Steam Guard –¥–∞–Ω–Ω—ã—Ö
            if not self._verify_steam_guard_data():
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Steam Guard", "ERROR")
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
            new_password: Optional[str] = self._get_new_password()
            if not new_password:
                return False
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã
            if not self._confirm_password_change():
                return False
            
            # –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
            if self._change_password_full_process(new_password):
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if self._update_configuration(new_password):
                    print_and_log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
                    print_and_log("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ config.yaml!")
                    return True
                else:
                    print_and_log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
                    return False
            else:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    def _change_password_full_process(self, new_password: str) -> bool:
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
        
        Args:
            new_password: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print_and_log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º Steam ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            account_config = self.account_context.config_manager.accounts_settings.get(self.username, {})
            steam_id = account_config.get('steam_id', '')
            if not steam_id:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å steam_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ _receive_password_change_params)
            print_and_log("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...")
            if not self._initialize_recovery(steam_id):
                return False
            
            # –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞ (–∞–Ω–∞–ª–æ–≥ HelpWithLoginInfoEnterCode)
            print_and_log("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞...")
            if not self._goto_enter_code():
                return False
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–∞–Ω–∞–ª–æ–≥ AjaxSendAccountRecoveryCode)
            print_and_log("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            if not self._send_recovery_request():
                return False
            
            print_and_log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...")
            if not self.confirm_via_guard():
                return False
            
            # –®–∞–≥ 4: –ü–æ–ª–ª–∏–Ω–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥ AjaxPollAccountRecoveryConfirmation)
            print_and_log("üì± –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...")
            if not self._poll_confirmation():
                return False
            
            # –®–∞–≥ 5: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥ AjaxVerifyAccountRecoveryCode)
            print_and_log("üîÑ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            if not self._verify_recovery_code():
                return False
            
            # –®–∞–≥ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ (–∞–Ω–∞–ª–æ–≥ AjaxAccountRecoveryGetNextStep)
            print_and_log("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞...")
            if not self._get_next_step():
                return False
            
            # –®–∞–≥ 7: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ AjaxAccountRecoveryVerifyPassword)
            print_and_log("üîÑ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
            if not self._verify_old_password():
                return False
            
            # –®–∞–≥ 8: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è (–∞–Ω–∞–ª–æ–≥ AjaxAccountRecoveryChangePassword)
            print_and_log("üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
            if not self._set_new_password(new_password):
                return False
            
            print_and_log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
            return True
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    def confirm_via_guard(self) -> bool:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Steam Guard.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            confirmation_executor = ConfirmationExecutor(
                identity_secret=self.account_context.cookie_manager.steam_client.steam_guard['identity_secret'],
                my_steam_id=self.account_context.cookie_manager.steam_client.steam_id,
                session=self.account_context.cookie_manager.steam_client._session
            )
            # –ü–æ–ª—É—á–∞–µ–º JSON —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            confirmations_page = confirmation_executor._fetch_confirmations_page()
            confirmations_json = confirmations_page.json()
            
            if not confirmations_json.get('success'):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return False

            all_confirmations = confirmations_json.get('conf', [])
            
            if len(all_confirmations) == 0:
                print_and_log("‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
                return False
            
            for confirmation in all_confirmations:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (Account details = 6)
                if (confirmation.get('type_name', "") == PasswordConstants.MOBILE_CONFIRMATION_TYPE_NAME and 
                    confirmation.get('type', -1) == PasswordConstants.MOBILE_CONFIRMATION_TYPE):
                    print_and_log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {confirmation}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ creator_id
                    if confirmation.get('creator_id', "") == self.recovery_params["s"]:
                        print_and_log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è: {confirmation}")
                        conf = Confirmation(
                            data_confid=confirmation['id'],
                            nonce=confirmation['nonce'],
                            creator_id=int(confirmation['creator_id'])
                        )
                        response = confirmation_executor._send_confirmation(conf)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        if response and response.get('success'):
                            return True
                        else:
                            error_message = response.get('error', 'Unknown error') if response else 'No response'
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {error_message}")
                            return False
            
            else:
                print_and_log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
                return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è (–≤–æ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏): {e}", "ERROR")
            return False

    def _initialize_recovery(self, steam_id: str) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.
        
        –ê–Ω–∞–ª–æ–≥ _receive_password_change_params –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.
        
        Args:
            steam_id: Steam ID –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print_and_log(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è Steam ID: {steam_id}")
    
            print_and_log("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫—É–∫–∏ –æ—Ç steamcommunity.com...")

            headers = {
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'Referer': 'https://store.steampowered.com/',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'same-site',
                'Sec-Fetch-User': '?1',
                'Upgrade-Insecure-Requests': '1',
                **self.http_helper.get_common_headers()
            }
            
            response = self.steam_client._session.get(
                SteamUrls.HELP_CHANGE_PASSWORD,
                headers=headers,
                allow_redirects=True
            )
            
            print_and_log(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print_and_log(f"üîç URL –æ—Ç–≤–µ—Ç–∞: {response.url}")
            print_and_log(f"üîç –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤: {len(response.history)} —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤")
            
            if self.username.lower() in response.text.lower():
                print(f"‚úÖ {self.username} –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ - –ê–í–¢–û–†–ò–ó–û–í–ê–ù")
            else:
                print(f"‚ùå {self.username} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ - –ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–æ –ª–∏ —Å–Ω–æ–≤–∞ –Ω–∞ –ª–æ–≥–∏–Ω
            if '/login' in response.url:
                print_and_log("‚ùå Steam —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞")
                print_and_log("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print_and_log("  ‚Ä¢ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                print_and_log("  ‚Ä¢ –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                print_and_log("  ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            if response.history:
                print_and_log("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL...")
                
                final_url = response.url
                parsed_url = urllib.parse.urlparse(final_url)
                query_params = urllib.parse.parse_qs(parsed_url.query)
                
                print_and_log(f"üîç –§–∏–Ω–∞–ª—å–Ω—ã–π URL: {final_url}")
                print_and_log(f"üîç Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {query_params}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –æ–±—Ä–∞–∑—Ü—É PasswordChangeParams
                try:
                    self.recovery_params = {
                        's': query_params.get('s', [None])[0],  # ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                        'account': query_params.get('account', [None])[0],  # –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
                        'reset': query_params.get('reset', [None])[0],  # –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞
                        'issueid': query_params.get('issueid', [None])[0],  # ID –ø—Ä–æ–±–ª–µ–º—ã
                        'lost': query_params.get('lost', ['0'])[0]  # –§–ª–∞–≥ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                    }
                    
                    print_and_log(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {self.recovery_params}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å—Ç—å
                    if all(v is not None for k, v in self.recovery_params.items() if k != 'lost'):
                        recovery_id = self.recovery_params['s']
                        print_and_log(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. id –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_id}")
                        return True
                    else:
                        print_and_log("‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–¥–∏—Ä–µ–∫—Ç–µ")
                        return False
                        
                except Exception as e:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {e}")
                    return False
            
            # –ï—Å–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–µ –±—ã–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º HTML –Ω–∞ –æ—à–∏–±–∫–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            html_content = response.text
            print_and_log("üîç –†–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–µ –±—ã–ª–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML...")
            
            # –ò—â–µ–º –æ—à–∏–±–∫–∏ –≤ HTML (–∞–Ω–∞–ª–æ–≥ page.cssselect('#error_description'))
            error_patterns = [
                r'<div[^>]*id=["\']error_description["\'][^>]*>([^<]+)</div>',
                r'<div[^>]*class="[^"]*error[^"]*"[^>]*>([^<]+)</div>',
            ]
            
            for pattern in error_patterns:
                error_match = re.search(pattern, html_content, re.IGNORECASE)
                if error_match:
                    error_text = error_match.group(1).strip()
                    print_and_log(f"‚ùå –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ Steam: {error_text}")
                    return False
            
            print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è")
            print_and_log(f"üîç –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ HTML: {html_content[:500]}")
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ _initialize_recovery: {type(e).__name__}: {str(e)}", "ERROR")
            import traceback
            print_and_log(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}", "ERROR")
            return False
    
    def _goto_enter_code(self) -> bool:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print_and_log("üîç –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            url = SteamUrls.ENTER_CODE
            params = {
                's': self.recovery_params['s'],  # ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                'account': self.recovery_params['account'],  # –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
                'reset': self.recovery_params['reset'],  # –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞
                'lost': self.recovery_params['lost'],  # –§–ª–∞–≥ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                'issueid': self.recovery_params['issueid'],  # ID –ø—Ä–æ–±–ª–µ–º—ã
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                'wizard_ajax': '1',  # –§–ª–∞–≥ AJAX –∑–∞–ø—Ä–æ—Å–∞
                'gamepad': '0'  # –§–ª–∞–≥ –≥–µ–π–º–ø–∞–¥–∞
            }
            
            print_and_log(f"üîç URL: {url}")
            print_and_log(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            headers = {
                **self.http_helper.get_ajax_headers(),
                'Referer': self.http_helper.build_referer_url(url, self.recovery_params)
            }
            
            response = self.steam_client._session.get(url, params=params, headers=headers)
            
            print_and_log(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                content = response.text
                print_and_log(f"üîç –î–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(content)}")
                print_and_log(f"üîç –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤: {content[:300]}")
                
                print_and_log("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞: {e}", "ERROR")
            return False
    
    def _send_recovery_request(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = SteamUrls.SEND_RECOVERY_CODE
            data = {
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                'wizard_ajax': '1',  # –§–ª–∞–≥ AJAX –∑–∞–ø—Ä–æ—Å–∞
                'gamepad': '0',  # –§–ª–∞–≥ –≥–µ–π–º–ø–∞–¥–∞
                's': self.recovery_params['s'],  # ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                'method': '8',  # –ú–æ–±–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Steam Guard
                'link': '',  # –ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞
                'n': '1'  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤
            }
            
            headers = {
                **self.http_helper.get_form_headers(),
                'Referer': self.http_helper.build_referer_url(SteamUrls.ENTER_CODE, self.recovery_params)
            }
            
            response = self.steam_client._session.post(url, data=data, headers=headers)
            if response.status_code == 200:
                try:
                    result = response.json()
                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {result}")
                    if result.get('success'):
                        print_and_log("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        return True
                    else:
                        print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {result.get('errorMsg', 'Unknown error')}")
                        return False
                except:
                    print_and_log("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–æ—Ç–≤–µ—Ç –Ω–µ –≤ JSON)")
                    return True
            
            print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", "ERROR")
            return False
    
    def _poll_confirmation(self) -> bool:
        """
        –ü–æ–ª–ª–∏–Ω–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
        """
        try:
            url = SteamUrls.POLL_CONFIRMATION
            data = {
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                'wizard_ajax': '1',  # –§–ª–∞–≥ AJAX –∑–∞–ø—Ä–æ—Å–∞
                'gamepad': '0',  # –§–ª–∞–≥ –≥–µ–π–º–ø–∞–¥–∞
                's': self.recovery_params['s'],  # ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                'reset': self.recovery_params['reset'],  # –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞
                'lost': self.recovery_params['lost'],  # –§–ª–∞–≥ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                'method': '8',  # –ú–æ–±–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Steam Guard
                'issueid': self.recovery_params['issueid']  # ID –ø—Ä–æ–±–ª–µ–º—ã
            }
            
            headers = {
                **self.http_helper.get_form_headers(),
                'Referer': self.http_helper.build_referer_url(SteamUrls.ENTER_CODE, self.recovery_params)
            }
            
            for attempt in range(PasswordConstants.MAX_POLL_ATTEMPTS):
                print_and_log(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{PasswordConstants.MAX_POLL_ATTEMPTS}")
                
                response = self.steam_client._session.post(url, data=data, headers=headers)
                
                if response.status_code == 200:
                    try:
                        result = response.json()
                        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–ª–∏–Ω–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result}")
                        if not result.get('errorMsg'):
                            print_and_log("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
                            return True
                        elif '–æ–∂–∏–¥–∞–Ω–∏–µ' in result.get('errorMsg', '').lower():
                            time.sleep(PasswordConstants.POLL_DELAY)
                            continue
                        else:
                            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result.get('errorMsg')}")
                            return False
                    except:
                        print_and_log("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö)")
                        return True
                
                time.sleep(PasswordConstants.POLL_DELAY)
            
            print_and_log("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç")
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}", "ERROR")
            return False
    
    def _verify_recovery_code(self) -> bool:
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = SteamUrls.VERIFY_RECOVERY_CODE
            params = {
                'code': '',  # –ü—É—Å—Ç–æ–π –∫–æ–¥ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ)
                's': self.recovery_params['s'],  # ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                'reset': self.recovery_params['reset'],  # –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞
                'lost': self.recovery_params['lost'],  # –§–ª–∞–≥ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                'method': '8',  # –ú–æ–±–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Steam Guard
                'issueid': self.recovery_params['issueid'],  # ID –ø—Ä–æ–±–ª–µ–º—ã
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                'wizard_ajax': '1',  # –§–ª–∞–≥ AJAX –∑–∞–ø—Ä–æ—Å–∞
                'gamepad': '0'  # –§–ª–∞–≥ –≥–µ–π–º–ø–∞–¥–∞
            }
            
            response = self.steam_client._session.get(url, params=params)
            if response.status_code == 200:
                try:
                    result = response.json()
                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {result}")
                    return not result.get('errorMsg')
                except:
                    return True
            
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}", "ERROR")
            return False
    
    def _get_next_step(self) -> bool:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = SteamUrls.GET_NEXT_STEP
            data = {
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                'wizard_ajax': '1',  # –§–ª–∞–≥ AJAX –∑–∞–ø—Ä–æ—Å–∞
                's': self.recovery_params['s'],  # ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                'account': self.recovery_params['account'],  # –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
                'reset': self.recovery_params['reset'],  # –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞
                'issueid': self.recovery_params['issueid'],  # ID –ø—Ä–æ–±–ª–µ–º—ã
                'lost': '2'  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ lost=2 –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
            }
            
            response = self.steam_client._session.post(url, data=data)
            if response.status_code == 200:
                try:
                    result = response.json()
                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–≥–∞: {result}")
                    return not result.get('errorMsg')
                except:
                    return True
            
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–≥–∞: {e}", "ERROR")
            return False
    
    def _verify_old_password(self) -> bool:
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            account_config = self.account_context.config_manager.accounts_settings.get(self.username, {})
            current_password = account_config.get('password', '')
            if not current_password:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º RSA –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            rsa_key = self._get_rsa_key()
            if not rsa_key:
                return False
            
            # –®–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            encrypted_password = self._encrypt_password(current_password, rsa_key)
            if not encrypted_password:
                return False
            
            url = SteamUrls.VERIFY_PASSWORD
            data = {
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                's': self.recovery_params['s'],  # ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                'lost': '2',  # –§–ª–∞–≥ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                'reset': '1',  # –§–ª–∞–≥ —Å–±—Ä–æ—Å–∞
                'password': encrypted_password,  # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
                'rsatimestamp': rsa_key['timestamp']  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ RSA –∫–ª—é—á–∞
            }
        
            response = self.steam_client._session.post(url, data=data)
            if response.status_code == 200:
                try:
                    result = response.json()
                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: {result}")
                    return not result.get('errorMsg')
                except:
                    return True
            
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    def _set_new_password(self, new_password: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            new_password: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
            if not self._check_password_available(new_password):
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º RSA –∫–ª—é—á
            rsa_key = self._get_rsa_key()
            if not rsa_key:
                return False
            
            # –®–∏—Ñ—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            encrypted_password = self._encrypt_password(new_password, rsa_key)
            if not encrypted_password:
                return False
            
            url = SteamUrls.CHANGE_PASSWORD
            data = {
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                'wizard_ajax': '1',  # –§–ª–∞–≥ AJAX –∑–∞–ø—Ä–æ—Å–∞
                's': self.recovery_params['s'],  # ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                'account': self.recovery_params['account'],  # –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
                'password': encrypted_password,  # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                'rsatimestamp': rsa_key['timestamp']  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ RSA –∫–ª—é—á–∞
            }
            
            response = self.steam_client._session.post(url, data=data)
            if response.status_code == 200:
                try:
                    result = response.json()
                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {result}")
                    if not result.get('errorMsg'):
                        print_and_log("‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        return True
                    else:
                        print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {result.get('errorMsg')}")
                        return False
                except:
                    print_and_log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ—Ç–≤–µ—Ç –Ω–µ –≤ JSON)")
                    return True
            
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    def _get_rsa_key(self) -> Optional[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ RSA –∫–ª—é—á–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è.
        
        Returns:
            Optional[Dict[str, str]]: RSA –∫–ª—é—á –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            url = SteamUrls.GET_RSA_KEY
            data = {
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                'username': self.username  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
            
            response = self.steam_client._session.post(url, data=data)
            if response.status_code == 200:
                result = response.json()
                if not result.get('errorMsg'):
                    return {
                        'mod': result.get('publickey_mod', ''),
                        'exp': result.get('publickey_exp', ''),
                        'timestamp': result.get('timestamp', '')
                    }
            
            return None
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSA –∫–ª—é—á–∞: {e}", "ERROR")
            return None
    
    def _encrypt_password(self, password: str, rsa_key: Dict[str, str]) -> str:
        """
        –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é RSA.
        
        Args:
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            rsa_key: RSA –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ base64 –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            import rsa
            
            publickey_exp = int(rsa_key['exp'], 16)
            publickey_mod = int(rsa_key['mod'], 16)
            public_key = rsa.PublicKey(n=publickey_mod, e=publickey_exp)
            
            encrypted_password = rsa.encrypt(
                message=password.encode(PasswordConstants.RSA_ENCODING),
                pub_key=public_key,
            )
            encrypted_password64 = base64.b64encode(encrypted_password)
            return str(encrypted_password64, PasswordConstants.RSA_ENCODING_UTF8)
            
        except ImportError:
            print_and_log("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ rsa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "ERROR")
            print_and_log("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install rsa")
            return ""
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return ""
    
    def _check_password_available(self, password: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
        
        Args:
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        try:
            url = SteamUrls.CHECK_PASSWORD_AVAILABLE
            data = {
                'sessionid': self.steam_client._get_session_id(),  # ID —Å–µ—Å—Å–∏–∏ Steam
                'wizard_ajax': '1',  # –§–ª–∞–≥ AJAX –∑–∞–ø—Ä–æ—Å–∞
                'password': password  # –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
            
            response = self.steam_client._session.post(url, data=data)
            if response.status_code == 200:
                result = response.json()
                logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è: {result}")
                if result.get('available'):
                    print_and_log("‚úÖ –ü–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print_and_log("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return False
            
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    def _update_configuration(self, new_password: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.
        
        Args:
            new_password: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print_and_log("üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º config_manager –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            cookie_manager = self.account_context.cookie_manager
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            cookie_manager.password = new_password
            
            print_and_log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "ERROR")
            return False

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    def _get_new_password(self) -> Optional[str]:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Returns:
            Optional[str]: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ None –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        """
        print_and_log("")
        print_and_log("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        print_and_log("üí° –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:")
        print_and_log("  ‚Ä¢ –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
        print_and_log("  ‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")
        print_and_log("  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        print_and_log("")
        
        while True:
            new_password: str = input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
            
            if not new_password:
                print_and_log("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", "ERROR")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
            validation: Dict[str, Union[bool, int, List[str]]] = self.validate_password_strength(new_password)
            if not validation['is_valid']:
                print_and_log("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:")
                for issue in validation['issues']:
                    print_and_log(f"  ‚Ä¢ {issue}")
                continue
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            confirm_password: str = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
            if new_password != confirm_password:
                print_and_log("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", "ERROR")
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            score: int = validation['score']
            if score >= 4:
                print_and_log("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            elif score >= 2:
                print_and_log("‚ö†Ô∏è  –ü–∞—Ä–æ–ª—å —Å—Ä–µ–¥–Ω–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
            else:
                print_and_log("‚ö†Ô∏è  –°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å, –Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
            
            return new_password
    
    def _confirm_password_change(self) -> bool:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
        """
        print_and_log("")
        print_and_log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:")
        print_and_log("  ‚Ä¢ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –º–æ–∂–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
        print_and_log("  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Steam Guard")
        print_and_log("  ‚Ä¢ –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        print_and_log("")
        
        while True:
            choice: str = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è? (y/N): ").lower().strip()
            if choice in ('y', 'yes', '–¥–∞', '–¥'):
                return True
            elif choice in ('n', 'no', '–Ω–µ—Ç', '–Ω', ''):
                print_and_log("–û—Ç–º–µ–Ω–µ–Ω–æ.")
                return False
            else:
                print_and_log("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã", "ERROR")
    
    def _verify_current_session(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ Steam.
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        """
        try:
            print_and_log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏...")
            
            if hasattr(self.steam_client, 'is_session_alive') and callable(self.steam_client.is_session_alive):
                if self.steam_client.is_session_alive():
                    print_and_log("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
                    return True
                else:
                    print_and_log("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                    return False
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                test_url = SteamUrls.ACCOUNT_TEST
                test_response = self.steam_client._session.get(test_url)
                if test_response.status_code == 200 and "account" in test_response.text.lower():
                    print_and_log("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ (–ø–æ —Ç–µ—Å—Ç—É)")
                    return True
                else:
                    print_and_log("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (–ø–æ —Ç–µ—Å—Ç—É)")
                    return False
                    
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}", "ERROR")
            return False
    
    def _verify_steam_guard_data(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö Steam Guard –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ Steam Guard –¥–æ—Å—Ç—É–ø–Ω—ã
        """
        try:
            print_and_log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Steam Guard...")
            
            if not self.steam_client.steam_guard:
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Steam Guard (mafile –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)")
                return False
            
            identity_secret = self.steam_client.steam_guard.get('identity_secret', '')
            account_config = self.account_context.config_manager.accounts_settings.get(self.username, {})
            steam_id = account_config.get('steam_id', '')
            
            if not identity_secret:
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç identity_secret –≤ mafile")
                return False
            
            if not steam_id:
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç steamid –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            print_and_log("‚úÖ –î–∞–Ω–Ω—ã–µ Steam Guard –Ω–∞–π–¥–µ–Ω—ã")
            return True
                    
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Steam Guard –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
            return False
    
    def validate_password_strength(self, password: str) -> Dict[str, Union[bool, int, List[str]]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è.
        
        Args:
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:
            - is_valid: bool - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä–æ–ª—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            - score: int - –æ—Ü–µ–Ω–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ (0-6)
            - issues: List[str] - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä–æ–ª–µ–º
        """
        result: Dict[str, Union[bool, int, List[str]]] = {
            'is_valid': True,
            'score': 0,
            'issues': []
        }
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        if len(password) < PasswordConstants.MIN_PASSWORD_LENGTH:
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
            result['is_valid'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±—É–∫–≤
        if not any(c.isalpha() for c in password):
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã")
            result['is_valid'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–∏—Ñ—Ä
        if not any(c.isdigit() for c in password):
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã")
            result['is_valid'] = False
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        if len(password) >= PasswordConstants.STRONG_PASSWORD_LENGTH:
            result['score'] += 2
        elif len(password) >= PasswordConstants.MIN_PASSWORD_LENGTH:
            result['score'] += 1
            
        if any(c.isupper() for c in password):
            result['score'] += 1
            
        if any(c.islower() for c in password):
            result['score'] += 1
            
        if any(c in PasswordConstants.SPECIAL_CHARS for c in password):
            result['score'] += 2
            
        return result

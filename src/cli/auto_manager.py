#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import json
import shutil
import os
import time
import threading
import re
from pathlib import Path
from typing import Dict, Any, Optional, List, TYPE_CHECKING, Protocol
from dataclasses import dataclass, asdict

from src.utils.logger_setup import logger
from .constants import Messages, AutoMenuChoice
from .display_formatter import DisplayFormatter

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
if TYPE_CHECKING:
    from src.trade_confirmation_manager import TradeConfirmationManager
    from src.steampy.client import SteamClient
    from src.steampy.confirmation import ConfirmationExecutor, Confirmation
    from ..cli_interface import CLIInterface


class CLIContextProtocol(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ CLI –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    trade_manager: 'TradeConfirmationManager'
    cookie_checker: Any
    username: Optional[str]


@dataclass
class AutoSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    # –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    check_interval: int = 60
    
    # –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Ç—Ä–µ–π–¥—ã (–≥–¥–µ –Ω–∞–º –¥–∞—é—Ç —á—Ç–æ-—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
    auto_accept_gifts: bool = False
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ –ø—Ä–∏–Ω—è—Ç—ã–µ —Ç—Ä–µ–π–¥—ã —á–µ—Ä–µ–∑ Guard (–≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ)
    auto_confirm_trades: bool = False
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ market –ª–∏—Å—Ç–∏–Ω–≥–∏ (buy/sell –æ—Ä–¥–µ—Ä–∞)
    auto_confirm_market: bool = False


@dataclass
class TradeCache:
    """–ö—ç—à –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤"""
    data: Optional[Dict[str, Any]] = None
    timestamp: float = 0
    ttl: int = 15  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
        return self.data is not None and (time.time() - self.timestamp) < self.ttl
    
    def get(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã"""
        return self.data if self.is_valid() else None
    
    def set(self, data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        self.data = data
        self.timestamp = time.time()
    
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        self.data = None
        self.timestamp = 0


class AutoManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, accounts_dir: str = "accounts_info"):
        self.accounts_dir = Path(accounts_dir)
        self.formatter = DisplayFormatter()
        self.settings_file = self.accounts_dir / "auto_settings.json"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.accounts_dir.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self._load_settings()
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        self._stop_automation = threading.Event()
        self._automation_thread = None
        self._trade_cache = TradeCache()  # –ö—ç—à –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
    
    def _load_settings(self) -> AutoSettings:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.settings_file.exists():
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ {self.settings_file}")
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings_data = {k: v for k, v in data.items() if not k.startswith('_')}
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                settings = AutoSettings(**settings_data)
                print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return settings
            else:
                print("üìù –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_settings = AutoSettings()
                if self._save_settings(default_settings):
                    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.settings_file}")
                return default_settings
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            print("üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return AutoSettings()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return AutoSettings()
    
    def _save_settings(self, settings: AutoSettings) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.settings_file.exists():
                backup_file = self.settings_file.with_suffix('.json.backup')
                shutil.copy2(self.settings_file, backup_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                data = asdict(settings)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON (—á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏)
                data['_info'] = {
                    'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Steam Bot',
                    'version': '1.0',
                    'created': str(Path(self.settings_file).stat().st_mtime if self.settings_file.exists() else 'now')
                }
                json.dump(data, f, indent=4, ensure_ascii=False)
            
            print(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.settings_file}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def show_settings(self) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            print(self.formatter.format_section_header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"))
            print("‚ÑπÔ∏è  –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è")
            print()
            
            while True:
                self._display_current_settings()
                print()
                print("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
                print("1. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)")
                print("2. –ê–≤—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤)")
                print("3. –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–æ–≤ —á–µ—Ä–µ–∑ Guard")
                print("4. –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–æ–≤")
                print("0. –ù–∞–∑–∞–¥")
                print("-" * 30)
                
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    self._change_check_interval()
                elif choice == "2":
                    self._toggle_auto_gifts()
                elif choice == "3":
                    self._toggle_auto_confirm()
                elif choice == "4":
                    self._toggle_auto_market()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            input(Messages.PRESS_ENTER)
            return False
    
    def _display_current_settings(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"  ‚è±Ô∏è  –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.settings.check_interval} —Å–µ–∫")
        print(f"  üéÅ –ê–≤—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if self.settings.auto_accept_gifts else '‚ùå'}")
        print(f"  üîë –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤: {'‚úÖ' if self.settings.auto_confirm_trades else '‚ùå'}")
        print(f"  üè™ –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market: {'‚úÖ' if self.settings.auto_confirm_market else '‚ùå'}")
    
    def _change_check_interval(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            print()
            print(f"–¢–µ–∫—É—â–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self.settings.check_interval} —Å–µ–∫—É–Ω–¥")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 30-300 —Å–µ–∫—É–Ω–¥ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ)")
            
            new_interval = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (—Å–µ–∫): ").strip()
            
            if not new_interval.isdigit():
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                return
            
            interval = int(new_interval)
            if interval < 10:
                print("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: 10 —Å–µ–∫—É–Ω–¥")
                return
            elif interval > 3600:
                print("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)")
                return
            
            self.settings.check_interval = interval
            self._save_settings(self.settings)
            print(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: {e}")
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _toggle_auto_gifts(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤"""
        self.settings.auto_accept_gifts = not self.settings.auto_accept_gifts
        self._save_settings(self.settings)
        status_emoji = "‚úÖ" if self.settings.auto_accept_gifts else "‚ùå"
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if self.settings.auto_accept_gifts else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        print(f"{status_emoji} –ê–≤—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ {status_text}")
        print("‚ÑπÔ∏è –ü–æ–¥–∞—Ä–∫–∏ = —Ç—Ä–µ–π–¥—ã –≥–¥–µ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–¥–∞–µ–º, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∞–µ–º")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _toggle_auto_confirm(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤"""
        self.settings.auto_confirm_trades = not self.settings.auto_confirm_trades
        self._save_settings(self.settings)
        status_emoji = "‚úÖ" if self.settings.auto_confirm_trades else "‚ùå"
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if self.settings.auto_confirm_trades else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        print(f"{status_emoji} –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ {status_text}")
        print("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –í–°–ï –ø—Ä–∏–Ω—è—Ç—ã–µ —Ç—Ä–µ–π–¥—ã (–≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ) —á–µ—Ä–µ–∑ Guard")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _toggle_auto_market(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è market –æ—Ä–¥–µ—Ä–æ–≤"""
        self.settings.auto_confirm_market = not self.settings.auto_confirm_market
        self._save_settings(self.settings)
        status_emoji = "‚úÖ" if self.settings.auto_confirm_market else "‚ùå"
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if self.settings.auto_confirm_market else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        print(f"{status_emoji} –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–æ–≤ {status_text}")
        print("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç buy/sell –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def start_auto_accept(self, cli_context: CLIContextProtocol) -> bool:
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            print(self.formatter.format_section_header("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"))
            print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self._display_current_settings()
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            if not any([self.settings.auto_accept_gifts, self.settings.auto_confirm_trades, self.settings.auto_confirm_market]):
                print("‚ö†Ô∏è –í—Å–µ –æ–ø—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!")
                print("üí° –í–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –æ–ø—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
                input(Messages.PRESS_ENTER)
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            if not cli_context.trade_manager:
                print("‚ùå Trade Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                input(Messages.PRESS_ENTER)
                return False
            
            if not cli_context.cookie_checker:
                print("‚ùå Cookie Checker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                input(Messages.PRESS_ENTER)
                return False
            
            print("üî• –î–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
            if self.settings.auto_accept_gifts:
                print("  ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ (–ø–æ–¥–∞—Ä–∫–æ–≤)")
            if self.settings.auto_confirm_trades:
                print("  ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –í–°–ï–• –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ —á–µ—Ä–µ–∑ Guard")
            if self.settings.auto_confirm_market:
                print("  ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–æ–≤ (buy/sell)")
            print()
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é? (y/N): ").lower().strip()
            if confirm not in ['y', 'yes', '–¥–∞', '–¥']:
                print("üõë –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                input(Messages.PRESS_ENTER)
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –∏–ª–∏ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É")
            print("=" * 60)
            
            self._stop_automation.clear()
            self._automation_thread = threading.Thread(
                target=self._automation_loop,
                args=(cli_context,),
                daemon=True,
                name="AutoAcceptThread"
            )
            self._automation_thread.start()
            
            # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                input("\nüî¥ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            except KeyboardInterrupt:
                print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            self._stop_automation.set()
            print("‚è∏Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            
            if self._automation_thread and self._automation_thread.is_alive():
                self._automation_thread.join(timeout=5)
            
            print("üõë –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            input(Messages.PRESS_ENTER)
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            input(Messages.PRESS_ENTER)
            return False
    
    def _automation_loop(self, cli_context: CLIContextProtocol) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
        
        cycle_count = 0
        
        while not self._stop_automation.is_set():
            try:
                cycle_count += 1
                current_time = time.strftime("%H:%M:%S")
                
                print(f"\nüîÑ –¶–∏–∫–ª #{cycle_count} - {current_time}")
                print("-" * 40)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies (—Ç–∏—Ö–æ)
                if not self._check_cookies_quietly(cli_context):
                    self._wait_or_stop(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                total_actions = self._execute_automation_tasks(cli_context)
                
                # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Ü–∏–∫–ª–∞
                self._print_cycle_summary(cycle_count, total_actions)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                wait_time = self.settings.check_interval
                if total_actions > 0:
                    print(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                else:
                    print(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥ (–≤—Å–µ —Å–ø–æ–∫–æ–π–Ω–æ)")
                
                if self._wait_or_stop(wait_time):
                    break
                
            except Exception as e:
                self._handle_automation_error(e)
                if self._wait_or_stop(30):  # –ñ–¥–µ–º 30 —Å–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    break
        
        logger.info("üõë –¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _check_cookies_quietly(self, cli_context: CLIContextProtocol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies (—Ç–∏—Ö–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ª–æ–≥–æ–≤)"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ cookie_checker
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —á–µ—Ä–µ–∑ loguru –≤ logger_setup.py
            
            try:
                result = cli_context.cookie_checker.ensure_valid_cookies()
                if not result:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å cookies, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                return result
            finally:
                cookie_logger.setLevel(original_level)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ cookies: {e}")
            return False
    
    def _execute_automation_tasks(self, cli_context: CLIContextProtocol) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        total_actions = 0
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á
            self._setup_trade_caching(cli_context)
            
            # 1. –ü—Ä–∏–Ω—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
            if self.settings.auto_accept_gifts:
                actions = self._process_free_trades(cli_context)
                total_actions += actions
            
            # 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ —á–µ—Ä–µ–∑ Guard
            if self.settings.auto_confirm_trades:
                actions = self._process_trade_confirmations(cli_context)
                total_actions += actions
            
            # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–æ–≤
            if self.settings.auto_confirm_market:
                actions = self._process_market_confirmations(cli_context)
                total_actions += actions
            
        finally:
            # –í—Å–µ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            self._restore_trade_caching(cli_context)
        
        return total_actions
    
    def _get_cached_trades(self, cli_context: CLIContextProtocol) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–π–¥—ã –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_data = self._trade_cache.get()
        if cached_data is not None:
            logger.debug("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã")
            return cached_data
        
        # –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        logger.debug("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Ç—Ä–µ–π–¥—ã (–∫—ç—à —É—Å—Ç–∞—Ä–µ–ª)")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ trade_manager
            trade_offers = cli_context.trade_manager.get_trade_offers(active_only=False)
            if trade_offers:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._trade_cache.set(trade_offers)
                return trade_offers
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {e}")
        
        return None

    def _setup_trade_caching(self, cli_context: CLIContextProtocol) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è trade_manager"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        self._original_get_trade_offers = cli_context.trade_manager.get_trade_offers
        
        # –°–æ–∑–¥–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        def cached_get_trade_offers(active_only: bool = True, use_webtoken: bool = True):
            # –ï—Å–ª–∏ –∫—ç—à –≤–∞–ª–∏–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞
            cached_data = self._trade_cache.get()
            if cached_data is not None:
                logger.debug("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã")
                return cached_data
            
            # –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            logger.debug("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Ç—Ä–µ–π–¥—ã (–∫—ç—à —É—Å—Ç–∞—Ä–µ–ª)")
            result = self._original_get_trade_offers(active_only, use_webtoken)
            if result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._trade_cache.set(result)
            return result
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        cli_context.trade_manager.get_trade_offers = cached_get_trade_offers

    def _restore_trade_caching(self, cli_context: CLIContextProtocol) -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ get_trade_offers"""
        if hasattr(self, '_original_get_trade_offers'):
            cli_context.trade_manager.get_trade_offers = self._original_get_trade_offers

    def _process_free_trades(self, cli_context: CLIContextProtocol) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤"""
        print("üéÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤...")
        
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —á–µ—Ä–µ–∑ loguru –≤ logger_setup.py
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            stats = cli_context.trade_manager.process_free_trades(
                auto_accept=True,
                auto_confirm=self.settings.auto_confirm_trades
            )
            
            if stats:
                found = stats.get('found_free_trades', 0)
                accepted = stats.get('accepted_trades', 0)
                confirmed = stats.get('confirmed_trades', 0)
                errors = stats.get('errors', 0)
                
                if found > 0:
                    print(f"  üìä –ù–∞–π–¥–µ–Ω–æ: {found}, –ø—Ä–∏–Ω—è—Ç–æ: {accepted}, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}")
                    if errors > 0:
                        print(f"  ‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors}")
                    return accepted + confirmed
                else:
                    print("  ‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return 0
            
            return 0
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤: {e}", exc_info=True)
            return 0
    
    def _process_trade_confirmations(self, cli_context: CLIContextProtocol) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ç—Ä–µ–π–¥–æ–≤"""
        print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —á–µ—Ä–µ–∑ loguru –≤ logger_setup.py
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            stats = cli_context.trade_manager.process_confirmation_needed_trades(
                auto_confirm=True
            )
            
            if stats:
                found = stats.get('found_confirmation_needed', 0)
                confirmed = stats.get('confirmed_trades', 0)
                errors = stats.get('errors', 0)
                
                if found > 0:
                    print(f"  üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {found}, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}")
                    if errors > 0:
                        print(f"  ‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors}")
                    return confirmed
                else:
                    print("  ‚ÑπÔ∏è –¢—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return 0
            
            return 0
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤: {e}", exc_info=True)
            return 0
    
    def _process_market_confirmations(self, cli_context: CLIContextProtocol) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π market –æ—Ä–¥–µ—Ä–æ–≤"""
        print("üè™ –ü—Ä–æ–≤–µ—Ä–∫–∞ market –æ—Ä–¥–µ—Ä–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç–∞
            steam_client = cli_context.trade_manager.get_steam_client()
            if not steam_client:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Steam –∫–ª–∏–µ–Ω—Ç–∞")
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            market_confirmations = self._get_market_confirmations(steam_client)
            
            if not market_confirmations:
                print("  ‚ÑπÔ∏è Market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return 0
            
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {len(market_confirmations)}")
            
            confirmed_count = 0
            for i, conf in enumerate(market_confirmations, 1):
                description = conf.get('description', 'Market –æ—Ä–¥–µ—Ä')
                item_name = conf.get('item_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
                price = conf.get('price', '')
                
                print(f"  üîÑ [{i}/{len(market_confirmations)}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º: {description}")
                
                if self._confirm_market_order(steam_client, conf):
                    confirmed_count += 1
                    print(f"  ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {description}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.info(f"Market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –ø—Ä–µ–¥–º–µ—Ç='{item_name}', —Ü–µ–Ω–∞='{price}', –æ–ø–∏—Å–∞–Ω–∏–µ='{description}'")
                else:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: {description}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
                if i < len(market_confirmations):  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                    time.sleep(2)
            
            if confirmed_count > 0:
                print(f"  üìà –ò—Ç–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ market –æ—Ä–¥–µ—Ä–æ–≤: {confirmed_count}/{len(market_confirmations)}")
            
            return confirmed_count
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {e}", exc_info=True)
            return 0
    
    def _print_cycle_summary(self, cycle_count: int, total_actions: int) -> None:
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Ü–∏–∫–ª–∞"""
        if total_actions > 0:
            print(f"‚úÖ –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {total_actions} –¥–µ–π—Å—Ç–≤–∏–π")
        else:
            print(f"‚ÑπÔ∏è –¶–∏–∫–ª #{cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    def _handle_automation_error(self, error: Exception) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {error}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {error}", exc_info=True)
    
    def _get_market_confirmations(self, steam_client: 'SteamClient') -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ market_handler.py)"""
        try:
            from src.steampy.confirmation import ConfirmationExecutor
            
            # –°–æ–∑–¥–∞–µ–º executor –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            confirmation_executor: 'ConfirmationExecutor' = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmations: List['Confirmation'] = confirmation_executor._get_confirmations()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            market_confirmations: List[Dict[str, Any]] = []
            for conf in confirmations:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
                    details_html: str = confirmation_executor._fetch_confirmation_details_page(conf)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ market –ª–∏—Å—Ç–∏–Ω–≥–æ–º
                    if self._is_market_confirmation_by_details(details_html):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∏–Ω–≥–µ
                        listing_info: Dict[str, str] = self._extract_listing_info(details_html)
                        
                        market_confirmations.append({
                            'id': conf.data_confid,
                            'key': conf.nonce,
                            'creator_id': conf.creator_id,
                            'description': listing_info.get('description', f'Market Listing #{conf.creator_id}'),
                            'item_name': listing_info.get('item_name', 'Unknown Item'),
                            'price': listing_info.get('price', 'Unknown Price'),
                            'confirmation': conf
                        })
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {conf.data_confid}: {e}")
                    continue
            
            return market_confirmations
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {e}")
            return []
    
    def _is_market_confirmation_by_details(self, details_html: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –ª–∏—Å—Ç–∏–Ω–≥–æ–º –ø–æ HTML –¥–µ—Ç–∞–ª—è–º"""
        try:
            # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ market –ª–∏—Å—Ç–∏–Ω–≥–∞ –≤ HTML
            market_indicators: List[str] = [
                'market_listing_price',
                'market_listing_item_name', 
                'market_listing_action',
                'confiteminfo',
                'market_listing_table_header',
                'sell on the community market',
                'market listing',
                'steam community market'
            ]
            
            details_lower: str = details_html.lower()
            
            for indicator in market_indicators:
                if indicator in details_lower:
                    return True
            
            return False
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False
    
    def _extract_listing_info(self, details_html: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∏–Ω–≥–µ –∏–∑ HTML –¥–µ—Ç–∞–ª–µ–π"""
        try:
            info: Dict[str, str] = {}
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML - —É–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON)
            clean_html = re.sub(r'<style[^>]*>.*?</style>', '', details_html, flags=re.DOTALL | re.IGNORECASE)
            clean_html = re.sub(r'<!--.*?-->', '', clean_html, flags=re.DOTALL)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö
            item_name = None
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ–º —Å JSON –¥–∞–Ω–Ω—ã—Ö)
            item_patterns = [
                # JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ BuildHover - —Å–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ
                r'"market_name":\s*"([^"]+)"',
                r'"name":\s*"([^"]+)"',
                r'"market_hash_name":\s*"([^"]+)"',
                
                # HTML —ç–ª–µ–º–µ–Ω—Ç—ã —Å ID
                r'id="confiteminfo_item_name"[^>]*>([^<]+)<',
                r'class="hover_item_name"[^>]*>([^<]+)<',
                
                # Steam market —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                r'market_listing_item_name[^>]*>([^<]+)</[^>]*>',
                r'item_name[^>]*>([^<]+)</[^>]*>',
                r'item[_-]?name[^>]*>([^<]+)</[^>]*>',
                
                # –ü–æ–∏—Å–∫ –≤ div-–∞—Ö —Å –∫–ª–∞—Å—Å–∞–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                r'<div[^>]*class="[^"]*(?:item|name|title)[^"]*"[^>]*>([^<]{5,100})</div>',
                r'<span[^>]*class="[^"]*(?:item|name|title)[^"]*"[^>]*>([^<]{5,100})</span>',
                
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "You want to sell"
                r'You want to sell[^>]*>([^<]{5,100})</',
                r'You want to sell[^<]*([A-Za-z][^<>{]{10,100})(?:You receive|for)',
                
                # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                r'sell\s+([A-Za-z][^<>\n]{10,80}?)\s+(?:for|You receive)',
                r'selling\s+([A-Za-z][^<>\n]{10,80}?)\s+(?:for|You receive)',
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –∏—â–µ–º –ª—é–±–æ–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                r'>([A-Za-z][A-Za-z0-9\s\-\|\(\)]{15,80})</',
            ]
            
            for pattern in item_patterns:
                matches = re.finditer(pattern, clean_html, re.DOTALL | re.IGNORECASE)
                for match in matches:
                    candidate = match.group(1).strip()
                    
                    # –û—á–∏—â–∞–µ–º –æ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ HTML –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    candidate = re.sub(r'<[^>]+>', '', candidate)
                    candidate = re.sub(r'&[a-zA-Z]+;', ' ', candidate)  # HTML entities
                    candidate = re.sub(r'\\u[0-9a-fA-F]{4}', lambda m: chr(int(m.group(0)[2:], 16)), candidate)  # Unicode escape
                    candidate = re.sub(r'\\/', '/', candidate)  # Escaped slashes
                    candidate = re.sub(r'\s+', ' ', candidate).strip()
                    
                    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–∏–º–≤–æ–ª—ã
                    candidate = re.sub(r'^(div|span|class|id|style|script|you|want|sell|receive|for|market|listing)\s*', '', candidate, flags=re.IGNORECASE)
                    candidate = candidate.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                    if (len(candidate) >= 5 and 
                        not candidate.isdigit() and 
                        not re.match(r'^[\d\s\.,]+$', candidate) and  # –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏
                        not candidate.lower() in ['you', 'want', 'sell', 'receive', 'for', 'market', 'listing', 'div', 'span', 'class'] and
                        re.search(r'[a-zA-Z]', candidate) and  # –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—É–∫–≤—ã
                        len(candidate.split()) <= 15):  # —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
                        
                        item_name = candidate
                        break
                
                if item_name:
                    break
            
            if item_name:
                info['item_name'] = item_name
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price = None
            
            price_patterns = [
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Steam - –∏—â–µ–º —Ü–µ–Ω—ã —Å –≤–∞–ª—é—Ç–∞–º–∏
                r'You receive[^>]*>([^<]*[0-9]+[^<]*(?:—Ä—É–±|‚ÇΩ|\$|‚Ç¨|USD|RUB|EUR|p—É–±)[^<]*)</[^>]*>',
                r'You receive[^<]*([0-9]+[,.\s]*[0-9]*\s*(?:—Ä—É–±|‚ÇΩ|\$|‚Ç¨|USD|RUB|EUR|p—É–±))',
                
                # –ü–æ–∏—Å–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö
                r'market_listing_price[^>]*>([^<]*[0-9]+[^<]*)</[^>]*>',
                r'price[^>]*>([^<]*[0-9]+[^<]*)</[^>]*>',
                
                # JSON –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                r'"price":\s*"([^"]*[0-9]+[^"]*)"',
                r'"amount":\s*"([^"]*[0-9]+[^"]*)"',
                
                # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–Ω
                r'([0-9]+[,.\s]*[0-9]*\s*(?:—Ä—É–±|‚ÇΩ|\$|‚Ç¨|USD|RUB|EUR|p—É–±))',
                r'([0-9]{1,6}[,.]?[0-9]{0,2}\s*(?:—Ä—É–±|‚ÇΩ|\$|‚Ç¨))',
            ]
            
            for pattern in price_patterns:
                match = re.search(pattern, clean_html, re.IGNORECASE)
                if match:
                    candidate = match.group(1).strip()
                    # –û—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤
                    candidate = re.sub(r'<[^>]+>', '', candidate)
                    candidate = re.sub(r'&[a-zA-Z]+;', ' ', candidate)  # HTML entities
                    candidate = re.sub(r'\s+', ' ', candidate).strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É
                    if re.search(r'\d', candidate) and len(candidate) <= 50:
                        price = candidate
                        break
            
            if price:
                info['price'] = price
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            item_name_final = info.get('item_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
            price_final = info.get('price', '')
            
            if price_final and item_name_final != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç':
                info['description'] = f"{item_name_final} ‚Üí {price_final}"
            elif item_name_final != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç':
                info['description'] = f"Market: {item_name_final}"
            elif price_final:
                info['description'] = f"Market –æ—Ä–¥–µ—Ä ‚Üí {price_final}"
            else:
                info['description'] = "Market –æ—Ä–¥–µ—Ä"
            
            return info
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∏–Ω–≥–µ: {e}")
            return {'description': 'Market –æ—Ä–¥–µ—Ä', 'item_name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}
    
    def _confirm_market_order(self, steam_client: 'SteamClient', confirmation_data: Dict[str, Any]) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π market –æ—Ä–¥–µ—Ä"""
        try:
            from src.steampy.confirmation import ConfirmationExecutor
            
            # –°–æ–∑–¥–∞–µ–º executor –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            confirmation_executor: 'ConfirmationExecutor' = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation: 'Confirmation' = confirmation_data['confirmation']
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ executor
            response: Dict[str, Any] = confirmation_executor._send_confirmation(confirmation)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if response and response.get('success'):
                return True
            else:
                error_message: str = response.get('error', 'Unknown error') if response else 'No response'
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è market –æ—Ä–¥–µ—Ä–∞: {error_message}")
                return False
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ market –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    
    def _wait_or_stop(self, seconds: int) -> bool:
        """
        –ñ–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, False –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        """
        return self._stop_automation.wait(seconds)
    
    def get_settings(self) -> AutoSettings:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return self.settings
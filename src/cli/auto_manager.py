#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import json
import shutil
import os
import time
import threading
import re
from pathlib import Path
from typing import Dict, Any, Optional, List, TYPE_CHECKING, Protocol
from dataclasses import dataclass, asdict

from src.utils.logger_setup import logger, print_and_log
from .constants import Messages, AutoMenuChoice
from .display_formatter import DisplayFormatter
from src.cli.constants import MenuChoice
from src.cli.menu_base import BaseMenu, NavigableMenu, MenuItem
from src.steampy.confirmation import Confirmation

from src.cli.account_context import AccountContext
from src.cli.display_formatter import DisplayFormatter
from src.utils.logger_setup import logger, print_and_log

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
if TYPE_CHECKING:
    from src.trade_confirmation_manager import TradeConfirmationManager
    from src.steampy.client import SteamClient
    from src.steampy.confirmation import ConfirmationExecutor, Confirmation
    from ..cli_interface import CLIInterface


class CLIContextProtocol(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ CLI –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    trade_manager: 'TradeConfirmationManager'
    cookie_checker: Any
    username: Optional[str]


@dataclass
class AutoSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    check_interval: int = 60
    auto_accept_gifts: bool = False
    auto_confirm_trades: bool = False
    auto_confirm_market: bool = False


@dataclass
class TradeCache:
    """–ö—ç—à –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤"""
    data: Optional[Dict[str, Any]] = None
    timestamp: float = 0
    ttl: int = 15  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
        return self.data is not None and (time.time() - self.timestamp) < self.ttl
    
    def get(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã"""
        return self.data if self.is_valid() else None
    
    def set(self, data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        self.data = data
        self.timestamp = time.time()
    
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        self.data = None
        self.timestamp = 0



class AutoManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –µ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    
    def __init__(self, account_name: str, accounts_dir: str = "accounts_info"):
        self.account_name = account_name
        self.accounts_dir = Path(accounts_dir)
        self.formatter = DisplayFormatter()
        self.settings_file = self.accounts_dir / f"{account_name}_auto_settings.json"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.accounts_dir.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self._load_settings()
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        self._stop_automation = threading.Event()
        self._automation_thread = None
        self._trade_cache = TradeCache()  # –ö—ç—à –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
    
    def _load_settings(self) -> AutoSettings:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.settings_file.exists():
                print_and_log(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ {self.settings_file}")
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings_data = {k: v for k, v in data.items() if not k.startswith('_')}
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                settings = AutoSettings(**settings_data)
                print_and_log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return settings
            else:
                print_and_log("üìù –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_settings = AutoSettings()
                if self._save_settings(default_settings):
                    print_and_log(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.settings_file}")
                return default_settings
        except json.JSONDecodeError as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            print_and_log("üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return AutoSettings()
        except Exception as e:
            print_and_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            print_and_log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return AutoSettings()
    
    def _save_settings(self, settings: AutoSettings) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                data = asdict(settings)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ JSON (—á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏)
                data['_info'] = {
                    'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Steam Bot',
                    'version': '1.0',
                    'created': str(Path(self.settings_file).stat().st_mtime if self.settings_file.exists() else 'now')
                }
                json.dump(data, f, indent=4, ensure_ascii=False)
            
            print_and_log(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.settings_file}")
            return True
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def show_settings(self) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            print_and_log(self.formatter.format_section_header(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è '{self.account_name}'"))
            print_and_log("‚ÑπÔ∏è  –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è")
            print_and_log("")
            
            while True:
                self._display_current_settings()
                print_and_log("")
                print_and_log("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
                print_and_log("1. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫)")
                print_and_log("2. –ê–≤—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤)")
                print_and_log("3. –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–æ–≤ —á–µ—Ä–µ–∑ Guard")
                print_and_log("4. –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –ª–∏—Å—Ç–∏–Ω–≥–æ–≤")
                print_and_log("0. –ù–∞–∑–∞–¥")
                print_and_log("-" * 30)
                
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    self._change_check_interval()
                elif choice == "2":
                    self._toggle_auto_gifts()
                elif choice == "3":
                    self._toggle_auto_confirm()
                elif choice == "4":
                    self._toggle_auto_market()
                else:
                    print_and_log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", "ERROR")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
            return True
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            input(Messages.PRESS_ENTER)
            return False
    
    def _display_current_settings(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print_and_log("üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print_and_log(f"  ‚è±Ô∏è  –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.settings.check_interval} —Å–µ–∫")
        print_and_log(f"  üéÅ –ê–≤—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if self.settings.auto_accept_gifts else '‚ùå'}")
        print_and_log(f"  üîë –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤: {'‚úÖ' if self.settings.auto_confirm_trades else '‚ùå'}")
        print_and_log(f"  üè™ –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –ª–∏—Å—Ç–∏–Ω–≥–æ–≤: {'‚úÖ' if self.settings.auto_confirm_market else '‚ùå'}")
    
    def _change_check_interval(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            print_and_log("")
            print_and_log(f"–¢–µ–∫—É—â–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self.settings.check_interval} —Å–µ–∫—É–Ω–¥")
            print_and_log("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 30-300 —Å–µ–∫—É–Ω–¥ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ)")
            
            new_interval = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (—Å–µ–∫): ").strip()
            
            if not new_interval.isdigit():
                print_and_log("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", "ERROR")
                return
            
            interval = int(new_interval)
            if interval < 10:
                print_and_log("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: 10 —Å–µ–∫—É–Ω–¥", "ERROR")
                return
            elif interval > 3600:
                print_and_log("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)", "ERROR")
                return
            
            self.settings.check_interval = interval
            self._save_settings(self.settings)
            print_and_log(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {interval} —Å–µ–∫—É–Ω–¥")
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏: {e}")
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _toggle_auto_gifts(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤"""
        self.settings.auto_accept_gifts = not self.settings.auto_accept_gifts
        self._save_settings(self.settings)
        status_emoji = "‚úÖ" if self.settings.auto_accept_gifts else "‚ùå"
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if self.settings.auto_accept_gifts else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        print_and_log(f"{status_emoji} –ê–≤—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ {status_text}")
        print_and_log("‚ÑπÔ∏è –ü–æ–¥–∞—Ä–∫–∏ = —Ç—Ä–µ–π–¥—ã –≥–¥–µ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–¥–∞–µ–º, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∞–µ–º")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _toggle_auto_confirm(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤"""
        self.settings.auto_confirm_trades = not self.settings.auto_confirm_trades
        self._save_settings(self.settings)
        status_emoji = "‚úÖ" if self.settings.auto_confirm_trades else "‚ùå"
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if self.settings.auto_confirm_trades else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        print_and_log(f"{status_emoji} –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ {status_text}")
        print_and_log("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –í–°–ï —Ç—Ä–µ–π–¥—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        print_and_log("  üì• –í—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–π–¥—ã (–ø—Ä–∏–Ω—è—Ç—ã–µ, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)")
        print_and_log("  üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–π–¥—ã (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _toggle_auto_market(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è market –ª–∏—Å—Ç–∏–Ω–≥–æ–≤"""
        self.settings.auto_confirm_market = not self.settings.auto_confirm_market
        self._save_settings(self.settings)
        status_emoji = "‚úÖ" if self.settings.auto_confirm_market else "‚ùå"
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if self.settings.auto_confirm_market else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        print_and_log(f"{status_emoji} –ê–≤—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ market –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ {status_text}")
        print_and_log("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç buy/sell –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def run_settings_menu(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."""
        # settings_menu = SettingsMenu(self.settings, self.formatter, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è") # This line was removed
        # settings_menu.run() # This line was removed
        # self._save_settings() # This line was removed
        print_and_log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –º–µ–Ω—é.")
        input(Messages.PRESS_ENTER)

    def start_auto_accept(self, context: AccountContext):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –æ–¥–∏–Ω —Ä–∞–∑.
        –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ MultiAccountAutoManager.
        """
        print_and_log(f"[{self.account_name}] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        self._execute_automation_tasks(context, self.settings)
        print_and_log(f"[{self.account_name}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def _execute_automation_tasks(self, context: AccountContext, settings: AutoSettings):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            print_and_log(f"[{context.account_name}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ cookies...")
            if not context.cookie_checker.ensure_valid_cookies(show_info=False):
                print_and_log(f"[{context.account_name}] ‚ö†Ô∏è Cookies –Ω–µ–≤–∞–ª–∏–¥–Ω—ã. –ü—Ä–æ–ø—É—Å–∫ –∏—Ç–µ—Ä–∞—Ü–∏–∏.")
                return

            print_and_log(f"[{context.account_name}] ‚úÖ Cookies –≤–∞–ª–∏–¥–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–π–¥—ã –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            print_and_log(f"[{context.account_name}] üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤...")
            trade_offers = context.trade_manager.get_trade_offers(active_only=False)
            if not trade_offers:
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            # –ö—ç—à–∏—Ä—É–µ–º —Ç—Ä–µ–π–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–µ—Ç–æ–¥–∞—Ö
            self._trade_cache.set(trade_offers.__dict__)
            
            if settings.auto_accept_gifts:
                print_and_log(f"[{context.account_name}] üéÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤...")
                self._process_free_trades_from_cache(context, trade_offers)

            if settings.auto_confirm_trades:
                print_and_log(f"[{context.account_name}] üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–æ–≤...")
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ trade –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                self._process_trade_confirmations_from_cache(context, trade_offers)

            if settings.auto_confirm_market:
                print_and_log(f"[{context.account_name}] üè™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ç–∞...")
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                self._process_market_confirmations(context)
        
        except Exception as e:
            print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        finally:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self._trade_cache.clear()

    def _process_free_trades_from_cache(self, context: AccountContext, trade_offers):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ (–ø–æ–¥–∞—Ä–∫–æ–≤) –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            active_received = trade_offers.active_received
            if not active_received:
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö üéÅ –ø–æ–¥–∞—Ä–∫–æ–≤")
                return

            print_and_log(f"[{context.account_name}] üéÅ –ù–∞–π–¥–µ–Ω–æ {len(active_received)} –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤")
            
            for trade in active_received:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–µ–π–¥ –ø–æ–¥–∞—Ä–∫–æ–º (–º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–¥–∞–µ–º, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∞–µ–º)
                if trade.items_to_give_count == 0 and trade.items_to_receive_count > 0:
                    print_and_log(f"[{context.account_name}] üéÅ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ (ID: {trade.tradeofferid})")
                    
                    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–µ–π–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
                    partner_account_id = str(trade.accountid_other)
                    if context.trade_manager.accept_trade_offer(trade.tradeofferid, partner_account_id):
                        print_and_log(f"[{context.account_name}] ‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
                        # –î–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ –ù–ï —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Guard
                        print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Guard –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤")
                    else:
                        print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–∞")
                else:
                    print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –¢—Ä–µ–π–¥ {trade.tradeofferid} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–∞—Ä–∫–æ–º (–æ—Ç–¥–∞–µ–º: {trade.items_to_give_count}, –ø–æ–ª—É—á–∞–µ–º: {trade.items_to_receive_count})")

        except Exception as e:
            print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")

    def _process_trade_confirmations_from_cache(self, context: AccountContext, trade_offers):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ç—Ä–µ–π–¥–æ–≤ –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print_and_log(f"[{context.account_name}] üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            confirmation_needed_received = trade_offers.confirmation_needed_received or []
            confirmation_needed_sent = trade_offers.confirmation_needed_sent or []
            
            total_confirmations = len(confirmation_needed_received) + len(confirmation_needed_sent)
            
            if total_confirmations == 0:
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return
            
            print_and_log(f"[{context.account_name}] üîë –ù–∞–π–¥–µ–Ω–æ {total_confirmations} —Ç—Ä–µ–π–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            print_and_log(f"[{context.account_name}]   üì• –í—Ö–æ–¥—è—â–∏–µ: {len(confirmation_needed_received)}")
            print_and_log(f"[{context.account_name}]   üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ: {len(confirmation_needed_sent)}")
            
            confirmed_count = 0
            error_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–π–¥—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            all_trades_to_confirm = confirmation_needed_received + confirmation_needed_sent
            
            for trade in all_trades_to_confirm:
                try:
                    trade_type = "–≤—Ö–æ–¥—è—â–∏–π" if trade in confirmation_needed_received else "–∏—Å—Ö–æ–¥—è—â–∏–π"
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–π–¥–∞
                    print_and_log(f"[{context.account_name}] üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º {trade_type} —Ç—Ä–µ–π–¥ {trade.tradeofferid}")
                    print_and_log(f"[{context.account_name}]    –°–æ—Å—Ç–æ—è–Ω–∏–µ: {trade.state_name}, Confirmation method: {trade.confirmation_method}, Trade ID: {trade.tradeid}")
                    
                    if context.trade_manager.confirm_accepted_trade_offer(trade.tradeofferid):
                        print_and_log(f"[{context.account_name}] ‚úÖ –¢—Ä–µ–π–¥ {trade.tradeofferid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                        confirmed_count += 1
                    else:
                        print_and_log(f"[{context.account_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–µ–π–¥ {trade.tradeofferid}")
                        error_count += 1
                        
                except Exception as e:
                    error_msg = str(e)
                    if "ConfirmationExpected" in error_msg:
                        print_and_log(f"[{context.account_name}] ‚ö†Ô∏è –¢—Ä–µ–π–¥ {trade.tradeofferid} —É–∂–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω)")
                    else:
                        print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞ {trade.tradeofferid}: {e}")
                    error_count += 1
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print_and_log(f"[{context.account_name}] üìä –ò—Ç–æ–≥–æ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {confirmed_count}, –æ—à–∏–±–æ–∫ {error_count}")

        except Exception as e:
            print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ç—Ä–µ–π–¥–æ–≤: {e}")

    def _process_free_trades(self, context: AccountContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ (–ø–æ–¥–∞—Ä–∫–æ–≤) - DEPRECATED, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _process_free_trades_from_cache"""
        try:
            trade_offers = context.trade_manager.get_trade_offers(active_only=True)
            if not trade_offers:
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return

            active_received = trade_offers.active_received
            if not active_received:
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤")
                return

            print_and_log(f"[{context.account_name}] üéÅ –ù–∞–π–¥–µ–Ω–æ {len(active_received)} –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤")
            
            for trade in active_received:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–µ–π–¥ –ø–æ–¥–∞—Ä–∫–æ–º (–º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–¥–∞–µ–º, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∞–µ–º)
                if trade.items_to_give_count == 0 and trade.items_to_receive_count > 0:
                    print_and_log(f"[{context.account_name}] üéÅ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ (ID: {trade.tradeofferid})")
                    
                    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–µ–π–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    if context.trade_manager.accept_trade_offer(trade.tradeofferid):
                        print_and_log(f"[{context.account_name}] ‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
                        
                        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ Guard
                        if self.settings.auto_confirm_trades:
                            print_and_log(f"[{context.account_name}] üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ Guard...")
                            if context.trade_manager.confirm_accepted_trade_offer(trade.tradeofferid):
                                print_and_log(f"[{context.account_name}] ‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Guard")
                            else:
                                print_and_log(f"[{context.account_name}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ Guard")
                    else:
                        print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–∞")
                else:
                    print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –¢—Ä–µ–π–¥ {trade.tradeofferid} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–∞—Ä–∫–æ–º (–æ—Ç–¥–∞–µ–º: {trade.items_to_give_count}, –ø–æ–ª—É—á–∞–µ–º: {trade.items_to_receive_count})")

        except Exception as e:
            print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")

    def _process_trade_confirmations(self, context: AccountContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ç—Ä–µ–π–¥–æ–≤ (–≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ) - DEPRECATED, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ _process_trade_confirmations_from_cache"""
        try:
            print_and_log(f"[{context.account_name}] üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–π–¥—ã
            stats = context.trade_manager.process_confirmation_needed_trades(auto_confirm=True)
            
            if stats['found_confirmation_needed'] > 0:
                print_and_log(f"[{context.account_name}] ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stats['confirmed_trades']} —Ç—Ä–µ–π–¥–æ–≤ –∏–∑ {stats['found_confirmation_needed']}")
                if stats['errors'] > 0:
                    print_and_log(f"[{context.account_name}] ‚ö†Ô∏è –û—à–∏–±–æ–∫: {stats['errors']}")
            else:
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

        except Exception as e:
            print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ç—Ä–µ–π–¥–æ–≤: {e}")

    def _process_market_confirmations(self, context: AccountContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞"""
        try:
            from src.cli.market_handler import MarketHandler
            
            market_handler = MarketHandler(
                context.trade_manager,
                self.formatter,
                context.cookie_checker
            )
            
            print_and_log(f"[{context.account_name}] üè™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞...")
            print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –§–∏–ª—å—Ç—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ market –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ª–∏—Å—Ç–∏–Ω–≥–∏ –∏ –ø–æ–∫—É–ø–∫–∏)")
            result = market_handler.confirm_all_market_orders()
            
            if result:
                print_and_log(f"[{context.account_name}] ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            else:
                print_and_log(f"[{context.account_name}] ‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        except Exception as e:
            print_and_log(f"[{context.account_name}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∞: {e}")
    
    def _wait_or_stop(self, seconds: int) -> bool:
        """
        –ñ–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, False –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        """
        return self._stop_automation.wait(seconds)
    
    def get_settings(self) -> AutoSettings:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return self.settings
#!/usr/bin/env python3
"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

from typing import List, Dict, Any
from datetime import datetime

from .constants import Formatting, Messages
from ..models import TradeOffer


class DisplayFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞"""
    
    @staticmethod
    def format_header(title: str, username: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        if username:
            full_title = f"{title} - {username}"
        else:
            full_title = title
        
        return f"\n{Formatting.SEPARATOR}\n{full_title}\n{Formatting.SEPARATOR}"
    
    @staticmethod
    def format_section_header(title: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        return f"\n{title}\n{Formatting.SHORT_LINE}"
    
    @staticmethod
    def format_trade_type(trade: TradeOffer) -> tuple[str, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–∞
        
        Returns:
            tuple: (—Ç–∏–ø_—ç–º–æ–¥–∑–∏, –æ–ø–∏—Å–∞–Ω–∏–µ)
        """
        if trade.items_to_give_count == 0 and trade.items_to_receive_count > 0:
            return Formatting.GIFT, f"–ü–û–î–ê–†–û–ö (–ø–æ–ª—É—á–∞–µ–º {trade.items_to_receive_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)"
        elif trade.items_to_give_count > 0 and trade.items_to_receive_count == 0:
            return Formatting.GIVE_AWAY, f"–û–¢–î–ê–ß–ê (–æ—Ç–¥–∞–µ–º {trade.items_to_give_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)"
        else:
            return Formatting.EXCHANGE, f"–û–ë–ú–ï–ù (–æ—Ç–¥–∞–µ–º {trade.items_to_give_count}, –ø–æ–ª—É—á–∞–µ–º {trade.items_to_receive_count})"
    
    @staticmethod
    def format_trade_direction(trade: TradeOffer, received_trades: List[TradeOffer]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞"""
        return Formatting.INCOMING if trade in received_trades else Formatting.OUTGOING
    
    @staticmethod
    def format_single_trade(trade: TradeOffer, index: int, received_trades: List[TradeOffer] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ç—Ä–µ–π–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            trade: –¢—Ä–µ–π–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            index: –ù–æ–º–µ—Ä —Ç—Ä–µ–π–¥–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            received_trades: –°–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞
        if received_trades is not None:
            direction = DisplayFormatter.format_trade_direction(trade, received_trades)
            direction_text = "–í—Ö–æ–¥—è—â–∏–π" if direction == Formatting.INCOMING else "–ò—Å—Ö–æ–¥—è—â–∏–π"
        else:
            direction = Formatting.EXCHANGE
            direction_text = "–û–±–º–µ–Ω"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–π–¥–∞
        type_emoji, type_description = DisplayFormatter.format_trade_type(trade)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        result = f"  {index:2d}. {direction} {direction_text} | ID: {trade.tradeofferid}\n"
        result += f"      {type_emoji} {type_description}\n"
        result += f"      –ü–∞—Ä—Ç–Ω–µ—Ä: {trade.accountid_other}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(trade, 'time_created') and trade.time_created:
            result += f" | –°–æ–∑–¥–∞–Ω: {trade.time_created}"
        
        return result
    
    @staticmethod
    def format_trades_list(trades: List[TradeOffer], received_trades: List[TradeOffer] = None, 
                          title: str = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–π–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤
        
        Args:
            trades: –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤
            received_trades: –°–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        """
        if not trades:
            return f"\nüìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –ø—É—Å—Ç\n‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–ø—É–Ω–∫—Ç 2)"
        
        result = f"\nüìã {title} ({len(trades)}):\n{Formatting.LINE}\n"
        
        for i, trade in enumerate(trades, 1):
            result += DisplayFormatter.format_single_trade(trade, i, received_trades) + "\n\n"
        
        return result.rstrip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ
    
    @staticmethod
    def format_stats(stats: Dict[str, int], title: str = "–†–µ–∑—É–ª—å—Ç–∞—Ç") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        result = f"üìä {title}:\n"
        
        for key, value in stats.items():
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª—é—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            key_translations = {
                'found_free_trades': 'üéÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤',
                'accepted_trades': '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ',
                'confirmed_trades': 'üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', 
                'found_confirmation_needed': 'üîë –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                'errors': '‚ùå –û—à–∏–±–æ–∫'
            }
            
            translated_key = key_translations.get(key, key)
            result += f"  {translated_key}: {value}\n"
        
        return result.rstrip()
    
    @staticmethod
    def format_cookies_info(cookies: Dict[str, str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ cookies"""
        from .constants import Config
        
        result = f"{Messages.COOKIES_UPDATED.format(count=len(cookies))}\n"
        
        for cookie_name in Config.IMPORTANT_COOKIES:
            if cookie_name in cookies:
                value = cookies[cookie_name][:15] + "..." if len(cookies[cookie_name]) > 15 else cookies[cookie_name]
                result += f"   üìÑ {cookie_name}: {value}\n"
        
        return result.rstrip()
    
    @staticmethod
    def format_error(message: str, error: Exception = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        result = f"{Messages.ERROR} {message}"
        if error:
            result += f": {error}"
        return result
    
    @staticmethod
    def format_success(message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        return f"{Messages.SUCCESS} {message}"
    
    @staticmethod
    def format_info(message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"{Messages.INFO} {message}"
    
    @staticmethod
    def format_warning(message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        return f"{Messages.WARNING} {message}" 
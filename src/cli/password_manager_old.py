#  –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ https://github.com/sometastycake/steam-password-change/blob/master/steampassword/chpassword.py
#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
import base64
import time
from typing import Optional, Dict, Any, Union
from .constants import Messages
from .display_formatter import DisplayFormatter
from src.utils.logger_setup import print_and_log
from src.cli.account_context import AccountContext
from src.steampy.client import SteamClient
from src.steampy.confirmation import ConfirmationExecutor


class PasswordManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ https://github.com/sometastycake/steam-password-change/blob/master/steampassword/chpassword.py
    """
    
    def __init__(self) -> None:
        self.formatter: DisplayFormatter = DisplayFormatter()
    
    def change_password(self, account_context: AccountContext) -> bool:
        """
        –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è Steam –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω
        """
        try:
            print_and_log(self.formatter.format_section_header("üîí –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"))
            print_and_log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –º–æ–∂–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞!")
            print_and_log("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Steam Guard")
            print_and_log("")
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä PasswordChanger
            password_changer: PasswordChanger = PasswordChanger(account_context)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
            return password_changer.execute()
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return False
    
    def validate_password_strength(self, password: str) -> Dict[str, Union[bool, int, list]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        
        Args:
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        result: Dict[str, Union[bool, int, list]] = {
            'is_valid': True,
            'score': 0,
            'issues': []
        }
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        if len(password) < 8:
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
            result['is_valid'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±—É–∫–≤
        if not any(c.isalpha() for c in password):
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã")
            result['is_valid'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–∏—Ñ—Ä
        if not any(c.isdigit() for c in password):
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã")
            result['is_valid'] = False
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        if len(password) >= 12:
            result['score'] += 2
        elif len(password) >= 8:
            result['score'] += 1
            
        if any(c.isupper() for c in password):
            result['score'] += 1
            
        if any(c.islower() for c in password):
            result['score'] += 1
            
        if any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
            result['score'] += 2
            
        return result


class PasswordChanger:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è Steam –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API"""
    
    BROWSER = (
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/'
        '537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'
    )
    
    def __init__(self, account_context: AccountContext) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏ –∏ —Å–µ—Å—Å–∏–µ–π
        """
        self.account_context: AccountContext = account_context
        self.formatter: DisplayFormatter = DisplayFormatter()
        self.username: str = account_context.account_name
        self.steam_client: Optional[SteamClient] = None
        
    def execute(self) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω
        """
        try:
            print_and_log(f"üîí –ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {self.username}")
            print_and_log("")
            
            # –ü–æ–ª—É—á–∞–µ–º Steam –∫–ª–∏–µ–Ω—Ç
            self.steam_client = self.account_context.cookie_manager.get_steam_client()
            if not self.steam_client:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Steam –∫–ª–∏–µ–Ω—Ç", "ERROR")
                return False
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
            if not self._verify_current_password(""):
                print_and_log("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", "ERROR")
                return False
            
            # –®–∞–≥ 1.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Steam Guard –¥–∞–Ω–Ω—ã—Ö
            if not self._verify_steam_guard_data():
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Steam Guard", "ERROR")
                return False
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
            new_password: Optional[str] = self._get_new_password()
            if not new_password:
                return False
            
            # –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã
            if not self._confirm_password_change():
                return False
            
            # –®–∞–≥ 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API
            if self._perform_password_change_via_api(new_password):
                # –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if self._update_configuration(new_password):
                    print_and_log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
                    print_and_log("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ config.yaml!")
                    return True
                else:
                    print_and_log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
                    return False
            else:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    
    def _get_new_password(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        print_and_log("")
        print_and_log("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        print_and_log("üí° –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:")
        print_and_log("  ‚Ä¢ –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
        print_and_log("  ‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã")
        print_and_log("  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        print_and_log("")
        
        while True:
            new_password: str = input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
            
            if not new_password:
                print_and_log("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", "ERROR")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
            validation: Dict[str, Union[bool, int, list]] = self._validate_password(new_password)
            if not validation['is_valid']:
                print_and_log("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:")
                for issue in validation['issues']:
                    print_and_log(f"  ‚Ä¢ {issue}")
                continue
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            confirm_password: str = input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
            if new_password != confirm_password:
                print_and_log("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", "ERROR")
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            score: int = validation['score']
            if score >= 4:
                print_and_log("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            elif score >= 2:
                print_and_log("‚ö†Ô∏è  –ü–∞—Ä–æ–ª—å —Å—Ä–µ–¥–Ω–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
            else:
                print_and_log("‚ö†Ô∏è  –°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å, –Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
            
            return new_password
    
    def _confirm_password_change(self) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""
        print_and_log("")
        print_and_log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:")
        print_and_log("  ‚Ä¢ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –º–æ–∂–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
        print_and_log("  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Steam Guard")
        print_and_log("  ‚Ä¢ –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        print_and_log("")
        
        while True:
            choice: str = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è? (y/N): ").lower().strip()
            if choice in ('y', 'yes', '–¥–∞', '–¥'):
                return True
            elif choice in ('n', 'no', '–Ω–µ—Ç', '–Ω', ''):
                print_and_log("–û—Ç–º–µ–Ω–µ–Ω–æ.")
                return False
            else:
                print_and_log("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã", "ERROR")
    
    def _verify_current_password(self, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è"""
        try:
            print_and_log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
            if self.steam_client.is_session_alive():
                print_and_log("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
                return True
            else:
                print_and_log("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                return False
                    
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}", "ERROR")
            return False
    
    def _verify_steam_guard_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö Steam Guard"""
        try:
            print_and_log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Steam Guard...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ steam_guard (mafile)
            if not self.steam_client.steam_guard:
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Steam Guard (mafile –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)")
                return False
            
            identity_secret = self.steam_client.steam_guard.get('identity_secret', '')
            account_config = self.account_context.config_manager.accounts_settings.get(self.username, {})
            steam_id = account_config.get('steam_id', '')
            
            if not identity_secret:
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç identity_secret –≤ mafile")
                return False
            
            if not steam_id:
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç steamid –≤ mafile")
                return False
            
            print_and_log("‚úÖ –î–∞–Ω–Ω—ã–µ Steam Guard –Ω–∞–π–¥–µ–Ω—ã")
            return True
                    
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Steam Guard –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
            return False
    
    def _validate_password(self, password: str) -> Dict[str, Union[bool, int, list]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        result: Dict[str, Union[bool, int, list]] = {
            'is_valid': True,
            'score': 0,
            'issues': []
        }
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        if len(password) < 8:
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
            result['is_valid'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±—É–∫–≤
        if not any(c.isalpha() for c in password):
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã")
            result['is_valid'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–∏—Ñ—Ä
        if not any(c.isdigit() for c in password):
            result['issues'].append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã")
            result['is_valid'] = False
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        if len(password) >= 12:
            result['score'] += 2
        elif len(password) >= 8:
            result['score'] += 1
            
        if any(c.isupper() for c in password):
            result['score'] += 1
            
        if any(c.islower() for c in password):
            result['score'] += 1
            
        if any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
            result['score'] += 2
            
        return result
    
    def _perform_password_change_via_api(self, new_password: str) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Steam API"""
        try:
            print_and_log("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Steam API...")
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
            params = self._get_password_change_params()
            if not params:
                return False
            
            # –®–∞–≥ 2: –í—Ö–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            if not self._login_info_enter_code(params):
                return False
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if not self._send_recovery_code(params):
                return False
            
            # –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            print_and_log("üì± –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...")
            print_and_log("üí° –û—Ç–∫—Ä–æ–π—Ç–µ Steam Guard –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è")
            
            if not self._handle_mobile_confirmation(params):
                return False
            
            # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if not self._poll_account_recovery_confirmation(params):
                return False
            
            # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if not self._verify_account_recovery_code(params):
                return False
            
            # –®–∞–≥ 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            if not self._account_recovery_get_next_step(params):
                return False
            
            # –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è
            if not self._verify_old_password(params):
                return False
            
            # –®–∞–≥ 9: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
            if not self._set_new_password(params, new_password):
                return False
            
            print_and_log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ Steam API")
            return True
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    def _get_password_change_params(self) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""
        try:
            print_and_log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
            # –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
            params = {
                's': '1',  # session ID
                'account': self.username,
                'reset': '1',
                'lost': '2',
                'issueid': '0'
            }
            
            print_and_log("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≥–æ—Ç–æ–≤—ã")
            print_and_log(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            return params
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}", "ERROR")
            return None
    
    def _login_info_enter_code(self, params: Dict[str, str]) -> bool:
        """–í—Ö–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
        try:
            print_and_log("üîç –í—Ö–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞...")
            
            url = "https://help.steampowered.com/en/wizard/HelpWithLoginInfoEnterCode"
            response = self.steam_client._session.get(
                url,
                params={
                    's': params['s'],
                    'account': params['account'],
                    'reset': params['reset'],
                    'lost': params['lost'],
                    'issueid': params['issueid'],
                    'sessionid': self.steam_client._get_session_id(),
                    'wizard_ajax': '1',
                    'gamepad': '0',
                },
                headers={
                    'Accept': '*/*',
                    'X-Requested-With': 'XMLHttpRequest',
                    'User-Agent': self.BROWSER,
                    'Referer': 'https://help.steampowered.com/wizard/HelpChangePassword?redir=store/account/',
                }
            )
            
            if response.status_code == 200:
                print_and_log("‚úÖ –í—Ö–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                return True
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print_and_log(f"üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}", "ERROR")
            return False
    
    def _send_recovery_code(self, params: Dict[str, str]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            print_and_log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            url = "https://help.steampowered.com/en/wizard/AjaxSendAccountRecoveryCode"
            data = {
                'sessionid': self.steam_client._get_session_id(),
                'wizard_ajax': '1',
                'gamepad': '0',
                's': params['s'],
                'method': '8',
                'link': '',
            }
            
            response = self.steam_client._session.post(
                url,
                data=data,
                headers={
                    'Accept': '*/*',
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Origin': 'https://help.steampowered.com',
                    'X-Requested-With': 'XMLHttpRequest',
                    'User-Agent': self.BROWSER,
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print_and_log("‚úÖ –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    return True
                else:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {result.get('errorMsg', 'Unknown error')}")
                    return False
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}", "ERROR")
            return False
    
    def _handle_mobile_confirmation(self, params: Dict[str, str]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        try:
            print_and_log("üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...")
            print_and_log("üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è –≤ Steam Guard")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ steam_guard (mafile)
            if not self.steam_client.steam_guard:
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Steam Guard (mafile –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)")
                return False
            
            identity_secret = self.steam_client.steam_guard.get('identity_secret', '')
            account_config = self.account_context.config_manager.accounts_settings.get(self.username, {})
            steam_id = account_config.get('steam_id', '')
            
            if not identity_secret or not steam_id:
                print_and_log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Steam Guard (identity_secret –∏–ª–∏ steamid –≤ mafile)")
                return False
            
            # –°–æ–∑–¥–∞–µ–º ConfirmationExecutor
            confirmation_executor = ConfirmationExecutor(
                identity_secret=identity_secret,
                my_steam_id=steam_id,
                session=self.steam_client._session
            )
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            for attempt in range(10):  # 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 3 —Å–µ–∫—É–Ω–¥—ã
                time.sleep(3)
                print_and_log(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è... –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    confirmations = confirmation_executor._get_confirmations()
                    
                    # –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –ø–æ creator_id (params['s'])
                    creator_id = params.get('s', '')
                    if creator_id:
                        try:
                            creator_id_int = int(creator_id)
                            # –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º creator_id
                            for confirmation in confirmations:
                                if confirmation.creator_id == creator_id_int:
                                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
                                    result = confirmation_executor._send_confirmation(confirmation)
                                    if result.get('success'):
                                        print_and_log("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                        return True
                                    else:
                                        print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result}")
                        except ValueError:
                            print_and_log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç creator_id")
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                    print_and_log("‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å...")
                    
                except Exception as e:
                    print_and_log(f"‚è≥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {e}")
                    continue
            
            print_and_log("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥")
            return False
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}", "ERROR")
            return False
    
    def _poll_account_recovery_confirmation(self, params: Dict[str, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            print_and_log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            url = "https://help.steampowered.com/en/wizard/AjaxPollAccountRecoveryConfirmation"
            data = {
                'sessionid': self.steam_client._get_session_id(),
                'wizard_ajax': '1',
                's': params['s'],
                'reset': params['reset'],
                'lost': params['lost'],
                'method': '8',
                'issueid': params['issueid'],
                'gamepad': '0',
            }
            
            response = self.steam_client._session.post(
                url,
                data=data,
                headers={
                    'Accept': '*/*',
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Origin': 'https://help.steampowered.com',
                    'User-Agent': self.BROWSER,
                    'X-Requested-With': 'XMLHttpRequest',
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if not result.get('errorMsg'):
                    print_and_log("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ")
                    return True
                else:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result.get('errorMsg')}")
                    return False
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}", "ERROR")
            return False
    
    def _verify_account_recovery_code(self, params: Dict[str, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            print_and_log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            url = "https://help.steampowered.com/en/wizard/AjaxVerifyAccountRecoveryCode"
            response = self.steam_client._session.get(
                url,
                params={
                    'code': '',
                    's': params['s'],
                    'reset': params['reset'],
                    'lost': params['lost'],
                    'method': '8',
                    'issueid': params['issueid'],
                    'sessionid': self.steam_client._get_session_id(),
                    'wizard_ajax': '1',
                    'gamepad': '0',
                },
                headers={
                    'Accept': '*/*',
                    'User-Agent': self.BROWSER,
                    'X-Requested-With': 'XMLHttpRequest',
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if not result.get('errorMsg'):
                    print_and_log("‚úÖ –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω")
                    return True
                else:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {result.get('errorMsg')}")
                    return False
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {e}", "ERROR")
            return False
    
    def _account_recovery_get_next_step(self, params: Dict[str, str]) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            print_and_log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞...")
            
            url = "https://help.steampowered.com/en/wizard/AjaxAccountRecoveryGetNextStep"
            data = {
                'sessionid': self.steam_client._get_session_id(),
                'wizard_ajax': '1',
                's': params['s'],
                'account': params['account'],
                'reset': params['reset'],
                'issueid': params['issueid'],
                'lost': '2',
            }
            
            response = self.steam_client._session.post(
                url,
                data=data,
                headers={
                    'Accept': '*/*',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Origin': 'https://help.steampowered.com',
                    'User-Agent': self.BROWSER,
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if not result.get('errorMsg'):
                    print_and_log("‚úÖ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ–ª—É—á–µ–Ω")
                    return True
                else:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–≥–∞: {result.get('errorMsg')}")
                    return False
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–≥–∞: {e}", "ERROR")
            return False
    
    def _verify_old_password(self, params: Dict[str, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        try:
            print_and_log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            account_config = self.account_context.config_manager.accounts_settings.get(self.username, {})
            current_password = account_config.get('password', '')
            if not current_password:
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º RSA –∫–ª—é—á
            rsa_key = self._get_rsa_key()
            if not rsa_key:
                return False
            
            # –®–∏—Ñ—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            encrypted_password = self._encrypt_password(current_password, rsa_key['mod'], rsa_key['exp'])
            
            url = "https://help.steampowered.com/en/wizard/AjaxAccountRecoveryVerifyPassword/"
            data = {
                'sessionid': self.steam_client._get_session_id(),
                's': params['s'],
                'lost': '2',
                'reset': '1',
                'password': encrypted_password,
                'rsatimestamp': rsa_key['timestamp'],
            }
            
            response = self.steam_client._session.post(
                url,
                data=data,
                headers={
                    'Accept': '*/*',
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Origin': 'https://help.steampowered.com',
                    'X-Requested-With': 'XMLHttpRequest',
                    'User-Agent': self.BROWSER,
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if not result.get('errorMsg'):
                    print_and_log("‚úÖ –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–æ–≤–µ—Ä–µ–Ω")
                    return True
                else:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è: {result.get('errorMsg')}")
                    return False
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    

    
    def _set_new_password(self, params: Dict[str, str], new_password: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        try:
            print_and_log("üîê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
            if not self._check_password_available(new_password):
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º RSA –∫–ª—é—á
            rsa_key = self._get_rsa_key()
            if not rsa_key:
                return False
            
            # –®–∏—Ñ—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            encrypted_password = self._encrypt_password(new_password, rsa_key['mod'], rsa_key['exp'])
            
            url = "https://help.steampowered.com/ru/wizard/AjaxAccountRecoveryChangePassword/"
            data = {
                'sessionid': self.steam_client._get_session_id(),
                'wizard_ajax': '1',
                's': params['s'],
                'account': params['account'],
                'password': encrypted_password,
                'rsatimestamp': rsa_key['timestamp'],
            }
            
            response = self.steam_client._session.post(
                url,
                data=data,
                headers={
                    'Accept': '*/*',
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Origin': 'https://help.steampowered.com',
                    'X-Requested-With': 'XMLHttpRequest',
                    'User-Agent': self.BROWSER,
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if not result.get('errorMsg'):
                    print_and_log("‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
                else:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {result.get('errorMsg')}")
                    return False
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    def _get_rsa_key(self) -> Optional[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ RSA –∫–ª—é—á–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            url = "https://help.steampowered.com/en/login/getrsakey/"
            data = {
                'sessionid': self.steam_client._get_session_id(),
                'username': self.username,
            }
            
            response = self.steam_client._session.post(
                url,
                data=data,
                headers={
                    'Accept': '*/*',
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Origin': 'https://help.steampowered.com',
                    'X-Requested-With': 'XMLHttpRequest',
                    'User-Agent': self.BROWSER,
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if not result.get('errorMsg'):
                    return {
                        'mod': result.get('publickey_mod', ''),
                        'exp': result.get('publickey_exp', ''),
                        'timestamp': result.get('timestamp', '')
                    }
                else:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSA –∫–ª—é—á–∞: {result.get('errorMsg')}")
                    return None
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSA –∫–ª—é—á–∞: {e}", "ERROR")
            return None
    
    def _encrypt_password(self, password: str, mod: str, exp: str) -> str:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é RSA"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É rsa
            import rsa
            
            publickey_exp = int(exp, 16)
            publickey_mod = int(mod, 16)
            public_key = rsa.PublicKey(n=publickey_mod, e=publickey_exp)
            
            encrypted_password = rsa.encrypt(
                message=password.encode('ascii'),
                pub_key=public_key,
            )
            encrypted_password64 = base64.b64encode(encrypted_password)
            return str(encrypted_password64, 'utf8')
            
        except ImportError:
            print_and_log("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ rsa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "ERROR")
            return ""
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return ""
    
    def _check_password_available(self, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
        try:
            url = "https://help.steampowered.com/en/wizard/AjaxCheckPasswordAvailable/"
            data = {
                'sessionid': self.steam_client._get_session_id(),
                'wizard_ajax': '1',
                'password': password,
            }
            
            response = self.steam_client._session.post(
                url,
                data=data,
                headers={
                    'Origin': 'https://help.steampowered.com',
                    'User-Agent': self.BROWSER,
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('available'):
                    print_and_log("‚úÖ –ü–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print_and_log("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return False
            else:
                print_and_log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è: {e}", "ERROR")
            return False
    
    def _update_configuration(self, new_password: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º"""
        try:
            print_and_log("üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º config_manager –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            config_manager = self.account_context.config_manager
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_manager.set('password', new_password)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_manager.save_config()
            
            print_and_log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "ERROR")
            return False 
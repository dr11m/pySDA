#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
"""

from typing import Dict, List, Optional, Any
from .constants import Messages, Formatting
from .display_formatter import DisplayFormatter
from src.utils.logger_setup import print_and_log


class TradeActionHandler:
    """–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–µ–π–¥–∞–º–∏"""
    
    def __init__(self, trade_manager, display_formatter: DisplayFormatter, cookie_checker=None):
        self.trade_manager = trade_manager
        self.formatter = display_formatter
        self.cookie_checker = cookie_checker
    
    def _print_section_header(self, title: str):
        """–í—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        print_and_log(f"\n{title}")
        print_and_log(Formatting.SHORT_LINE)
    
    def _print_stats(self, stats: Dict[str, int], title: str = "–†–µ–∑—É–ª—å—Ç–∞—Ç"):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats_display = self.formatter.format_stats(stats, title)
        print_and_log(stats_display)


class GiftAcceptHandler(TradeActionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤"""
    
    def execute(self) -> Dict[str, int]:
        """–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏"""
        try:
            self._print_section_header("üéÅ –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤...")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º cookies –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
            if self.cookie_checker and not self.cookie_checker.ensure_valid_cookies():
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ cookies", "ERROR")
                return {'errors': 1}
            
            stats = self.trade_manager.process_free_trades(
                auto_accept=True,
                auto_confirm=False  # –°–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º
            )
            
            self._print_stats(stats)
            return stats
            
        except Exception as e:
            print_and_log(self.formatter.format_error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤", e), "ERROR")
            return {'errors': 1}


class TradeConfirmHandler(TradeActionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ —á–µ—Ä–µ–∑ Guard"""
    
    def execute(self) -> Dict[str, int]:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–π–¥—ã —á–µ—Ä–µ–∑ Guard"""
        try:
            self._print_section_header("üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ —á–µ—Ä–µ–∑ Guard...")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º cookies –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
            if self.cookie_checker and not self.cookie_checker.ensure_valid_cookies():
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ cookies", "ERROR")
                return {'errors': 1}
            
            stats = self.trade_manager.process_confirmation_needed_trades(
                auto_confirm=True
            )
            
            self._print_stats(stats)
            return stats
            
        except Exception as e:
            print_and_log(self.formatter.format_error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤", e), "ERROR")
            return {'errors': 1}


class SpecificTradeHandler(TradeActionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç—Ä–µ–π–¥–∞–º–∏"""
    
    def __init__(self, trade_manager, display_formatter: DisplayFormatter, trades_cache: List, cookie_checker=None):
        super().__init__(trade_manager, display_formatter, cookie_checker)
        self.trades_cache = trades_cache
    
    def display_trades_list(self):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤"""
        trades_display = self.formatter.format_trades_list(self.trades_cache)
        print_and_log(trades_display)
    
    def get_trade_number(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç—Ä–µ–π–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.trades_cache:
            print_and_log("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤", "ERROR")
            return None
        
        self.display_trades_list()
        
        try:
            trade_num = int(input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–π–¥–∞ (1-{len(self.trades_cache)}): "))
            if 1 <= trade_num <= len(self.trades_cache):
                return trade_num
            else:
                print_and_log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–π–¥–∞. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{len(self.trades_cache)}", "ERROR")
                return None
        except ValueError:
            print_and_log("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", "ERROR")
            return None
    
    def accept_specific_trade(self, trade_number: int) -> bool:
        """–ü—Ä–∏–Ω—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–π–¥"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º cookies –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
            if self.cookie_checker and not self.cookie_checker.ensure_valid_cookies():
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ cookies", "ERROR")
                return False
            
            trade = self.trades_cache[trade_number - 1]
            trade_id = trade.tradeofferid
            
            print_and_log(f"\n‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥–∞ #{trade_number} (ID: {trade_id})...")
            print_and_log(Formatting.SHORT_LINE)
            
            # –®–∞–≥ 1: –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–µ–π–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            print_and_log("üåê –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–µ–π–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ...")
            if self.trade_manager.accept_trade_offer(trade_id):
                print_and_log(f"‚úÖ –¢—Ä–µ–π–¥ {trade_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
                
                # –®–∞–≥ 2: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Guard
                from .constants import Messages
                confirm = input(f"\n{Messages.CONFIRM_GUARD}").lower().strip()
                if confirm in ['y', 'yes', '–¥–∞', '–¥']:
                    print_and_log("üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Guard...")
                    if self.trade_manager.confirm_accepted_trade_offer(trade_id):
                        print_and_log("‚úÖ –¢—Ä–µ–π–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Guard")
                    else:
                        print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–µ–π–¥ —á–µ—Ä–µ–∑ Guard", "ERROR")
                else:
                    print_and_log("‚ÑπÔ∏è –¢—Ä–µ–π–¥ –ø—Ä–∏–Ω—è—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Guard")
                
                return True
            else:
                print_and_log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Ç—Ä–µ–π–¥ {trade_id} –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ", "ERROR")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç—Ä–µ–π–¥–∞: {e}", "ERROR")
            return False
    
    def decline_specific_trade(self, trade_number: int) -> bool:
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–π–¥"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º cookies –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
            if self.cookie_checker and not self.cookie_checker.ensure_valid_cookies():
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ cookies", "ERROR")
                return False
            
            trade = self.trades_cache[trade_number - 1]
            trade_id = trade.tradeofferid
            
            print_and_log(f"\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ #{trade_number} (ID: {trade_id})...")
            
            if self.trade_manager.decline_trade_offer(trade_id):
                print_and_log(f"‚úÖ –¢—Ä–µ–π–¥ {trade_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                return True
            else:
                print_and_log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–µ–π–¥ {trade_id}.", "ERROR")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞: {e}", "ERROR")
            return False
    
    def confirm_specific_trade(self, trade_number: int) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–π–¥ —á–µ—Ä–µ–∑ Guard"""
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º cookies –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
            if self.cookie_checker and not self.cookie_checker.ensure_valid_cookies():
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ cookies", "ERROR")
                return False
            
            trade = self.trades_cache[trade_number - 1]
            trade_id = trade.tradeofferid
            
            print_and_log(f"\nüîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ #{trade_number} —á–µ—Ä–µ–∑ Guard (ID: {trade_id})...")
            print_and_log(Formatting.SHORT_LINE)
            
            if self.trade_manager.confirm_accepted_trade_offer(trade_id):
                print_and_log(f"‚úÖ –¢—Ä–µ–π–¥ {trade_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Guard")
                return True
            else:
                print_and_log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–µ–π–¥ {trade_id} —á–µ—Ä–µ–∑ Guard", "ERROR")
                return False
                
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞: {e}", "ERROR")
            return False


class TradeCheckHandler(TradeActionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–π–¥–æ–≤"""
    
    def has_any_unfinished_trades(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª—é–±—ã—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤"""
        try:
            trade_offers = self.trade_manager.get_trade_offers(active_only=False)
            if not trade_offers:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
            unfinished_trades = []
            unfinished_trades.extend(trade_offers.active_received)
            unfinished_trades.extend(trade_offers.active_sent)
            unfinished_trades.extend(trade_offers.confirmation_needed_received)
            unfinished_trades.extend(trade_offers.confirmation_needed_sent)
            
            return len(unfinished_trades) > 0
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤: {e}", "ERROR")
            return False
    
    def has_guard_confirmation_needed_trades(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö Guard –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            trade_offers = self.trade_manager.get_trade_offers(active_only=False)
            if not trade_offers:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–π–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ Guard –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            guard_needed_trades = []
            guard_needed_trades.extend(trade_offers.confirmation_needed_received)
            guard_needed_trades.extend(trade_offers.confirmation_needed_sent)
            
            return len(guard_needed_trades) > 0
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è Guard: {e}", "ERROR")
            return False


class MarketListHandler(SpecificTradeHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ç—Ä–µ–π–¥–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É"""

    def run(self, trades: List) -> bool:
        self.trades_cache = trades
        trade_num = self.get_trade_number()
        if not trade_num:
            return False

        trade = self.trades_cache[trade_num - 1]
        items_to_receive = trade.items_to_receive

        if not items_to_receive:
            print_and_log(self.formatter.format_error("–í —ç—Ç–æ–º —Ç—Ä–µ–π–¥–µ –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ."), "ERROR")
            return False

        print_and_log("\nüì¶ –ü—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ —ç—Ç–æ–º —Ç—Ä–µ–π–¥–µ:")
        for i, item in enumerate(items_to_receive, 1):
            print_and_log(f"  {i}. {item.get('market_hash_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')}")

        try:
            item_num = int(input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¢–ü (1-{len(items_to_receive)}): "))
            if not (1 <= item_num <= len(items_to_receive)):
                print_and_log(self.formatter.format_error("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞."), "ERROR")
                return False

            selected_item = items_to_receive[item_num - 1]
            price_str = input(f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è '{selected_item['market_hash_name']}' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.50): ")
            price = int(float(price_str) * 100) # –í –∫–æ–ø–µ–π–∫–∞—Ö/—Ü–µ–Ω—Ç–∞—Ö

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ trade_manager –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¢–ü
            # self.trade_manager.list_item_on_market(item_id, price)
            print_and_log(f"\n[–ó–ê–ì–õ–£–®–ö–ê] –ü—Ä–µ–¥–º–µ—Ç '{selected_item['market_hash_name']}' –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –¢–ü –ø–æ —Ü–µ–Ω–µ {price / 100:.2f}")
            print_and_log("–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
            return True

        except ValueError:
            print_and_log(self.formatter.format_error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥."), "ERROR")
            return False
        except Exception as e:
            print_and_log(self.formatter.format_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –¢–ü:", e), "ERROR")
            return False 
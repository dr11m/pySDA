#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ –µ–¥–∏–Ω–æ–º —Ü–∏–∫–ª–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
"""
import time
from typing import Dict, Set, Any, Optional, List

from src.cli.account_context import build_account_context
from src.cli.auto_manager import AutoManager
from src.cli.config_manager import ConfigManager
from src.utils.logger_setup import logger, print_and_log
from src.factories import create_instance_from_config
from src.interfaces.notification_interface import NotificationInterface

class AccountErrorTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    def __init__(self, max_errors: int = 3, notification_provider: NotificationInterface = None):
        self.max_errors = max_errors
        self.error_counts: Dict[str, int] = {}
        self.disabled_accounts: Set[str] = set()
        self.notification_provider = notification_provider
    
    def record_error(self, account_name: str) -> bool:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω
        """
        current_errors = self.error_counts.get(account_name, 0) + 1
        self.error_counts[account_name] = current_errors
        
        logger.warning(f"[{account_name}] –û—à–∏–±–∫–∞ #{current_errors}/{self.max_errors}")
        
        if current_errors >= self.max_errors:
            self.disabled_accounts.add(account_name)
            logger.error(f"[{account_name}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫ ({self.max_errors}). –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.")
            message = f"–í –ø—Ä–æ–µ–∫—Ç–µ pySDA –ø—Ä–æ–∏–∑–æ—à–ª–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –∞–∫–∫–∞—É–Ω—Ç {account_name} —É–±—Ä–∞–Ω –∏–∑ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏"
            try:
                self.notification_provider.notify_user(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            return True
        
        return False
    
    def record_success(self, account_name: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if account_name in self.error_counts:
            old_count = self.error_counts[account_name]
            self.error_counts[account_name] = 0
            if old_count > 0:
                logger.info(f"[{account_name}] –û—à–∏–±–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±—ã–ª–æ {old_count})")
    
    def reset_account_errors(self, account_name: str):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ä—É—á–Ω–æ–π —Å–±—Ä–æ—Å)"""
        if account_name in self.error_counts:
            old_count = self.error_counts[account_name]
            self.error_counts[account_name] = 0
            logger.info(f"[{account_name}] –û—à–∏–±–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –≤—Ä—É—á–Ω—É—é (–±—ã–ª–æ {old_count})")
        
        if account_name in self.disabled_accounts:
            self.disabled_accounts.remove(account_name)
            logger.info(f"[{account_name}] –ê–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é")
    
    def is_account_disabled(self, account_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç"""
        return account_name in self.disabled_accounts
    
    def get_disabled_accounts(self) -> Set[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        return self.disabled_accounts.copy()
    
    def get_error_count(self, account_name: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        return self.error_counts.get(account_name, 0)
    
    def get_status_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        return {
            'total_accounts': len(self.error_counts),
            'disabled_accounts': len(self.disabled_accounts),
            'accounts_with_errors': len([acc for acc, count in self.error_counts.items() if count > 0]),
            'error_counts': self.error_counts.copy(),
            'disabled_list': list(self.disabled_accounts)
        }

class MultiAccountAutoManager:
    def __init__(self, config_manager: ConfigManager, allowed_account_names: Optional[List[str]] = None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–æ–Ω ConfigManager –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.config_manager = config_manager.clone()
        self._last_check_times: Dict[str, float] = {}
        self.allowed_account_names: Optional[List[str]] = allowed_account_names
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã
        delay_ms = self.config_manager.get('min_request_delay_ms', 1000)
        self.min_request_delay_sec = delay_ms / 1000.0
        
        notification_provider = None  # <-- —Ñ–∏–∫—Å
        notification_config = self.config_manager.get('notification_provider')
        if notification_config:
            try:
                notification_provider = create_instance_from_config(notification_config)
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                notification_provider = None
        if not notification_provider:
            raise Exception("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        # –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ—à–∏–±–æ–∫
        self.error_tracker = AccountErrorTracker(max_errors=3, notification_provider=notification_provider)

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –µ–¥–∏–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
        account_names = (
            list(self.allowed_account_names)
            if self.allowed_account_names is not None
            else self.config_manager.get_all_account_names()
        )
        if not account_names:
            print_and_log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.")
            return

        print_and_log(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –µ–¥–∏–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è {len(account_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        print_and_log(f"üïí –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {self.min_request_delay_sec * 1000:.0f} –º—Å.")
        print_and_log("‚ÑπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print_and_log("üõ°Ô∏è  –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ—à–∏–±–æ–∫ –∞–∫—Ç–∏–≤–Ω–∞ (–º–∞–∫—Å–∏–º—É–º 3 –æ—à–∏–±–∫–∏ –ø–æ–¥—Ä—è–¥)")
        print()

        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å—ã AutoManager –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        auto_managers = {
            name: AutoManager(account_name=name) for name in account_names
        }

        # –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        last_stats_time = time.time()
        stats_interval = 300

        try:
            while True:
                now = time.time()
                processed_in_this_cycle = False
                active_accounts = [name for name in account_names if not self.error_tracker.is_account_disabled(name)]

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if now - last_stats_time >= stats_interval:
                    self._print_error_statistics()
                    last_stats_time = now

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                disabled_accounts = self.error_tracker.get_disabled_accounts()
                if disabled_accounts:
                    print_and_log(f"‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {', '.join(disabled_accounts)}")

                for account_name in active_accounts:
                    auto_manager = auto_managers[account_name]
                    settings = auto_manager.settings
                    last_check = self._last_check_times.get(account_name, 0)

                    if (now - last_check) >= settings.check_interval:
                        print_and_log(f"[{account_name}] üîÑ –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {settings.check_interval} —Å).")
                        
                        self._process_account(account_name, auto_manager)
                        
                        self._last_check_times[account_name] = time.time()
                        processed_in_this_cycle = True

                # –ï—Å–ª–∏ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏, –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å CPU
                if not processed_in_this_cycle:
                    time.sleep(1)

        except KeyboardInterrupt:
            print_and_log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª Ctrl+C. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self._print_error_statistics()
        
        print_and_log("üèÅ –¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def _process_account(self, account_name: str, auto_manager: AutoManager):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        try:
            print_and_log(f"[{account_name}] üõ†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            context = build_account_context(self.config_manager, account_name)
            if context:
                print_and_log(f"[{account_name}] ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏...")
                auto_manager._execute_automation_tasks(context, auto_manager.settings)
                print_and_log(f"[{account_name}] ‚úÖ –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                self.error_tracker.record_success(account_name)
            else:
                print_and_log(f"[{account_name}] ‚ùå –ü—Ä–æ–ø—É—Å–∫ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
                self.error_tracker.record_error(account_name)
        except Exception as e:
            print_and_log(f"[{account_name}] ‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            self.error_tracker.record_error(account_name)

    def _print_error_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
        print_and_log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:")
        print_and_log(f"  –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.error_tracker.error_counts)}")
        print_and_log(f"  –û—Ç–∫–ª—é—á–µ–Ω–æ: {len(self.error_tracker.disabled_accounts)}")
        print_and_log(f"  –° –æ—à–∏–±–∫–∞–º–∏: {sum(1 for count in self.error_tracker.error_counts.values() if count > 0)}")
        
        if self.error_tracker.error_counts:
            print_and_log("  –î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:")
            for account, count in self.error_tracker.error_counts.items():
                status = "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù" if account in self.error_tracker.disabled_accounts else f"‚ö†Ô∏è {count} –æ—à–∏–±–æ–∫"
                print_and_log(f"    {account}: {status}") 
#!/usr/bin/env python3
"""
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é
"""

from typing import Optional, List
from .menu_base import BaseMenu, NavigableMenu, MenuItem
from .constants import MenuChoice, TradeMenuChoice, SettingsMenuChoice, AutoMenuChoice, Messages, Formatting
from .trade_handlers import (
    GiftAcceptHandler, 
    TradeConfirmHandler, 
    SpecificTradeHandler,
    TradeCheckHandler
)
from .settings_manager import SettingsManager
from .auto_manager import AutoManager
from .market_handler import MarketHandler


class MainMenu(BaseMenu):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, cli_context):
        super().__init__(f"{Messages.MAIN_TITLE} - {cli_context.username or '–ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù'}")
        self.cli = cli_context
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.add_item(MenuItem(
            MenuChoice.UPDATE_COOKIES.value,
            Messages.UPDATE_COOKIES,
            self.cli.update_cookies
        ))
        
        self.add_item(MenuItem(
            MenuChoice.MANAGE_TRADES.value,
            "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞–º–∏ (–ø–æ–ª—É—á–∏—Ç—å + —É–ø—Ä–∞–≤–ª—è—Ç—å)",
            self.open_trades_menu
        ))
        
        self.add_item(MenuItem(
            MenuChoice.CONFIRM_MARKET.value,
            Messages.CONFIRM_MARKET,
            self.confirm_market_orders
        ))
        
        self.add_item(MenuItem(
            MenuChoice.GET_GUARD_CODE.value,
            Messages.GET_GUARD_CODE,
            self.cli.get_guard_code
        ))
        
        self.add_item(MenuItem(
            MenuChoice.SETTINGS.value,
            Messages.SETTINGS,
            self.open_settings_menu
        ))
        
        self.add_item(MenuItem(
            MenuChoice.AUTO_ACCEPT.value,
            Messages.AUTO_ACCEPT,
            self.open_auto_menu
        ))
        
        self.add_item(MenuItem(
            MenuChoice.EXIT.value,
            Messages.EXIT,
            self.exit_app
        ))
    
    def open_trades_menu(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞–º–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤
        print("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç—Ä–µ–π–¥–∞–º–∏...")
        trades = self.cli.get_active_trades()
        
        if trades is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤")
            return
        
        if not trades:
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–π–¥—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        trades_menu = TradesMenu(self.cli)
        trades_menu.run()
    
    def confirm_market_orders(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ market –æ—Ä–¥–µ—Ä–∞"""
        market_handler = MarketHandler(
            self.cli.trade_manager,
            self.cli.formatter,
            self.cli.cookie_checker
        )
        return market_handler.confirm_all_market_orders()
    
    def open_settings_menu(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_menu = SettingsMenu(self.cli)
        settings_menu.run()
    
    def open_auto_menu(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        auto_menu = AutoMenu(self.cli)
        auto_menu.run()
    
    def exit_app(self):
        """–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print(Messages.GOODBYE)
        self.stop()
    
    def process_action_result(self, choice: str, result) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è"""
        if choice == MenuChoice.EXIT.value:
            return False
        return True


class TradesMenu(NavigableMenu):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞–º–∏"""
    
    def __init__(self, cli_context):
        super().__init__(Messages.TRADES_TITLE)
        self.cli = cli_context
        self.gift_handler = GiftAcceptHandler(
            cli_context.trade_manager, 
            cli_context.formatter,
            cli_context.cookie_checker
        )
        self.confirm_handler = TradeConfirmHandler(
            cli_context.trade_manager, 
            cli_context.formatter,
            cli_context.cookie_checker
        )
        self.specific_handler = SpecificTradeHandler(
            cli_context.trade_manager, 
            cli_context.formatter,
            cli_context.active_trades_cache or [],
            cli_context.cookie_checker
        )
        self.checker = TradeCheckHandler(
            cli_context.trade_manager, 
            cli_context.formatter,
            cli_context.cookie_checker
        )
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é —Ç—Ä–µ–π–¥–æ–≤"""
        self.add_item(MenuItem(
            TradeMenuChoice.ACCEPT_GIFTS.value,
            Messages.ACCEPT_GIFTS,
            self.accept_gifts
        ))
        
        self.add_item(MenuItem(
            TradeMenuChoice.CONFIRM_ALL.value,
            "üîë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ —á–µ—Ä–µ–∑ Guard (–≤–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥—è—â–∏–µ)",
            self.confirm_all_trades,
            enabled=True  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –≤ —Å–∞–º–æ–º –º–µ—Ç–æ–¥–µ
        ))
        
        self.add_item(MenuItem(
            TradeMenuChoice.ACCEPT_SPECIFIC.value,
            Messages.ACCEPT_SPECIFIC,
            self.accept_specific_trade
        ))
        
        self.add_item(MenuItem(
            TradeMenuChoice.CONFIRM_SPECIFIC.value,
            Messages.CONFIRM_SPECIFIC,
            self.confirm_specific_trade,
            enabled=True  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –≤ —Å–∞–º–æ–º –º–µ—Ç–æ–¥–µ
        ))
    
    def accept_gifts(self):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏"""
        return self.gift_handler.execute()
    
    def confirm_all_trades(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–π–¥—ã —á–µ—Ä–µ–∑ Guard"""
        if self.checker.has_guard_confirmation_needed_trades():
            return self.confirm_handler.execute()
        else:
            print(Messages.NO_CONFIRMATION_TRADES)
            print(Messages.NO_CONFIRMATION_TRADES_HINT)
            return None
    
    def accept_specific_trade(self):
        """–ü—Ä–∏–Ω—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–π–¥"""
        if not self.cli.active_trades_cache:
            print(Messages.NO_TRADES_FROM_MENU)
            return None
        
        trade_num = self.specific_handler.get_trade_number()
        if trade_num:
            return self.specific_handler.accept_specific_trade(trade_num)
        return None
    
    def confirm_specific_trade(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–π–¥ —á–µ—Ä–µ–∑ Guard"""
        if not self.checker.has_guard_confirmation_needed_trades():
            print(Messages.NO_CONFIRMATION_TRADES)
            print(Messages.NO_CONFIRMATION_TRADES_HINT)
            return None
        
        if not self.cli.active_trades_cache:
            print(Messages.NO_TRADES_FROM_MENU)
            return None
        
        trade_num = self.specific_handler.get_trade_number()
        if trade_num:
            return self.specific_handler.confirm_specific_trade(trade_num)
        return None


class SettingsMenu(NavigableMenu):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self, cli_context):
        super().__init__(Messages.SETTINGS_TITLE)
        self.cli = cli_context
        self.settings_manager = SettingsManager(
            accounts_dir=getattr(cli_context, 'accounts_dir', 'accounts_info')
        )
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.add_item(MenuItem(
            SettingsMenuChoice.ADD_MAFILE.value,
            Messages.ADD_MAFILE,
            self.add_mafile
        ))
        
        self.add_item(MenuItem(
            SettingsMenuChoice.GET_API_KEY.value,
            Messages.GET_API_KEY,
            self.get_api_key
        ))
    
    def add_mafile(self):
        """–î–æ–±–∞–≤–∏—Ç—å mafile"""
        try:
            result = self.settings_manager.add_mafile()
            if result:
                print()
                input(Messages.PRESS_ENTER)
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ mafile: {e}")
            input(Messages.PRESS_ENTER)
            return False 

    def get_api_key(self):
        """–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á"""
        try:
            result = self.settings_manager.get_api_key(self.cli)
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ API –∫–ª—é—á–∞: {e}")
            input(Messages.PRESS_ENTER)
            return False 


class AutoMenu(NavigableMenu):
    """–ú–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, cli_context):
        super().__init__(Messages.AUTO_TITLE)
        self.cli = cli_context
        self.auto_manager = AutoManager(
            accounts_dir=getattr(cli_context, 'accounts_dir', 'accounts_info')
        )
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        self.add_item(MenuItem(
            AutoMenuChoice.AUTO_SETTINGS.value,
            Messages.AUTO_SETTINGS,
            self.open_auto_settings
        ))
        
        self.add_item(MenuItem(
            AutoMenuChoice.START_AUTO.value,
            Messages.START_AUTO_ACCEPT,
            self.start_auto_accept
        ))
    
    def open_auto_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            result = self.auto_manager.show_settings()
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            input(Messages.PRESS_ENTER)
            return False
    
    def start_auto_accept(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"""
        try:
            result = self.auto_manager.start_auto_accept(self.cli)
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            input(Messages.PRESS_ENTER)
            return False 
#!/usr/bin/env python3
"""
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é
"""

from typing import Optional, List, Dict, Any
from .menu_base import BaseMenu, NavigableMenu, MenuItem
from .constants import MenuChoice, TradeMenuChoice, SettingsMenuChoice, AutoMenuChoice, Messages, Formatting
from .display_formatter import DisplayFormatter
from .trade_handlers import (
    GiftAcceptHandler, 
    TradeConfirmHandler, 
    SpecificTradeHandler,
    TradeCheckHandler
)
from src.models import TradeOffer
from .settings_manager import SettingsManager
from .auto_manager import AutoManager, AutoSettings
from .market_handler import MarketHandler
from .password_changer import PasswordChanger
from src.utils.logger_setup import print_and_log
from pathlib import Path
import json
import requests


class MainMenu(BaseMenu):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, cli_context):
        # –ù–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        super().__init__("") 
        self.cli = cli_context
        self.formatter = DisplayFormatter()
    
    def _update_title(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç."""
        if self.cli.selected_account_name:
            self.title = f"{Messages.MAIN_TITLE} - –ê–∫–∫–∞—É–Ω—Ç: [{self.cli.selected_account_name}]"
        else:
            self.title = f"{Messages.MAIN_TITLE} - [–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω]"

    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.items.clear() # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—É–Ω–∫—Ç—ã

        self.add_item(MenuItem(
            MenuChoice.ACCOUNT_ACTIONS.value,
            Messages.ACCOUNT_ACTIONS,
            self.open_account_actions_menu
        ))
        
        self.add_item(MenuItem(
            MenuChoice.AUTOMATION.value,
            Messages.AUTOMATION,
            self.open_auto_menu
        ))
        
        self.add_item(MenuItem(
            MenuChoice.CHECK_PROXIES.value,
            Messages.CHECK_PROXIES,
            self.check_all_proxies
        ))
        
        self.add_item(MenuItem(
            MenuChoice.EXIT.value,
            Messages.EXIT,
            self.exit_app
        ))

    def run(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."""
        self.running = True
        while self.running:
            self._update_title()
            self.setup_menu()
            self.display_menu()
            choice = self.get_user_choice()
            if not self.handle_choice(choice):
                break
    
    def open_account_actions_menu(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º"""
        account_menu = AccountActionsMenu(self.cli)
        account_menu.run()
    
    def open_auto_menu(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        auto_menu = AutoMenu(self.cli)
        auto_menu.run()
    
    def check_all_proxies(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        print_and_log(self.formatter.format_section_header("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            if not hasattr(self.cli, 'config_manager') or not hasattr(self.cli.config_manager, 'get_all_account_names'):
                print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", "ERROR")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
            
            account_names = self.cli.config_manager.get_all_account_names()
            if not account_names:
                print_and_log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "ERROR")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
            
            print_and_log(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(account_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print_and_log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∫—Å–∏...")
            print_and_log("")
            
            # –ü–æ–ª—É—á–∞–µ–º IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            print_and_log("üåê –ü–æ–ª—É—á–µ–Ω–∏–µ IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
            try:
                response = requests.get("https://api.ipify.org?format=json", timeout=10)
                if response.status_code == 200:
                    direct_ip = response.json().get('ip', 'N/A')
                    print_and_log(f"‚úÖ IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {direct_ip}")
                else:
                    direct_ip = 'N/A'
                    print_and_log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏", "WARNING")
            except Exception as e:
                direct_ip = 'N/A'
                print_and_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}", "WARNING")
            
            print_and_log("")
            print_and_log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏:")
            print_and_log("‚îÄ" * 80)
            print_and_log(f"{'–ê–∫–∫–∞—É–Ω—Ç':<20} {'–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π IP:Port':<25} {'–ü–æ–ª—É—á–µ–Ω–Ω—ã–π IP':<15} {'–°—Ç–∞—Ç—É—Å':<10}")
            print_and_log("‚îÄ" * 80)
            
            results = []
            
            for account_name in account_names:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—é (–∫–∞–∫ –≤ account_context.py)
                    try:
                        from src.factories import create_instance_from_config
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ config_manager
                        proxy_provider_config = self.cli.config_manager.get('proxy_provider')
                        if not proxy_provider_config:
                            assigned_proxy = 'N/A'
                            received_ip = 'N/A'
                        else:
                            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏
                            proxy_provider = create_instance_from_config(proxy_provider_config)
                            proxy_dict = proxy_provider.get_proxy(account_name)
                            
                            if proxy_dict:
                                # proxy_dict —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è requests
                                # –Ω–∞–ø—Ä–∏–º–µ—Ä: {'http': 'http://user:pass@host:port', 'https': 'http://user:pass@host:port'}
                                assigned_proxy = proxy_dict.get('http', 'N/A').replace('http://', '').replace('https://', '')
                                
                                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                                response = requests.get("https://api.ipify.org?format=json", proxies=proxy_dict, timeout=10)
                                if response.status_code == 200:
                                    received_ip = response.json().get('ip', 'N/A')
                                else:
                                    received_ip = 'N/A'
                            else:
                                assigned_proxy = 'no_proxy'
                                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                                response = requests.get("https://api.ipify.org?format=json", timeout=10)
                                if response.status_code == 200:
                                    received_ip = response.json().get('ip', 'N/A')
                                else:
                                    received_ip = 'N/A'
                    except Exception as e:
                        assigned_proxy = 'N/A'
                        received_ip = 'N/A'
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if received_ip != 'N/A' and received_ip != direct_ip:
                        status = "‚úÖ"
                        status_text = "–†–ê–ë–û–¢–ê–ï–¢"
                    elif received_ip == direct_ip and assigned_proxy != 'no_proxy':
                        status = "‚ùå"
                        status_text = "–ù–ï –†–ê–ë–û–¢–ê–ï–¢"
                    elif received_ip == direct_ip and assigned_proxy == 'no_proxy':
                        status = "‚úÖ"
                        status_text = "OK"
                    else:
                        status = "‚ùå"
                        status_text = "–û–®–ò–ë–ö–ê"
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    print_and_log(f"{account_name:<20} {assigned_proxy:<25} {received_ip:<15} {status} {status_text}")
                    
                    results.append({
                        'account': account_name,
                        'assigned_proxy': assigned_proxy,
                        'received_ip': received_ip,
                        'status': status,
                        'status_text': status_text
                    })
                    
                except Exception as e:
                    print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {account_name}: {e}", "ERROR")
                    print_and_log(f"{account_name:<20} {'N/A':<25} {'N/A':<15} ‚ùå –û–®–ò–ë–ö–ê")
            
            print_and_log("‚îÄ" * 80)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            working_proxies = len([r for r in results if r['status'] == "‚úÖ"])
            total_accounts = len(results)
            
            print_and_log(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print_and_log(f"   ‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}")
            print_and_log(f"   ‚Ä¢ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {working_proxies}")
            print_and_log(f"   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: {total_accounts - working_proxies}")
            
            if working_proxies < total_accounts:
                print_and_log("")
                print_and_log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏:")
                for result in results:
                    if result['status'] == "‚ùå":
                        print_and_log(f"   ‚Ä¢ {result['account']}: {result['status_text']}")
            
            print_and_log("")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        except Exception as e:
            print_and_log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏: {e}", "ERROR")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def exit_app(self):
        """–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print(Messages.GOODBYE)
        self.stop()


class AccountActionsMenu(NavigableMenu):
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º"""
    
    def __init__(self, cli_context):
        super().__init__("üë§ –î–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º")
        self.cli = cli_context
        self.formatter = DisplayFormatter()
    
    def _update_title(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç."""
        if self.cli.selected_account_name:
            self.title = f"üë§ –î–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º - [{self.cli.selected_account_name}]"
        else:
            self.title = f"üë§ –î–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º - [–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω]"
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º"""
        self.items.clear()
        
        self.add_item(MenuItem(
            "1",
            Messages.SELECT_ACCOUNT,
            self.cli.select_and_initialize_account
        ))
        
        self.add_item(MenuItem(
            "2",
            Messages.UPDATE_COOKIES,
            self.cli.update_cookies
        ))
        
        self.add_item(MenuItem(
            "3",
            Messages.MANAGE_TRADES,
            self.open_trades_menu
        ))
        
        self.add_item(MenuItem(
            "4",
            Messages.CONFIRM_MARKET,
            self.confirm_market_orders
        ))
        
        self.add_item(MenuItem(
            "5",
            Messages.GET_GUARD_CODE,
            self.cli.get_guard_code
        ))
        
        self.add_item(MenuItem(
            "6",
            Messages.SETTINGS,
            self.open_settings_menu
        ))
        
        self.add_item(MenuItem(
            "0",
            Messages.BACK,
            self.go_back
        ))
    
    def run(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        self.running = True
        while self.running:
            self._update_title()
            self.setup_menu()
            self.display_menu()
            choice = self.get_user_choice()
            if not self.handle_choice(choice):
                break
    
    def open_trades_menu(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–π–¥—ã –æ–¥–∏–Ω —Ä–∞–∑
        print_and_log("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç—Ä–µ–π–¥–∞–º–∏...")
        all_trades = self.cli.get_all_trades()
        
        if all_trades is None:
            print_and_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤", "ERROR")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        active_trades = [t for t in all_trades if t.is_active]
        
        if not active_trades:
            print_and_log("‚ÑπÔ∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "INFO")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–π–¥—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        trades_menu = TradesMenu(self.cli, all_trades)
        trades_menu.run()
    
    def confirm_market_orders(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ market –æ—Ä–¥–µ—Ä–∞"""
        market_handler = MarketHandler(
            self.cli.active_account_context.trade_manager,
            self.cli.formatter,
            self.cli.active_account_context.cookie_checker
        )
        return market_handler.confirm_all_market_orders()
    
    def open_settings_menu(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_menu = SettingsMenu(self.cli)
        settings_menu.run()


class SettingsMenu(NavigableMenu):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self, cli_context):
        super().__init__(Messages.SETTINGS_TITLE)
        self.cli = cli_context
        self.settings_manager = SettingsManager()
        self.password_changer = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.formatter = DisplayFormatter()
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.items.clear()
        
        self.add_item(MenuItem(
            SettingsMenuChoice.GET_API_KEY.value,
            Messages.GET_API_KEY,
            self.get_api_key
        ))
        
        self.add_item(MenuItem(
            SettingsMenuChoice.GET_GUARD_CONFIRMATIONS.value,
            Messages.GET_GUARD_CONFIRMATIONS,
            self.get_guard_confirmations
        ))
        
        self.add_item(MenuItem(
            SettingsMenuChoice.CHANGE_PASSWORD.value,
            Messages.CHANGE_PASSWORD,
            self.change_password
        ))
        
        self.add_item(MenuItem(
            SettingsMenuChoice.BACK.value,
            Messages.BACK,
            self.go_back
        ))
    
    def add_mafile(self):
        """–î–æ–±–∞–≤–∏—Ç—å mafile"""
        return self.settings_manager.add_mafile()
    
    def get_api_key(self):
        """–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á"""
        if not self.cli:
            print_and_log("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (–ø—É–Ω–∫—Ç 1 –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)", "ERROR")
            return False
        return self.settings_manager.get_api_key(self.cli)
    
    def get_guard_confirmations(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard"""
        if not self.cli.active_account_context:
            print_and_log("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (–ø—É–Ω–∫—Ç 1 –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)", "ERROR")
            return False
        
        try:
            print_and_log(self.formatter.format_section_header("üîê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard"))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ trade_manager
            confirmations = self.cli.active_account_context.trade_manager.get_guard_confirmations()
            
            if not confirmations:
                print_and_log(Messages.NO_GUARD_CONFIRMATIONS)
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return True
            
            print_and_log(Messages.GUARD_CONFIRMATIONS_FOUND.format(count=len(confirmations)))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            for i, confirmation in enumerate(confirmations, 1):
                conf_type = confirmation.get('type', 'unknown')
                conf_id = confirmation.get('id', 'N/A')
                            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ
            while True:
                choice = input(f"\n{Messages.ENTER_CONFIRMATION_NUMBER.format(max_num=len(confirmations))} (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): ").strip()
                
                if choice == "0":
                    break
                
                try:
                    choice_num = int(choice)
                    if 1 <= choice_num <= len(confirmations):
                        selected_confirmation = confirmations[choice_num - 1]
                        conf_id = selected_confirmation.get('id')
                        conf_type = selected_confirmation.get('type', 'unknown')
                        confirmation_obj = selected_confirmation.get('confirmation')
                        
                        print_and_log(f"üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º {conf_type.replace('_', ' ')} (ID: {conf_id})...")
                        
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
                        result = self.cli.active_account_context.trade_manager.confirm_guard_confirmation(confirmation_obj)
                        
                        if result:
                            print_and_log(Messages.GUARD_CONFIRMATION_SUCCESS.format(id=conf_id))
                        else:
                            print_and_log(Messages.GUARD_CONFIRMATION_ERROR.format(error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
                        
                        break
                    else:
                        print_and_log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "ERROR")
                except ValueError:
                    print_and_log("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", "ERROR")
            
            return True
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard: {e}", "ERROR")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return False
    
    def change_password(self):
        """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"""
        if not self.cli.active_account_context:
            print_and_log("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (–ø—É–Ω–∫—Ç 1 –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)", "ERROR")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä PasswordChanger –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.password_changer = PasswordChanger(self.cli.active_account_context)
        return self.password_changer.change_password(self.cli.active_account_context)
    
    def exit_app(self):
        """–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print_and_log(Messages.GOODBYE)
        self.stop()
    
    def handle_choice(self, choice: str) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é.
        """
        item = self.get_item(choice)
        if item and item.enabled:
            try:
                result = item.execute()
                return self.process_action_result(choice, result)
            except Exception as e:
                self.handle_error(e)
                return True # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        else:
            self.handle_invalid_choice(choice)
            return True # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ

    def process_action_result(self, choice: str, result) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è"""
        if choice == MenuChoice.EXIT.value:
            return False # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª
            
        return True


class TradesMenu(NavigableMenu):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞–º–∏"""
    
    def __init__(self, cli_context, all_trades=None):
        super().__init__(Messages.TRADES_TITLE)
        self.cli = cli_context
        self.all_trades = all_trades  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã
        
        self.gift_handler = GiftAcceptHandler(
            cli_context.active_account_context.trade_manager, 
            cli_context.formatter,
            cli_context.active_account_context.cookie_checker
        )
        self.confirm_handler = TradeConfirmHandler(
            cli_context.active_account_context.trade_manager, 
            cli_context.formatter,
            cli_context.active_account_context.cookie_checker
        )
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º, –æ–±–Ω–æ–≤–∏–º –≤ setup_menu
        self.specific_handler = SpecificTradeHandler(
            cli_context.active_account_context.trade_manager, 
            cli_context.formatter,
            [],
            cli_context.active_account_context.cookie_checker
        )
        self.checker = TradeCheckHandler(
            cli_context.active_account_context.trade_manager, 
            cli_context.formatter,
            cli_context.active_account_context.cookie_checker
        )
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é —Ç—Ä–µ–π–¥–æ–≤"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ
        if self.all_trades is None:
            self.all_trades = self.cli.get_all_trades()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–π–¥–æ–≤
        has_gifts = False
        has_confirmation_needed = False
        has_any_trades = False
        
        if self.all_trades:
            has_any_trades = True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–∞—Ö
            active_received = [t for t in self.all_trades if not t.is_our_offer and t.is_active]
            active_sent = [t for t in self.all_trades if t.is_our_offer and t.is_active]
            confirmation_needed_received = [t for t in self.all_trades if not t.is_our_offer and t.needs_confirmation]
            confirmation_needed_sent = [t for t in self.all_trades if t.is_our_offer and t.needs_confirmation]
            
            print_and_log("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã:")
            if active_received:
                print_and_log(f"  üì• –í—Ö–æ–¥—è—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ: {len(active_received)}")
            if active_sent:
                print_and_log(f"  üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ: {len(active_sent)}")
            if confirmation_needed_received:
                print_and_log(f"  üîë –í—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(confirmation_needed_received)}")
            if confirmation_needed_sent:
                print_and_log(f"  üîë –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(confirmation_needed_sent)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏
            for trade in active_received:
                if trade.items_to_give_count == 0 and trade.items_to_receive_count > 0:
                    has_gifts = True
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–π–¥—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if confirmation_needed_received or confirmation_needed_sent:
            has_confirmation_needed = True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –≤–æ–æ–±—â–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        active_trades_count = len(active_received) + len(active_sent)
        if active_trades_count == 0:
            print_and_log("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            print_and_log("üí° –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:")
            print_and_log("  - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤")
            print_and_log("  - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤") 
            print_and_log("  - –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        else:
            print_and_log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {active_trades_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ç—Ä–µ–π–¥–æ–≤ –≤ specific_handler
        self.specific_handler.trades_cache = active_received + active_sent
        
        self.add_item(MenuItem(
            TradeMenuChoice.ACCEPT_GIFTS.value,
            Messages.ACCEPT_GIFTS,
            self.accept_gifts,
            enabled=has_gifts
        ))
        
        self.add_item(MenuItem(
            TradeMenuChoice.CONFIRM_ALL.value,
            Messages.CONFIRM_ALL,
            self.confirm_all_trades,
            enabled=has_confirmation_needed
        ))
        
        self.add_item(MenuItem(
            TradeMenuChoice.ACCEPT_SPECIFIC.value,
            Messages.ACCEPT_SPECIFIC,
            self.accept_specific_trade,
            enabled=active_trades_count > 0
        ))
        
        self.add_item(MenuItem(
            TradeMenuChoice.CONFIRM_SPECIFIC.value,
            Messages.CONFIRM_SPECIFIC,
            self.confirm_specific_trade,
            enabled=has_confirmation_needed
        ))
        
        self.add_item(MenuItem(
            TradeMenuChoice.BACK.value,
            Messages.BACK,
            self.go_back
        ))
    
    def accept_gifts(self):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏"""
        return self.gift_handler.execute()
    
    def confirm_all_trades(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–π–¥—ã —á–µ—Ä–µ–∑ Guard"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–π–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        confirmation_needed = [t for t in self.all_trades if t.needs_confirmation] if self.all_trades else []
        
        if confirmation_needed:
            return self.confirm_handler.execute()
        else:
            print_and_log(Messages.NO_CONFIRMATION_TRADES)
            print_and_log(Messages.NO_CONFIRMATION_TRADES_HINT)
            return None
    
    def accept_specific_trade(self):
        """–ü—Ä–∏–Ω—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–π–¥"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if not self.specific_handler.trades_cache:
            print_and_log(Messages.NO_TRADES_FROM_MENU, "ERROR")
            return None
        
        trade_num = self.specific_handler.get_trade_number()
        if trade_num:
            return self.specific_handler.accept_specific_trade(trade_num)
        return None
    
    def confirm_specific_trade(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–π–¥ —á–µ—Ä–µ–∑ Guard"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–π–¥–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        confirmation_needed = [t for t in self.all_trades if t.needs_confirmation] if self.all_trades else []
        
        if not confirmation_needed:
            print_and_log(Messages.NO_CONFIRMATION_TRADES)
            print_and_log(Messages.NO_CONFIRMATION_TRADES_HINT)
            return None
        
        if not self.all_trades:
            print_and_log(Messages.NO_TRADES_FROM_MENU, "ERROR")
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ç—Ä–µ–π–¥–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å —Ç—Ä–µ–π–¥–∞–º–∏ —Ç—Ä–µ–±—É—é—â–∏–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.specific_handler.trades_cache = confirmation_needed
        
        trade_num = self.specific_handler.get_trade_number()
        if trade_num:
            return self.specific_handler.confirm_specific_trade(trade_num)
        return None


class AutoMenu(NavigableMenu):
    """–ú–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, cli_context):
        super().__init__(Messages.AUTO_TITLE)
        self.cli = cli_context
        
        # AutoManager –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.auto_manager = None
        self.formatter = DisplayFormatter()
    
    def _ensure_auto_manager(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç AutoManager –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        if self.auto_manager is not None:
            return True
            
        if not self.cli.selected_account_name:
            print_and_log("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (–ø—É–Ω–∫—Ç 1 –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)", "ERROR")
            return False
        
        accounts_dir = getattr(self.cli, 'accounts_dir', 'accounts_info')
        self.auto_manager = AutoManager(
            account_name=self.cli.selected_account_name,
            accounts_dir=accounts_dir
        )
        return True
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        self.add_item(MenuItem(
            AutoMenuChoice.AUTO_SETTINGS.value,
            Messages.AUTO_SETTINGS,
            self.open_auto_settings
        ))
        
        self.add_item(MenuItem(
            AutoMenuChoice.START_AUTO.value,
            Messages.START_AUTO_ACCEPT,
            self.start_auto_accept
        ))
        
        self.add_item(MenuItem(
            "3",
            "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
            self.configure_other_account_settings
        ))
        
        self.add_item(MenuItem(
            AutoMenuChoice.MANAGE_AUTO_ACCOUNTS.value,
            Messages.MANAGE_AUTO_ACCOUNTS,
            self.manage_auto_accounts
        ))
        
        self.add_item(MenuItem(
            AutoMenuChoice.BACK.value,
            Messages.BACK,
            self.go_back
        ))

    def _get_accounts_with_automation(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        accounts_to_automate_file = Path("accounts_info/accounts_to_automate.json")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        auto_account_names = []
        if accounts_to_automate_file.exists():
            try:
                with open(accounts_to_automate_file, 'r', encoding='utf-8') as f:
                    auto_account_names = json.load(f)
            except Exception as e:
                print_and_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {accounts_to_automate_file}: {e}", "WARNING")
                auto_account_names = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
        if not auto_account_names:
            print_and_log("‚ùå –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç!", "ERROR")
            print_and_log("")
            print_and_log("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print_and_log("   ‚Ä¢ –ü—É–Ω–∫—Ç '4. üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏' –≤ –º–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
            print_and_log("   ‚Ä¢ –ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª accounts_info/accounts_to_automate.json –≤—Ä—É—á–Ω—É—é")
            print_and_log("")
            return []

        accounts_with_automation = []
        accounts_dir = Path(getattr(self.cli, 'accounts_dir', 'accounts_info'))
        
        for account_name in auto_account_names:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                settings_file = accounts_dir / f"{account_name}_auto_settings.json"
                
                if settings_file.exists():
                    with open(settings_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
                    settings_data = {k: v for k, v in data.items() if not k.startswith('_')}
                    settings = AutoSettings(**settings_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    has_active_settings = (
                        settings.auto_accept_gifts or 
                        settings.auto_confirm_trades or 
                        settings.auto_confirm_market
                    )
                    
                    if has_active_settings:
                        accounts_with_automation.append({
                            'name': account_name,
                            'settings': settings,
                            'interval': settings.check_interval
                        })
                    else:
                        print_and_log(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç '{account_name}' –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", "WARNING")
                else:
                    print_and_log(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç '{account_name}' –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –Ω–æ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARNING")
                    
            except Exception as e:
                print_and_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {account_name}: {e}", "WARNING")
                continue
        
        return accounts_with_automation

    def _show_automation_preview(self, accounts: List[Dict[str, Any]]) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        print_and_log(self.formatter.format_section_header("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"))
        print_and_log("")
        
        if not accounts:
            print_and_log("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!", "ERROR")
            print_and_log("")
            print_and_log("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:")
            print_and_log("   1. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç '4. üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'")
            print_and_log("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç '1. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'")
            print_and_log("")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return False
        
        print_and_log(f"üìã –ê–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å ({len(accounts)}):")
        print_and_log("‚îÄ" * 60)
        
        for i, account in enumerate(accounts, 1):
            settings = account['settings']
            print_and_log(f"{i:2}. üî∏ {account['name']}")
            print_and_log(f"     ‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {account['interval']} —Å–µ–∫")
            
            active_features = []
            if settings.auto_accept_gifts:
                active_features.append("üéÅ –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤")
            if settings.auto_confirm_trades:
                active_features.append("üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤")
            if settings.auto_confirm_market:
                active_features.append("üè™ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∞")
            
            print_and_log(f"     üîß –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(active_features)}")
            print_and_log("")
        
        print_and_log("‚îÄ" * 60)
        print_and_log("‚ÑπÔ∏è  –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏:")
        print_and_log("   ‚Ä¢ –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ —Å–≤–æ–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É")
        print_and_log("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        print_and_log("   ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ (–º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
        print_and_log("   ‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
        print_and_log("")
        
        while True:
            choice = input("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é? (y/N): ").lower().strip()
            if choice in ('y', 'yes', '–¥–∞', '–¥'):
                return True
            elif choice in ('n', 'no', '–Ω–µ—Ç', '–Ω', ''):
                print_and_log("–û—Ç–º–µ–Ω–µ–Ω–æ.")
                return False
            else:
                print_and_log("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã", "ERROR")
    
    def open_auto_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        if not self._ensure_auto_manager():
            return False
            
        try:
            result = self.auto_manager.show_settings()
            return result
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            input(Messages.PRESS_ENTER)
            return False
    
    def start_auto_accept(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            accounts_with_automation = self._get_accounts_with_automation()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not self._show_automation_preview(accounts_with_automation):
                return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            
            print_and_log("")
            print_and_log("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
            print_and_log("üî¥ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print_and_log("")
            
            # –í—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ MultiAccountAutoManager
            from src.cli.multi_account_auto_manager import MultiAccountAutoManager
            multi_manager = MultiAccountAutoManager(self.cli.config_manager)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            multi_manager.start()

            # –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞ (—á–µ—Ä–µ–∑ Ctrl+C)
            print_and_log("\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...")
            return True
            
        except Exception as e:
            print_and_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            input(Messages.PRESS_ENTER)
            return False

    def manage_auto_accounts(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        accounts_to_automate_file = Path("accounts_info/accounts_to_automate.json")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ config.yaml
        try:
            if hasattr(self.cli, 'config_manager') and hasattr(self.cli.config_manager, 'get_all_account_names'):
                all_account_names = self.cli.config_manager.get_all_account_names()
            else:
                # Fallback: –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ .maFile –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                accounts_dir = Path(getattr(self.cli, 'accounts_dir', 'accounts_info'))
                mafiles = list(accounts_dir.glob('*.maFile'))
                all_account_names = [f.stem for f in mafiles]
        except Exception:
            accounts_dir = Path('accounts_info')
            if accounts_dir.exists():
                mafiles = list(accounts_dir.glob('*.maFile'))
                all_account_names = [f.stem for f in mafiles]
            else:
                all_account_names = []
        
        if not all_account_names:
            print_and_log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ config.yaml.", "ERROR")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é
        while True:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            auto_accounts = []
            if accounts_to_automate_file.exists():
                try:
                    with open(accounts_to_automate_file, 'r', encoding='utf-8') as f:
                        auto_accounts = json.load(f)
                except Exception as e:
                    print_and_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {accounts_to_automate_file}: {e}", "WARNING")
                    auto_accounts = []
            
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            print_and_log(self.formatter.format_section_header("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"))
            
            print_and_log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
            for i, name in enumerate(all_account_names, 1):
                status = "‚úÖ" if name in auto_accounts else "‚ùå"
                print_and_log(f"  {i}. {name} {status}")
            
            print_and_log(f"  0. ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥")
            print_and_log("\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:")
            
            try:
                choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
                if choice == "0":
                    return
                    
                choice_num = int(choice)
                if 1 <= choice_num <= len(all_account_names):
                    selected_account = all_account_names[choice_num - 1]
                    
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                    if selected_account in auto_accounts:
                        auto_accounts.remove(selected_account)
                        print_and_log(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç '{selected_account}' —É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")
                    else:
                        auto_accounts.append(selected_account)
                        print_and_log(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç '{selected_account}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    try:
                        with open(accounts_to_automate_file, 'w', encoding='utf-8') as f:
                            json.dump(auto_accounts, f, indent=2, ensure_ascii=False)
                        print_and_log(f"üíæ –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {accounts_to_automate_file}")
                    except Exception as e:
                        print_and_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", "ERROR")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    
                else:
                    print_and_log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", "ERROR")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    
            except (ValueError, IndexError):
                print_and_log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.", "ERROR")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def configure_other_account_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        print_and_log(self.formatter.format_section_header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        try:
            if hasattr(self.cli, 'config_manager') and hasattr(self.cli.config_manager, 'get_all_account_names'):
                account_names = self.cli.config_manager.get_all_account_names()
            else:
                # Fallback: –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ .maFile –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                accounts_dir = Path(getattr(self.cli, 'accounts_dir', 'accounts_info'))
                mafiles = list(accounts_dir.glob('*.maFile'))
                account_names = [f.stem for f in mafiles]
        except Exception:
            accounts_dir = Path('accounts_info')
            if accounts_dir.exists():
                mafiles = list(accounts_dir.glob('*.maFile'))
                account_names = [f.stem for f in mafiles]
            else:
                account_names = []
        
        if not account_names:
            print_and_log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", "ERROR")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return

        print_and_log("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        for i, name in enumerate(account_names, 1):
            print_and_log(f"  {i}. {name}")
        print_and_log("  0. –ù–∞–∑–∞–¥")
        
        try:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            if choice == "0":
                return
                
            choice_num = int(choice)
            if 1 <= choice_num <= len(account_names):
                selected_account = account_names[choice_num - 1]
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π AutoManager –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                temp_auto_manager = AutoManager(account_name=selected_account)
                temp_auto_manager.show_settings()

            else:
                print_and_log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", "ERROR")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        except (ValueError, IndexError):
            print_and_log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.", "ERROR")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


 
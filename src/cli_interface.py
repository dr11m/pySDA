#!/usr/bin/env python3
"""
–†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π CLI Interface - –ú–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Command –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
- Dependency Injection –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
- –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
"""

import sys
import time
from pathlib import Path
from typing import List, Optional, Dict, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.steampy.guard import generate_one_time_code
from src.cli.constants import MenuChoice, Messages
from src.cli.display_formatter import DisplayFormatter
from src.cli.config_manager import ConfigManager
from src.cli.cookie_checker import CookieChecker
from src.cli.menus import MainMenu, TradesMenu, AutoMenu
from src.cli.menus import SettingsMenu
from src.cli.menu_base import BaseMenu, NavigableMenu, MenuItem
from src.models import TradeOffer
from src.trade_confirmation_manager import TradeConfirmationManager
from src.cli.account_context import AccountContext, build_account_context
from src.cli.trade_handlers import (
    GiftAcceptHandler, SpecificTradeHandler
)
from src.utils.logger_setup import logger
from src.cookie_manager import initialize_cookie_manager


class SteamBotCLI:
    """
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Steam –±–æ—Ç–∞
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    - Single Responsibility: –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–¥–Ω—É –æ–±–ª–∞—Å—Ç—å
    - Dependency Injection: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    - Open/Closed: –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ –º–µ–Ω—é –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.active_account_context: Optional[AccountContext] = None
        self.selected_account_name: Optional[str] = None
        
        self.config_manager = ConfigManager()
        
        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.formatter = DisplayFormatter()
        self.active_trades_cache = None
        self.active_trades_cache_time = 0
        self.cookie_checker = None
        
        print("ü§ñ Steam Bot CLI v2.0 (Refactored)")
        print("=" * 50)
    
    def initialize_for_account(self, account_name: str) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = build_account_context(self.config_manager, account_name)
        
        if context:
            self.active_account_context = context
            self.selected_account_name = account_name
            print(self.formatter.format_success(f"{Messages.INIT_SUCCESS}: {self.active_account_context.username}"))
            return True
        else:
            print(self.formatter.format_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç '{account_name}'."))
            self.active_account_context = None
            self.selected_account_name = None
            return False

    def select_and_initialize_account(self) -> bool:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ."""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        account_names = self.config_manager.get_all_account_names()
        
        if not account_names:
            print(self.formatter.format_error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ. "
                                              "–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–µ–∫—Ü–∏—é 'accounts' –≤ config.yaml"))
            return False
            
        print(self.formatter.format_section_header("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç"))
        for i, name in enumerate(account_names, 1):
            print(f"  {i}. {name}")
        print("  0. –ù–∞–∑–∞–¥")
        
        while True:
            try:
                choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
                if choice == "0":
                    return False # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                choice_idx = int(choice) - 1
                if 0 <= choice_idx < len(account_names):
                    selected_name = account_names[choice_idx]
                    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_name}...")
                    return self.initialize_for_account(selected_name)
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    def _is_account_selected(self) -> bool:
        if not self.active_account_context:
            print(self.formatter.format_error("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (–ø—É–Ω–∫—Ç 1)."))
            return False
        return True

    def update_cookies(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies"""
        if not self._is_account_selected():
            return False
        try:
            print(self.formatter.format_section_header("üç™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies..."))
            print("‚ÑπÔ∏è  –û–±—ã—á–Ω–æ cookies –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
            print("‚ÑπÔ∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º.")
            print()
            
            cookies = self.active_account_context.cookie_manager.update_cookies(force=True)
            
            if cookies:
                print(self.formatter.format_cookies_info(cookies))
                return True
            else:
                print(self.formatter.format_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å cookies"))
                return False
                
        except Exception as e:
            print(self.formatter.format_error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies", e))
            return False
    
    def get_guard_code(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Guard –∫–æ–¥–∞"""
        if not self._is_account_selected():
            return False
        try:
            print(self.formatter.format_section_header("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Guard –∫–æ–¥–∞..."))
            print("‚ÑπÔ∏è  –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")
            print("‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ –≤ Steam.")
            print()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Guard –∫–æ–¥ —á–µ—Ä–µ–∑ trade_manager –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            guard_code = self.active_account_context.trade_manager.generate_guard_code()
            
            if guard_code:
                print(self.formatter.format_success(Messages.GUARD_CODE_GENERATED.format(code=guard_code)))
                return True
            else:
                print(self.formatter.format_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Guard –∫–æ–¥"))
                return False
                
        except Exception as e:
            print(self.formatter.format_error(Messages.GUARD_CODE_GENERATION_ERROR, e))
            return False
    
    def get_active_trades(self) -> Optional[List[TradeOffer]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤"""
        if not self._is_account_selected():
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self.active_trades_cache and (time.time() - self.active_trades_cache_time) < 30:
            return self.active_trades_cache
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º trade_manager –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            trades = self.active_account_context.trade_manager.get_trade_offers(active_only=True)
            
            if trades:
                all_trades = trades.active_received + trades.active_sent
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.active_trades_cache = all_trades
                self.active_trades_cache_time = time.time()
                
                return all_trades
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã")
                return None
            
        except Exception as e:
            print(self.formatter.format_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–π–¥–æ–≤: ", e))
            return None
    
    def get_all_trades(self) -> Optional[List[TradeOffer]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã–µ + —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"""
        if not self._is_account_selected():
            return None
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º trade_manager –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–æ–≤
            trades = self.active_account_context.trade_manager.get_trade_offers(active_only=False)
            
            if trades:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç—Ä–µ–π–¥–æ–≤
                all_trades = []
                all_trades.extend(trades.active_received)
                all_trades.extend(trades.active_sent)
                all_trades.extend(trades.confirmation_needed_received)
                all_trades.extend(trades.confirmation_needed_sent)
                
                return all_trades
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã")
                return None
            
        except Exception as e:
            print(self.formatter.format_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–π–¥–æ–≤: ", e))
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if not self.config_manager.load_config():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.yaml")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
        try:
            main_menu = MainMenu(self)
            main_menu.run()
        except KeyboardInterrupt:
            print(f"\n{Messages.INTERRUPTED}")
        except Exception as e:
            print(f"\n{Messages.CRITICAL_ERROR.format(error=e)}")


class TradesMenu(NavigableMenu):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞–º–∏"""
    
    def __init__(self, cli_context: SteamBotCLI):
        super().__init__(Messages.MANAGE_TRADES_TITLE)
        self.cli = cli_context
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        tm = self.cli.active_account_context.trade_manager
        cc = self.cli.active_account_context.cookie_checker
        trades = self.cli.get_active_trades() or []
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.gift_handler = GiftAcceptHandler(tm, self.cli.formatter, cc)
        self.specific_trade_handler = SpecificTradeHandler(tm, self.cli.formatter, trades, cc)
        self.market_lister = MarketListHandler(tm, cc, self.cli.formatter)

    def _get_trades_and_handle_none(self):
        trades = self.cli.get_active_trades()
        if trades is None or not trades:
            if trades is not None: # –ï—Å–ª–∏ trades –ø—É—Å—Ç, –Ω–æ –Ω–µ None
                print(self.cli.formatter.format_info("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."))
            input(Messages.PRESS_ENTER)
            return None, True # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é
        return trades, False

    def setup_menu(self):
        self.items.clear()
        
        trades, should_exit = self._get_trades_and_handle_none()
        if should_exit:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–æ —Å—Ä–∞–∑—É –≤—ã—à–ª–æ
            self.add_item(MenuItem("0", "–ù–∞–∑–∞–¥", self.exit_menu))
            return

        print(self.cli.formatter.format_trades_list(trades))
        
        self.add_item(MenuItem(MenuChoice.TRADE_ACCEPT_GIFT.value, Messages.ACCEPT_GIFT, self.gift_handler.execute))
        self.add_item(MenuItem(MenuChoice.TRADE_ACCEPT.value, Messages.ACCEPT_TRADE, self.accept_trade))
        self.add_item(MenuItem(MenuChoice.TRADE_DECLINE.value, Messages.DECLINE_TRADE, self.decline_trade))
        self.add_item(MenuItem(MenuChoice.TRADE_LIST_MARKET.value, Messages.LIST_ON_MARKET, lambda: self.market_lister.run(self.specific_trade_handler.trades_cache)))
        self.add_item(MenuItem(MenuChoice.REFRESH_TRADES.value, Messages.REFRESH_LIST, self.refresh_and_rerun))
        self.add_back_item()

    def accept_trade(self):
        trade_num = self.specific_trade_handler.get_trade_number()
        if trade_num:
            self.specific_trade_handler.accept_specific_trade(trade_num)
        self.refresh_and_rerun()

    def decline_trade(self):
        trade_num = self.specific_trade_handler.get_trade_number()
        if trade_num:
            self.specific_trade_handler.decline_specific_trade(trade_num)
        self.refresh_and_rerun()


def run_cli():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ CLI"""
    cli = SteamBotCLI()
    cli.run()


if __name__ == "__main__":
    run_cli() 
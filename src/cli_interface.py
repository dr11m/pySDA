#!/usr/bin/env python3
"""
–†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π CLI Interface - –ú–æ–¥—É–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Command –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
- Dependency Injection –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
- –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
"""

import sys
from typing import List, Optional
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.utils.logger_setup import logger
from src.cookie_manager import initialize_cookie_manager, get_cookie_manager
from src.trade_confirmation_manager import TradeConfirmationManager
from src.interfaces.storage_interface import FileCookieStorage
from src.proxy_manager import ProxyManager
from src.models import TradeOffer
from src.cli import (
    Messages, DisplayFormatter, ConfigManager,
    MainMenu, TradesMenu, AutoMenu
)
from src.cli.cookie_checker import CookieChecker


class SteamBotCLI:
    """
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Steam –±–æ—Ç–∞
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    - Single Responsibility: –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–¥–Ω—É –æ–±–ª–∞—Å—Ç—å
    - Dependency Injection: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    - Open/Closed: –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ –º–µ–Ω—é –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.cookie_manager = None
        self.trade_manager = None
        self.proxy_manager = None
        self.username = None
        self.active_trades_cache = None
        
        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.formatter = DisplayFormatter()
        self.cookie_checker = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        print("ü§ñ Steam Bot CLI v2.0 (Refactored)")
        print("=" * 50)
    
    def initialize_from_config(self, config_path: str = None) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ConfigManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_manager = ConfigManager(config_path)
            
            if not config_manager.load_config():
                return False
            
            if not config_manager.validate_config():
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.username = config_manager.get_username()
            password = config_manager.get_password()
            mafile_path = config_manager.get_mafile_path()
            steam_id = config_manager.get_steam_id()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏
            proxy_list = config_manager.get_proxy_list()
            if proxy_list:
                self.proxy_manager = ProxyManager(proxy_list)
            
            # –ü–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            accounts_dir = config_manager.get_accounts_dir()
            self.accounts_dir = accounts_dir  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cookie Manager
            self.cookie_manager = initialize_cookie_manager(
                username=self.username,
                password=password,
                mafile_path=mafile_path,
                steam_id=steam_id,
                storage=FileCookieStorage(accounts_dir),
                accounts_dir=accounts_dir,
                proxy_manager=self.proxy_manager
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trade Manager —Å cookie_manager –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è steam_id
            self.trade_manager = TradeConfirmationManager(
                username=self.username,
                mafile_path=mafile_path,
                cookie_manager=self.cookie_manager  # –ü–µ—Ä–µ–¥–∞–µ–º cookie_manager
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cookie Checker
            self.cookie_checker = CookieChecker(self.cookie_manager, self.formatter)
            
            print(self.formatter.format_success(f"{Messages.INIT_SUCCESS}: {self.username}"))
            return True
            
        except Exception as e:
            print(self.formatter.format_error(Messages.INIT_ERROR, e))
            return False
    
    def update_cookies(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies"""
        try:
            print(self.formatter.format_section_header("üç™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies..."))
            print("‚ÑπÔ∏è  –û–±—ã—á–Ω–æ cookies –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
            print("‚ÑπÔ∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º.")
            print()
            
            cookies = self.cookie_manager.update_cookies(force=True)
            
            if cookies:
                print(self.formatter.format_cookies_info(cookies))
                return True
            else:
                print(self.formatter.format_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å cookies"))
                return False
                
        except Exception as e:
            print(self.formatter.format_error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies", e))
            return False
    
    def get_guard_code(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Guard –∫–æ–¥–∞"""
        try:
            print(self.formatter.format_section_header("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Guard –∫–æ–¥–∞..."))
            print("‚ÑπÔ∏è  –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")
            print("‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ –≤ Steam.")
            print()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Guard –∫–æ–¥ —á–µ—Ä–µ–∑ trade_manager
            guard_code = self.trade_manager.generate_guard_code()
            
            if guard_code:
                print(self.formatter.format_success(Messages.GUARD_CODE_GENERATED.format(code=guard_code)))
                print()
                print("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ Steam Mobile Authenticator")
                print("‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                return True
            else:
                print(self.formatter.format_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Guard –∫–æ–¥"))
                return False
                
        except Exception as e:
            print(self.formatter.format_error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Guard –∫–æ–¥–∞", e))
            return False
    
    def get_active_trades(self) -> Optional[List[TradeOffer]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã—Ö + —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"""
        try:
            print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤...")
            print("-" * 30)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º cookies –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if not self.cookie_checker.ensure_valid_cookies():
                return None
            
            trade_offers = self.trade_manager.get_trade_offers(active_only=True)
            
            if not trade_offers:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã")
                return None
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã (–∞–∫—Ç–∏–≤–Ω—ã–µ + —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
            all_unfinished_trades = []
            all_unfinished_trades.extend(trade_offers.active_received)
            all_unfinished_trades.extend(trade_offers.active_sent)
            all_unfinished_trades.extend(trade_offers.confirmation_needed_received)
            all_unfinished_trades.extend(trade_offers.confirmation_needed_sent)
            
            if not all_unfinished_trades:
                print("‚ÑπÔ∏è –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                print("üí° –í—Å–µ –≤–∞—à–∏ —Ç—Ä–µ–π–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
                return []
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_unfinished_trades)} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤:")
            print()
            
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–æ–≤ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
            for i, trade in enumerate(all_unfinished_trades, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–¥–∞
                if trade in trade_offers.active_received:
                    trade_type = "üì• –í—Ö–æ–¥—è—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π"
                elif trade in trade_offers.active_sent:
                    trade_type = "üì§ –ò—Å—Ö–æ–¥—è—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π"
                elif trade in trade_offers.confirmation_needed_received:
                    trade_type = "üì• –í—Ö–æ–¥—è—â–∏–π (–Ω—É–∂–µ–Ω Guard)"
                elif trade in trade_offers.confirmation_needed_sent:
                    trade_type = "üì§ –ò—Å—Ö–æ–¥—è—â–∏–π (–Ω—É–∂–µ–Ω Guard)"
                else:
                    trade_type = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–π–¥–∞
                if trade.items_to_give_count == 0 and trade.items_to_receive_count > 0:
                    trade_info = f"üéÅ –ü–û–î–ê–†–û–ö (–ø–æ–ª—É—á–∞–µ–º {trade.items_to_receive_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)"
                elif trade.items_to_give_count > 0 and trade.items_to_receive_count == 0:
                    trade_info = f"üí∏ –û–¢–î–ê–ß–ê (–æ—Ç–¥–∞–µ–º {trade.items_to_give_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)"
                else:
                    trade_info = f"üîÑ –û–ë–ú–ï–ù (–æ—Ç–¥–∞–µ–º {trade.items_to_give_count}, –ø–æ–ª—É—á–∞–µ–º {trade.items_to_receive_count})"
                
                print(f"  {i:2d}. {trade_type} | ID: {trade.tradeofferid}")
                print(f"      {trade_info}")
                print(f"      –ü–∞—Ä—Ç–Ω–µ—Ä: {trade.accountid_other} | –°–æ–∑–¥–∞–Ω: {trade.time_created}")
                print()
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.active_trades_cache = all_unfinished_trades
            
            return all_unfinished_trades
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤: {e}")
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not self.initialize_from_config():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
        try:
            main_menu = MainMenu(self)
            main_menu.run()
        except KeyboardInterrupt:
            print(f"\n{Messages.INTERRUPTED}")
        except Exception as e:
            print(f"\n{Messages.CRITICAL_ERROR.format(error=e)}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–≥–æ CLI"""
    cli = SteamBotCLI()
    cli.run()


if __name__ == "__main__":
    main() 
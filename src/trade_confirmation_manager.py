#!/usr/bin/env python3
"""
Trade Confirmation Manager - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–π–¥–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
"""

import re
import time
import traceback
from datetime import datetime
from enum import Enum
from typing import List, Dict, Optional, Any, Union
from urllib.parse import unquote

from src.utils.logger_setup import logger, print_and_log
from src.steampy.client import SteamClient
from src.steampy.guard import generate_one_time_code, generate_confirmation_key, load_steam_guard
from src.models import TradeOffersResponse, TradeOffer, TradeOfferState, SteamApiResponse
from src.cookie_manager import CookieManager
from src.steampy.confirmation import Confirmation, ConfirmationExecutor
from src.steampy.models import ConfirmationType


class TradeConfirmationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–π–¥–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, username: str, mafile_path: str, cookie_manager: CookieManager, api_key: Optional[str] = None):
        self.username = username
        self.mafile_path = mafile_path
        self.cookie_manager = cookie_manager
        self._steam_client: Optional[SteamClient] = None
        self._api_key = api_key
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ Steam Guard
        try:
            self.steam_guard_data = load_steam_guard(mafile_path)
            logger.info(f"‚úÖ Steam Guard –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {username}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Steam Guard –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        
        logger.info(f"üîÑ Trade Confirmation Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {username}")
    
    def _get_steam_client(self) -> SteamClient:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä SteamClient."""
        # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –∫–ª–∏–µ–Ω—Ç –∏–∑ CookieManager
        self._steam_client = self.cookie_manager.get_steam_client()
        if not self._steam_client:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Steam –∫–ª–∏–µ–Ω—Ç –∏–∑ CookieManager.")

        return self._steam_client
    
    def generate_guard_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
        try:
            shared_secret = self.steam_guard_data.get('shared_secret')
            if not shared_secret:
                raise ValueError("shared_secret –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Steam Guard –¥–∞–Ω–Ω—ã—Ö")
            
            code = generate_one_time_code(shared_secret)
            return code
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Guard –∫–æ–¥–∞: {e}")
            raise
    
    def get_trade_offers(self, active_only: bool = True, use_webtoken: bool = True) -> Optional[TradeOffersResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–æ–≤"""
        try:
            steam_client = self._get_steam_client()
            
            logger.info("üîç –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webtoken
            if not use_webtoken:
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, 2) —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤ –∫–ª–∏–µ–Ω—Ç–µ, 3) –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                if self._api_key:
                    # API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–º–µ–µ—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {self._api_key[:10]}...")
                    steam_client._api_key = self._api_key
                elif steam_client._api_key:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –Ω–æ –µ—Å—Ç—å –≤ –∫–ª–∏–µ–Ω—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á: {steam_client._api_key[:10]}...")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ –Ω–∏–≥–¥–µ - –ø–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    logger.info("üîë –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
                    
                    try:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
                        api_key = self._get_api_key_from_web(steam_client)
                        if api_key:
                            steam_client._api_key = api_key
                            logger.info(f"API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω: {api_key[:10]}...")
                        else:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á")
                            return None
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞: {e}")
                        return None
            else:
                logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º access_token –∏–∑ cookies (webtoken)")
            
            # –ü–æ–ª—É—á–∞–µ–º access_token –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
            access_token = None
            if use_webtoken:
                access_token = self._get_access_token(steam_client)
                if not access_token:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token")
                    use_webtoken = False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {}
            if use_webtoken:
                params['access_token'] = access_token
            else:
                params['key'] = steam_client._api_key
            
            params.update({
                'get_sent_offers': 1,
                'get_received_offers': 1,
                'get_descriptions': 1,
                'language': 'english',
                'active_only': 1 if active_only else 0,
                'historical_only': 0,
                'time_historical_cutoff': ''
            })
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            api_response = steam_client.api_call('GET', 'IEconService', 'GetTradeOffers', 'v1', params)
            response_data = api_response.json()
            

            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ TradeOffersResponse
            trade_offers = TradeOffersResponse(**response_data.get('response', {}))
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–æ–≤:")
            logger.info(f"  - –í—Ö–æ–¥—è—â–∏–µ –≤—Å–µ–≥–æ: {len(trade_offers.trade_offers_received)}")
            logger.info(f"  - –í—Ö–æ–¥—è—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ: {len(trade_offers.active_received)}")
            logger.info(f"  - –í—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(trade_offers.confirmation_needed_received)}")
            logger.info(f"  - –ò—Å—Ö–æ–¥—è—â–∏–µ –≤—Å–µ–≥–æ: {len(trade_offers.trade_offers_sent)}")
            logger.info(f"  - –ò—Å—Ö–æ–¥—è—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ: {len(trade_offers.active_sent)}")
            logger.info(f"  - –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(trade_offers.confirmation_needed_sent)}")
            
            return trade_offers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
            logger.debug(traceback.format_exc())
            return None
    
    def _get_api_key_from_web(self, steam_client: SteamClient) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Steam (—Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥)"""
        try:
            logger.info("–ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
            
            # Steam –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–µ—Å—Å–∏–µ–π –∏–∑ pkl —Ñ–∞–π–ª–∞
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ API –∫–ª—é—á–∞
            req = steam_client._session.get('https://steamcommunity.com/dev/apikey')
            
            if req.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ API –∫–ª—é—á–∞: {req.status_code}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            if 'Sign In' in req.text and 'login' in req.url.lower():
                logger.error("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cookies.")
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π —Ä–µ–≥–µ–∫—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            data_apikey = re.findall(r"([^\\\n.>\\\t</_=:, $(abcdefghijklmnopqrstuvwxyz )&;-]{32})", fr"{req.text}")
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(data_apikey)}")
            if data_apikey:
                logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏: {data_apikey}")
            
            if len(data_apikey) == 1:
                apikey = data_apikey[0]
                steam_client._api_key = apikey
                logger.info(f"API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {apikey[:10]}...")
                return apikey
            elif len(data_apikey) > 1:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                apikey = data_apikey[0]
                steam_client._api_key = apikey
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(data_apikey)} –∫–ª—é—á–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π: {apikey[:10]}...")
                return apikey
            else:
                # API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
                logger.info("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å...")
                
                if 'You must have a validated email address' in req.text:
                    logger.error("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email")
                    return None
                elif 'Register for a Steam Web API Key' in req.text:
                    logger.info("API –∫–ª—é—á –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å...")
                    return self._create_api_key(steam_client)
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ API –∫–ª—é—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    return None
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –≤–µ–±: {e}")
            return None
    
    def _create_api_key(self, steam_client: SteamClient) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞"""
        try:
            logger.info("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∫–ª—é—á...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É
            response = steam_client._session.get('https://steamcommunity.com/dev/apikey')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º sessionid –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã
            sessionid_pattern = r'g_sessionID = "([^"]+)"'
            sessionid_match = re.search(sessionid_pattern, response.text)
            
            if not sessionid_match:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ sessionid –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞")
                return None
            
            sessionid = sessionid_match.group(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            create_data = {
                'domain': 'test',  # –î–æ–º–µ–Ω –º–æ–∂–Ω–æ –ª—é–±–æ–π
                'agreeToTerms': 'agreed',
                'sessionid': sessionid,
                'Submit': 'Register'
            }
            
            create_response = steam_client._session.post(
                'https://steamcommunity.com/dev/registerkey',
                data=create_data
            )
            
            if create_response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if 'successful' in create_response.text.lower():
                    logger.info("API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ...")
                    # –°–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á
                    time.sleep(1)
                    return self._get_api_key_from_web(steam_client)
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª—é—á")
                    return None
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞: {create_response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–∞: {e}")
            return None

    def _get_access_token(self, steam_client: SteamClient) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ access_token –∏–∑ cookies"""
        try:
            jar = steam_client._session.cookies
            steam_login_secure_cookie = None
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ cookies –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            available_cookies = [f"{cookie.name}@{cookie.domain}" for cookie in jar]
            logger.info(f"üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ cookies –≤ trade_confirmation_manager: {available_cookies}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º cookie
            logger.info("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ cookies:")
            for cookie in jar:
                logger.info(f"  {cookie.name}@{cookie.domain} = {cookie.value[:50]}... (secure: {cookie.secure}, expires: {cookie.expires})")
            
            # –ò—â–µ–º steamLoginSecure –≤ –ª—é–±–æ–º –¥–æ–º–µ–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            steam_login_secure_found = False
            for cookie in jar:
                if cookie.name == 'steamLoginSecure':
                    steam_login_secure_found = True
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω steamLoginSecure –≤ –¥–æ–º–µ–Ω–µ: {cookie.domain} (–Ω–æ –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ steamcommunity.com)")
            
            # –ò—â–µ–º steamLoginSecure —Ç–æ–ª—å–∫–æ –≤ steamcommunity.com
            for cookie in jar:
                if cookie.name == 'steamLoginSecure' and cookie.domain == 'steamcommunity.com':
                    steam_login_secure_cookie = cookie.value
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω steamLoginSecure –≤ –¥–æ–º–µ–Ω–µ: {cookie.domain}")
                    break
            
            if not steam_login_secure_cookie:
                logger.warning("‚ùå Cookie 'steamLoginSecure' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–º–µ–Ω–µ steamcommunity.com")
                if steam_login_secure_found:
                    logger.warning("‚ö†Ô∏è –ù–æ steamLoginSecure –Ω–∞–π–¥–µ–Ω –≤ –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–∞—Ö!")
                return None
            
            decoded_cookie_value = unquote(steam_login_secure_cookie)
            access_token_parts = decoded_cookie_value.split('||')
            
            if len(access_token_parts) < 2:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å access_token –∏–∑ cookie")
                return None
            
            access_token = access_token_parts[1]
            logger.info(f"‚úÖ Access token –∏–∑–≤–ª–µ—á–µ–Ω: {access_token[:15]}...")
            return access_token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è access_token: {e}")
            return None
    
    def get_confirmations(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        try:
            steam_client = self._get_steam_client()
            
            logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ steam_guard –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
            if not hasattr(steam_client, 'steam_guard') or not steam_client.steam_guard:
                logger.warning("‚ö†Ô∏è Steam Guard –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return []
            
            # –°–æ–∑–¥–∞–µ–º ConfirmationExecutor –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
            from .steampy.confirmation import ConfirmationExecutor
            
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ ConfirmationExecutor
            confirmations = confirmation_executor._get_confirmations()
            
            if confirmations:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(confirmations)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                confirmations_data = []
                for i, conf in enumerate(confirmations, 1):
                    conf_data = {
                        'id': conf.data_confid,
                        'nonce': conf.nonce,
                        'creator_id': conf.creator_id,
                        'type': 'unknown'  # –¢–∏–ø –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    }
                    confirmations_data.append(conf_data)
                    
                    logger.info(f"  {i}. ID: {conf.data_confid}, Creator ID: {conf.creator_id}")
                
                return confirmations_data
            else:
                logger.info("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                print_and_log("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {e}")
            logger.debug(traceback.format_exc())
            return []
    
    def get_guard_confirmations(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            steam_client = self._get_steam_client()
            
            logger.info("üîê –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Guard...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ steam_guard –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
            if not hasattr(steam_client, 'steam_guard') or not steam_client.steam_guard:
                logger.warning("‚ö†Ô∏è Steam Guard –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return []
            
            # –°–æ–∑–¥–∞–µ–º ConfirmationExecutor –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
            from .steampy.confirmation import ConfirmationExecutor
            from src.utils.confirmation_utils import determine_confirmation_type_from_json, extract_confirmation_info
            
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–ª—É—á–∞–µ–º JSON —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            confirmations_page = confirmation_executor._fetch_confirmations_page()
            confirmations_json = confirmations_page.json()
            
            if not confirmations_json.get('success'):
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return []
            
            all_confirmations = confirmations_json.get('conf', [])
            
            if not all_confirmations:
                logger.info("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return []
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_confirmations)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            detailed_confirmations = []
            for i, conf_data in enumerate(all_confirmations, 1):
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ JSON –¥–∞–Ω–Ω—ã–º
                    confirmation_type = determine_confirmation_type_from_json(conf_data)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    confirmation_info = extract_confirmation_info(conf_data, confirmation_type)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Confirmation –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    conf = Confirmation(
                        data_confid=conf_data['id'],
                        nonce=conf_data['nonce'],
                        creator_id=int(conf_data['creator_id'])
                    )
                    
                    detailed_conf = {
                        'id': conf_data['id'],
                        'nonce': conf_data['nonce'],
                        'creator_id': int(conf_data['creator_id']),
                        'type': confirmation_type,
                        'description': confirmation_info.get('description', f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ #{conf_data["id"]}'),
                        'confirmation_info': confirmation_info,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        'confirmation': conf  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    }
                    
                    detailed_confirmations.append(detailed_conf)
                    
                    logger.info(f"  {i}. {confirmation_type} - {detailed_conf['description']} (ID: {conf_data['id']})")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {conf_data.get('id', 'unknown')}: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    detailed_conf = {
                        'id': conf_data.get('id', 'unknown'),
                        'nonce': conf_data.get('nonce', ''),
                        'creator_id': int(conf_data.get('creator_id', 0)),
                        'type': 'unknown',
                        'description': f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ #{conf_data.get("id", "unknown")}',
                        'confirmation_info': {},
                        'confirmation': None
                    }
                    detailed_confirmations.append(detailed_conf)
            
            return detailed_confirmations
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π Guard: {e}")
            logger.debug(traceback.format_exc())
            return []
    
    def _determine_confirmation_type(self, details_html: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        from src.utils.confirmation_utils import determine_confirmation_type
        return determine_confirmation_type(details_html)
    
    def _extract_confirmation_info(self, details_html: str, confirmation_type: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ HTML –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        from src.utils.confirmation_utils import extract_confirmation_info
        return extract_confirmation_info(details_html, confirmation_type)
    
    def confirm_guard_confirmation(self, confirmation_obj) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Guard"""
        try:
            steam_client = self._get_steam_client()
            
            logger.info(f"üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Guard: {confirmation_obj.data_confid}")
            
            # –°–æ–∑–¥–∞–µ–º ConfirmationExecutor
            from .steampy.confirmation import ConfirmationExecutor
            
            confirmation_executor = ConfirmationExecutor(
                identity_secret=steam_client.steam_guard['identity_secret'],
                my_steam_id=steam_client.steam_id,
                session=steam_client._session
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ executor –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            response = confirmation_executor._send_confirmation(confirmation_obj)
            
            if response and response.get('success'):
                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {confirmation_obj.data_confid} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                return True
            else:
                error_message = response.get('error', 'Unknown error') if response else 'No response'
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {confirmation_obj.data_confid}: {error_message}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Guard: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def accept_trade_offer(self, trade_offer_id: str, partner_account_id: str = None) -> bool:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–∞ —á–µ—Ä–µ–∑ steampy –∫–ª–∏–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –≤–µ–±-–ø—Ä–∏–Ω—è—Ç–∏–µ, –±–µ–∑ Guard)"""
        try:
            steam_client = self._get_steam_client()
            
            logger.info(f"–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {trade_offer_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å partner_account_id
            if partner_account_id:
                result = steam_client.accept_trade_offer_optimized(trade_offer_id, partner_account_id)
            else:
                result = steam_client.accept_trade_offer(trade_offer_id)
            
            if result is None:
                logger.error(f"–¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä {trade_offer_id}: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Steam")
                return False
            elif result.get('tradeid'):
                logger.info(f"–¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä {trade_offer_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (Trade ID: {result['tradeid']})")
                return True
            elif result.get('needs_mobile_confirmation'):
                logger.info(f"–¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä {trade_offer_id} –ø—Ä–∏–Ω—è—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Guard")
                return True
            elif result.get('strError'):
                logger.error(f"–û—à–∏–±–∫–∞ Steam –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {result['strError']}")
                return False
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {result}")
                # –î–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç—Ä–µ–π–¥ –ø—Ä–∏–Ω—è—Ç –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–π –æ—à–∏–±–∫–∏
                return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–∞ {trade_offer_id} –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {e}")
            logger.debug(traceback.format_exc())
            return False

    def accept_trade_offer_with_confirmation(self, trade_offer_id: str) -> bool:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–∞ —á–µ—Ä–µ–∑ steampy –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Guard"""
        try:
            steam_client = self._get_steam_client()
            
            logger.info(f"–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä —Å –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {trade_offer_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ steampy —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            result = steam_client.accept_trade_offer_with_confirmation(trade_offer_id)
            
            if result.get('tradeid'):
                logger.info(f"–¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä {trade_offer_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (Trade ID: {result['tradeid']})")
                return True
            elif result.get('strError'):
                logger.error(f"–û—à–∏–±–∫–∞ Steam: {result['strError']}")
                return False
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–∞ {trade_offer_id} —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {e}")
            logger.debug(traceback.format_exc())
            return False

    def confirm_accepted_trade_offer(self, trade_offer_id: str) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–∞ —á–µ—Ä–µ–∑ Steam Guard"""
        try:
            steam_client = self._get_steam_client()
            
            logger.info(f"üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã–π —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä —á–µ—Ä–µ–∑ Guard: {trade_offer_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ steampy –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ç—Ä–µ–π–¥–∞
            result = steam_client.confirm_accepted_trade_offer(trade_offer_id)
            
            if result and not result.get('strError'):
                logger.info(f"‚úÖ –¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä {trade_offer_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Guard")
                return True
            else:
                error_msg = result.get('strError', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä {trade_offer_id} —á–µ—Ä–µ–∑ Guard: {error_msg}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞ {trade_offer_id} —á–µ—Ä–µ–∑ Guard: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def decline_trade_offer(self, trade_offer_id: str) -> bool:
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–∞"""
        try:
            steam_client = self._get_steam_client()
            
            logger.info(f"‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä: {trade_offer_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ steampy –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞
            result = steam_client.decline_trade_offer(trade_offer_id)
            
            if result:
                logger.info(f"‚úÖ –¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä {trade_offer_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä {trade_offer_id}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä–∞ {trade_offer_id}: {e}")
            logger.debug(traceback.format_exc())
            return False
    
    def process_free_trades(self, auto_accept: bool = True, auto_confirm: bool = True) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤ (–ø–æ–¥–∞—Ä–∫–æ–≤)
        
        Args:
            auto_accept: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–µ–π–¥—ã
            auto_confirm: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ —Ç—Ä–µ–π–¥—ã
            
        Returns:
            Dict —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
        """
        stats = {
            'found_free_trades': 0,
            'accepted_trades': 0,
            'confirmed_trades': 0,
            'errors': 0
        }
        
        try:
            logger.info("üéÅ –ò—â–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–µ–π–¥—ã (–ø–æ–¥–∞—Ä–∫–∏)...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–π–¥—ã
            trade_offers = self.get_trade_offers(active_only=True)
            if not trade_offers:
                logger.info("‚ÑπÔ∏è –¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return stats
            
            # –ò—â–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–π–¥—ã
            free_trades = []
            for offer in trade_offers.active_received:
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥ = –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–¥–∞–µ–º, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∞–µ–º
                if offer.items_to_give_count == 0 and offer.items_to_receive_count > 0:
                    free_trades.append(offer)
                    logger.info(f"üéÅ –ù–∞–π–¥–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥: {offer.tradeofferid} (–ø–æ–ª—É—á–∞–µ–º {offer.items_to_receive_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)")
            
            stats['found_free_trades'] = len(free_trades)
            
            if not free_trades:
                logger.info("‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                print_and_log("‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return stats
            
            logger.info(f"üéÅ –ù–∞–π–¥–µ–Ω–æ {len(free_trades)} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥
            for offer in free_trades:
                try:
                    if auto_accept:
                        # –®–∞–≥ 1: –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–µ–π–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
                        logger.info(f"üåê –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {offer.tradeofferid}")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º partner_account_id –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å—ã)
                        partner_account_id = str(offer.accountid_other)
                        if self.accept_trade_offer(offer.tradeofferid, partner_account_id):
                            stats['accepted_trades'] += 1
                            logger.info(f"‚úÖ –ü—Ä–∏–Ω—è—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥: {offer.tradeofferid}")
                            
                            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                            time.sleep(2)
                            
                            if auto_confirm:
                                # –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã–π —Ç—Ä–µ–π–¥ —á–µ—Ä–µ–∑ Guard
                                logger.info(f"üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —á–µ—Ä–µ–∑ Guard: {offer.tradeofferid}")
                                if self.confirm_accepted_trade_offer(offer.tradeofferid):
                                    stats['confirmed_trades'] += 1
                                    logger.info(f"üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ Guard –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥: {offer.tradeofferid}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ Guard —Ç—Ä–µ–π–¥: {offer.tradeofferid}")
                                    stats['errors'] += 1
                            else:
                                logger.info(f"‚ÑπÔ∏è –¢—Ä–µ–π–¥ {offer.tradeofferid} –ø—Ä–∏–Ω—è—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–æ auto_confirm –æ—Ç–∫–ª—é—á–µ–Ω")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥: {offer.tradeofferid}")
                            stats['errors'] += 1
                    else:
                        logger.info(f"‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–µ–π–¥ –Ω–∞–π–¥–µ–Ω, –Ω–æ auto_accept –æ—Ç–∫–ª—é—á–µ–Ω: {offer.tradeofferid}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–∞ {offer.tradeofferid}: {e}")
                    stats['errors'] += 1
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤:")
            logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ: {stats['found_free_trades']}")
            logger.info(f"  - –ü—Ä–∏–Ω—è—Ç–æ: {stats['accepted_trades']}")
            logger.info(f"  - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {stats['confirmed_trades']}")
            logger.info(f"  - –û—à–∏–±–æ–∫: {stats['errors']}")
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤: {e}")
            logger.debug(traceback.format_exc())
            stats['errors'] += 1
            return stats
    
    def process_confirmation_needed_trades(self, auto_confirm: bool = True) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –≤ –≤–µ–±–µ)
        
        Args:
            auto_confirm: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ç—Ä–µ–π–¥—ã
            
        Returns:
            Dict —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
        """
        stats = {
            'found_confirmation_needed': 0,
            'confirmed_trades': 0,
            'errors': 0
        }
        
        try:
            logger.info("üîë –ò—â–µ–º —Ç—Ä–µ–π–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–π–¥—ã
            trade_offers = self.get_trade_offers(active_only=False)
            if not trade_offers:
                logger.info("‚ÑπÔ∏è –¢—Ä–µ–π–¥ –æ—Ñ—Ñ–µ—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return stats
            
            # –ò—â–µ–º —Ç—Ä–µ–π–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_needed_trades = []
            confirmation_needed_trades.extend(trade_offers.confirmation_needed_received)
            confirmation_needed_trades.extend(trade_offers.confirmation_needed_sent)
            
            stats['found_confirmation_needed'] = len(confirmation_needed_trades)
            
            if not confirmation_needed_trades:
                logger.info("‚ÑπÔ∏è –¢—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                print_and_log("‚ÑπÔ∏è –¢—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return stats
            
            logger.info(f"üîë –ù–∞–π–¥–µ–Ω–æ {len(confirmation_needed_trades)} —Ç—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–π–¥
            for offer in confirmation_needed_trades:
                try:
                    logger.info(f"üîë –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–π–¥: {offer.tradeofferid} (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {offer.state_name})")
                    
                    if auto_confirm:
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–µ–π–¥ —á–µ—Ä–µ–∑ Guard
                        if self.confirm_accepted_trade_offer(offer.tradeofferid):
                            stats['confirmed_trades'] += 1
                            logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ç—Ä–µ–π–¥: {offer.tradeofferid}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–µ–π–¥: {offer.tradeofferid}")
                            stats['errors'] += 1
                            
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
                        time.sleep(1)
                    else:
                        logger.info(f"‚ÑπÔ∏è –¢—Ä–µ–π–¥ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–æ auto_confirm –æ—Ç–∫–ª—é—á–µ–Ω: {offer.tradeofferid}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–∞ {offer.tradeofferid}: {e}")
                    stats['errors'] += 1
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤:")
            logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['found_confirmation_needed']}")
            logger.info(f"  - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {stats['confirmed_trades']}")
            logger.info(f"  - –û—à–∏–±–æ–∫: {stats['errors']}")
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–π–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            logger.debug(traceback.format_exc())
            stats['errors'] += 1
            return stats 
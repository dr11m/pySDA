#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ (–∏–ª–∏ –ø—Ä—è–º–æ–π IP –¥–ª—è no_proxy).
"""

import requests
import json
import time
from typing import Dict, Optional
from pathlib import Path

from src.cli.config_manager import ConfigManager
from src.utils.logger_setup import logger


class ProxyConnectionTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self):
        self.config_manager = ConfigManager()
        self.config_manager.load_config()
        
    def get_current_ip(self, proxy: Optional[Dict[str, str]] = None) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
        
        Args:
            proxy: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            IP –∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ API –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            apis = [
                'https://api.ipify.org?format=json',
                'https://httpbin.org/ip',
                'https://api.myip.com'
            ]
            
            for api_url in apis:
                try:
                    response = requests.get(api_url, proxies=proxy, timeout=10)
                    if response.status_code == 200:
                        data = response.json()
                        
                        # –†–∞–∑–Ω—ã–µ API –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç IP –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
                        if 'ip' in data:
                            return data['ip']
                        elif 'origin' in data:
                            return data['origin']
                        
                except Exception as e:
                    logger.debug(f"API {api_url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    continue
            
            logger.error("–í—Å–µ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {e}")
            return None
    
    def test_account_proxy(self, account_name: str) -> Dict[str, any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞
        """
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {account_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
        if not self.config_manager.select_account(account_name):
            return {
                'account_name': account_name,
                'status': 'error',
                'message': f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–æ–∫—Å–∏
        proxy_provider_config = self.config_manager.get('proxy_provider')
        if not proxy_provider_config:
            return {
                'account_name': account_name,
                'status': 'error',
                'message': '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            }
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏
            from src.factories import create_instance_from_config
            proxy_provider = create_instance_from_config(proxy_provider_config)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            proxy = proxy_provider.get_proxy(account_name)
            
            logger.info(f"üìã –ü—Ä–æ–∫—Å–∏ –¥–ª—è {account_name}: {proxy}")
            
            # –ü–æ–ª—É—á–∞–µ–º IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            ip_address = self.get_current_ip(proxy)
            
            if ip_address is None:
                return {
                    'account_name': account_name,
                    'status': 'error',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å',
                    'proxy': proxy
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
            if proxy is None:
                # –î–ª—è no_proxy - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –Ω–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
                if self._is_local_ip(ip_address):
                    status = 'warning'
                    message = f'IP {ip_address} –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å (–≤–æ–∑–º–æ–∂–Ω–æ, VPN –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–µ–Ω)'
                else:
                    status = 'success'
                    message = f'–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: IP {ip_address}'
            else:
                # –î–ª—è –ø—Ä–æ–∫—Å–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                direct_ip = self.get_current_ip(None)
                if direct_ip and direct_ip != ip_address:
                    status = 'success'
                    message = f'–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: IP {ip_address} (–ø—Ä—è–º–æ–π IP: {direct_ip})'
                else:
                    status = 'warning'
                    message = f'IP {ip_address} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)'
            
            return {
                'account_name': account_name,
                'status': status,
                'message': message,
                'proxy': proxy,
                'ip_address': ip_address
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è {account_name}: {e}")
            return {
                'account_name': account_name,
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def _is_local_ip(self, ip: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ IP –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º"""
        try:
            parts = ip.split('.')
            if len(parts) != 4:
                return False
            
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: 10.x.x.x, 172.16-31.x.x, 192.168.x.x
            first = int(parts[0])
            second = int(parts[1])
            
            return (first == 10 or 
                   (first == 172 and 16 <= second <= 31) or 
                   (first == 192 and second == 168))
        except:
            return False
    
    def test_all_accounts(self) -> Dict[str, any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        """
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        account_names = self.config_manager.get_all_account_names()
        if not account_names:
            logger.error("–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return {'status': 'error', 'message': '–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
        
        results = {
            'total_accounts': len(account_names),
            'success_count': 0,
            'warning_count': 0,
            'error_count': 0,
            'accounts': []
        }
        
        for account_name in account_names:
            result = self.test_account_proxy(account_name)
            results['accounts'].append(result)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if result['status'] == 'success':
                results['success_count'] += 1
            elif result['status'] == 'warning':
                results['warning_count'] += 1
            else:
                results['error_count'] += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if results['error_count'] > 0:
            results['status'] = 'error'
        elif results['warning_count'] > 0:
            results['status'] = 'warning'
        else:
            results['status'] = 'success'
        
        return results
    
    def print_results(self, results: Dict[str, any]):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*60)
        print("üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ö–°–ò")
        print("="*60)
        
        if results['status'] == 'error' and 'message' in results:
            print(f"‚ùå {results['message']}")
            return
        
        print(f"üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {results['total_accounts']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['success_count']}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {results['warning_count']}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {results['error_count']}")
        print()
        
        for account_result in results['accounts']:
            status_icon = {
                'success': '‚úÖ',
                'warning': '‚ö†Ô∏è',
                'error': '‚ùå'
            }.get(account_result['status'], '‚ùì')
            
            print(f"{status_icon} {account_result['account_name']}")
            print(f"   {account_result['message']}")
            
            if 'proxy' in account_result and account_result['proxy']:
                proxy_str = account_result['proxy'].get('http', 'N/A')
                print(f"   –ü—Ä–æ–∫—Å–∏: {proxy_str}")
            elif 'proxy' in account_result and account_result['proxy'] is None:
                print(f"   –ü—Ä–æ–∫—Å–∏: no_proxy (–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)")
            
            if 'ip_address' in account_result:
                print(f"   IP: {account_result['ip_address']}")
            
            print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏")
    print()
    
    tester = ProxyConnectionTester()
    results = tester.test_all_accounts()
    tester.print_results(results)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if results['status'] == 'error':
        return 1
    elif results['status'] == 'warning':
        return 2
    else:
        return 0


if __name__ == '__main__':
    exit(main()) 